{"version":3,"sources":["generateID.js","components/RangeInput.js","components/Shape.js","components/Face.js","fixCamelCase.js","components/SingleParameterInput.js","components/ParameterSlider.js","components/RotateSliders.js","components/CanvasLayer.js","components/TranslateSliders.js","components/ShapePathPoint.js","components/PathSegment.js","components/Path.js","components/ShapeLayer.js","components/ShapeControls.js","components/Controls.js","components/Viewer.js","shapeProperties.js","createScript.js","components/SourceCodeDialog.js","components/AddShapeMenu.js","components/IlloToolbar.js","components/IlloExplorer.js","illoPresets.js","App.js","reportWebVitals.js","index.js"],"names":["generateID","numbers","code","i","charAt","Math","floor","random","length","console","log","RangeInput","props","className","Typography","id","label","value","Slider","min","max","step","onChange","e","React","Component","useStyles","makeStyles","theme","checkboxFace","display","marginTop","parameterInline","margin","inlineCheckbox","width","disabledlabel","fontSize","color","labelsm","Face","side","copyOfShape","updateShapes","cursorFocus","shapeRefs","classes","propname","toUpperCase","slice","paramRef","useEffect","refocus","FormControl","FormControlLabel","control","Checkbox","checked","faces","size","type","data","inputref","disabled","fixCamelCase","str","caps","replaceLetter","letter","toLowerCase","newStr","replace","uc","parameter","SingleParameterInput","InputLabel","htmlFor","Input","inputRef","marginLeft","slider","marginBottom","ParameterSlider","marksArray","marks","newmarks","mark","Number","push","undefined","sublabel","tau","Zdog","TAU","marks_rotate","parameterGroup","parameterSection","RotateSliders","nodeId","rotateData","rotateSliders","forEach","axis","axisVal","round","PI","v","checkbox","inlinecheckbox","parameterSubGroup","parameterCheckbox","inlineParameterCheckbox","subparameter","myprimary","root","backgroundColor","addshape","height","add","li","paddingTop","paddingBottom","nested","body2","formControl","spacing","minWidth","smallFont","fontWeight","CanvasLayer","animateParameters","stateVars","canvas_w","setCanvas_w","canvas_h","setCanvas_h","dragRotate","animate","rotate_x","rotate_y","rotate_z","spin_x","setSpin_x","spin_y","setSpin_y","spin_z","setSpin_z","easeIO","setEaseIO","animateSelection","setAnimateSelection","fallback","setFallback","animationOption","setAnimationOption","bgColor","setBgColor","checkCursorFocus","updateEaseIO","paramID","val","param","split","easeIO_copy","JSON","parse","stringify","Fragment","variant","toFixed","x","name","y","z","cycleCount","power","target","Tooltip","mediumFont","title","multiline","maxRows","component","RadioGroup","Radio","Select","labelId","MenuItem","TranslateSliders","marginRight","textField","ptBtn","pathpointHeader","pathpointContainer","ShapePathPoint","pathindex","segmentindex","addedShapes","flattened","emptyOrNegative","ppRefs","useRef","segment","path","Object","keys","baseid","pp","checkValueOnBlur","updatePathPoint","setfocus","set","selectionStart","pos","focusid","includes","ppRef","current","focus","setSelectionRange","ppRefocus","onBlur","pathSegmentHeader","pathSegmentContainer","PathSegment","deleteSegmentBtnContainer","IconButton","onClick","flatpath","newpatharry","flat","copyPath","splice","labelUI","sppArry","spp","pt","Path","useState","anchorEl","setAnchorEl","handleClose","addToPath","Vector","line","move","pts","arc","bezier","segments","item","createPathSegments","currentTarget","Menu","keepMounted","open","Boolean","onClose","paddingLeft","delete","confirmDialog","padding","ShapeLayer","selectedNodeId","shapes","setShapes","basicRefs","copyShapes","newshapearry","currentShape","posNums","map","s","posNum","children","locateShapeInAddedShapesTree","controlType","splitElID","property","shapeProp","colorControls","shapeSpecificControls","faceControls","faceContainer","splitID","shapeClass","faceComp","spi","cylinderFrontFace","frontFace","backface","createColorControls","fill","stroke","translate","rotate","ShapeControls","Controls","illo","Viewer","refRotate_x","refRotate_y","refRotate_z","isRotating","refSpin_x","refSpin_y","refSpin_z","refAnimateSelection","refEaseIOx","refEaseIOy","refEaseIOz","refEaseIOcycleCount","refEaseIOpower","af","refAnimationOption","createChildShapes","parent","parentInstance","shape","addTo","createIllo","Illustration","element","setSize","face","shapeInstance","updateRenderGraph","ticker","rotateIllo","cancelAnimationFrame","progress","tween","easeInOut","requestAnimationFrame","style","shapeProperties","createScript","illoVars","shapesCopy","endString","scriptString","shapeCount","parentName","dataString","newShapeString","concat","invisible","visibility","container","snackbar","extraMarginTop","SourceCodeDialog","snackbarOpen","setSnackbarOpen","editorVisibility","setEditorVisibility","setOpen","clipboardCopy","elID","text","document","getElementById","innerText","navigator","clipboard","writeText","then","setTimeout","codetagsHTML_canvas","codetagsHTML_script","snippet_canvas","CodeJar","hljs","highlightAll","updateCode","codetagsJS","jar","fixed","replaceAll","removeAllDoubleDashQuotes","toString","onUpdate","Dialog","maxWidth","Container","Snackbar","ContentProps","anchorOrigin","vertical","horizontal","autoHideDuration","message","addbtn","AddShapeMenu","addNewZdogShape","handleShapeSelect","event","divider","IlloToolbar","setPresets","confirmDialogOpen","setConfirmDialogOpen","confirmCreateNewDialogOpen","setConfirmCreateNewDialogOpen","handleCloseCreateNewDialog","Button","ButtonGroup","lastpos","pop","parentNodeId","n","join","overflowX","overflowY","window","innerHeight","IlloExplorer","expanded","setExpanded","copyArray","a","newArray","createTree","childrenArray","parentnodeid","p","TreeItem","toptreelevel","parentId","copied","checkParentExpanded","TreeView","defaultCollapseIcon","defaultExpandIcon","selected","onNodeToggle","nodeIds","onNodeSelect","illoPresets","shapeLayers","zdogDefaultShapes","Group","Ellipse","Rect","Box","Hemisphere","RoundedRect","Polygon","Cone","Cylinder","Shape","bar","borderBottom","toolbar","justifyContent","purple","borderStyle","borderWidth","borderColor","left","App","presets","psets","updateAllPresets","selectedPresets","handleCloseMore","openInNewTab","url","AppBar","elevation","position","Toolbar","shapeDefaults","defaultShapes","zdogShape","props_shape","prop","defaultVal","closed","getDefaultValsForShapeProperties","newshape","childcount","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.fdd19380.chunk.js","sourcesContent":["export default function generateID() {\n    const length = 5;\n    //const letters_no_o = \"ABCDEFGHIJKLMNPQRSTUVWXYZ\";\n    const numbers = \"0123456789\";\n    //const alphanumeric = letters_no_o.concat(numbers);\n    let code = '';\n    for (let i = 0; i < length; i++) {\n        code += numbers.charAt(Math.floor(Math.random() * numbers.length));\n    }\n    console.log(code);\n    return code;\n}","import Slider from '@material-ui/core/Slider';\nimport Typography from '@material-ui/core/Typography';\n\nfunction RangeInput(props) {\n    function handle_onChange(e) {\n        console.log('range input changed');\n        props.onChange(e);\n    }\n\n    return (\n        <div className=\"parameter\">\n            <Typography id={props.id}>{props.label}= {props.value}</Typography>\n            <Slider value={props.value} min={props.min} max={props.max} step={props.step} onChange={handle_onChange} aria-labelledby={props.id}/>\n        </div>\n    );\n}\n\nexport default RangeInput;\n\n/*\n\n<label htmlFor={props.id}>{props.label}= {props.value}</label>\n            <input type=\"range\" id={props.id} name=\"parameter\" value={props.value} min={props.min} max={props.max} step={props.step} disabled={props.disabled} onChange={handle_onChange}/>\n\n            */","import React from 'react';\nimport generateID from '../generateID';\nimport RangeInput from './RangeInput';\n\nclass Shape extends React.Component {\n    constructor(props) {\n        super(props);\n        this.canvasMin = Math.min(parseInt(this.props.appstate.canvas_width), parseInt(this.props.appstate.canvas_height));\n        this.shapes = this.props.appstate.shapes;\n        this.shapedata = this.shapes[this.props.id];\n        this.paramToInput = {\n            'diameter': 'createInputRange'\n        }\n        this.ellipse = ['diameter', 'stroke', 'color'];\n        this.handle_onChange = this.handle_onChange.bind(this);\n        this.createRangeInput = this.createRangeInput.bind(this);\n        //this.createControlsForNewEllipse = this.createControlsForNewEllipse.bind(this);\n        this.createControls = this.createControls.bind(this);\n        this.createParam = this.createParam.bind(this);\n    }\n\n    handle_onChange(e) {\n        console.log('shape component');\n        this.props.onChange(e);\n    }\n\n    \n    createRangeInput(paramclass, paramvalue) {\n        return (\n            <RangeInput \n                key={generateID()}\n                id={`${paramclass}1`} \n                label={paramclass}\n                name=\"parameter\"\n                value={paramvalue}\n                min={0}\n                max={this.canvasMin}\n                step={1}\n                disabled={false}\n                onChange={this.props.onChange}\n            ></RangeInput>\n        )\n    }\n\n    createParam(paramclass, paramvalue) {\n        return this.createRangeInput(paramclass, paramvalue);\n        //this.paramToInput[paramclass]\n    }\n    \n    /*\n    createControlsForNewEllipse(shapeid) {\n        let diameter = this.createRangeInput(this.paramClasses['diameter']);\n        let stroke = this.createRangeInput(this.paramClasses['stroke']);\n        let section = (\n            <section className=\"controls_shape\">\n                {diameter, stroke}\n            </section>\n        )\n        return section;\n    }\n    */\n\n    createControls() {\n        let inputs = this.shapedata.params.map((param) => {\n            let paramclass = Object.keys(param)[0];\n            let paramvalue = param[paramclass];\n            console.log(paramclass, paramvalue);\n            let inputcomponent = this.createParam(paramclass, paramvalue);\n            return inputcomponent;\n        })\n        return inputs;\n    }\n\n    render() {\n\n        let inputs = this.createControls();\n\n        return (\n            <section className=\"controls_shape\">\n                {inputs}\n            </section>\n            /*\n            <section className=\"controls_shape\" id={this.props.data.id}>\n                <h3>Ellipse</h3>\n                <div className=\"parameter\">\n                  <label htmlFor=\"diameter1\">Diameter = </label>\n                  <span id=\"diameter1value\">100</span>\n                  <input type=\"range\" className=\"diameter\" id=\"diameter1\" name=\"parameter_shape1\" min=\"0\" max=\"240\" value=\"100\"\n                    step=\"1\" />\n                </div>\n                <div className=\"parameter\">\n                  <label htmlFor=\"stroke1\">Stroke = </label>\n                  <span id=\"stroke1value\">20</span>\n                  <input type=\"range\" className=\"stroke\" id=\"stroke1\" name=\"parameter_shape1\" min=\"0\" max=\"240\" value=\"20\" step=\"1\"\n                    list=\"tickmarks_stroke\" />\n                </div>\n                <div className=\"parameter\">\n                  <label htmlFor=\"color1\">Color = </label>\n                  <span id=\"color1value\">#663366</span>\n                  <input type=\"color\" className=\"color\" id=\"color1\" name=\"parameter_shape1\" value=\"#663366\" />\n                </div>\n              </section>\n              */\n        );\n    }\n    \n}\n\nexport default Shape;","import React, { useEffect } from 'react';\nimport '../zdogui.css';\nimport { FormControl, FormControlLabel, Checkbox, makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n\n    checkboxFace: {\n        'padding-bottom': 12,\n        display: 'inline-block',\n        marginTop: 4\n    },\n    parameterInline: {\n        display: 'inline-block',\n        margin: 12\n    },\n    inlineCheckbox: {\n        display: 'inline-block',\n        marginTop: 2,\n        width: 70\n    },\n    disabledlabel: {\n        fontSize: 'small',\n        color: 'darkgray'\n    },\n    labelsm: {\n        fontSize: 'small'\n    },\n}));\n\nfunction Face(props) {\n\n    const index = 0;\n\n    const side = props.side;\n    const copyOfShape = props.copyOfShape;\n\n    const updateShapes = props.updateShapes;\n\n    let cursorFocus = props.cursorFocus;\n\n    let shapeRefs = props.shapeRefs;\n\n    const classes = useStyles();\n\n    let propname = `${side}Face`;\n\n    let label = (side[0].toUpperCase() + side.slice(1));\n\n    let paramRef = shapeRefs[propname];\n\n    useEffect(() => {\n        props.refocus(cursorFocus, shapeRefs);\n    }, [])\n\n\n    return (\n        <div>\n\n            <FormControl className={classes.inlineCheckbox}>\n                <FormControlLabel\n                    label={label}\n                    control={<Checkbox checked={(copyOfShape.faces[propname] === true) ? true : false} onChange={(e) => updateShapes(e, 'checkbox_face', `${propname}_${index}`, '')} size=\"small\" color=\"primary\" className={classes.checkboxFace} />}\n                />\n            </FormControl>\n\n            <FormControl className={classes.parameterInline}>\n                <input type=\"color\" id={`${propname}_` + index} value={(copyOfShape.faces[propname] === true) ? copyOfShape.data[propname] : copyOfShape.faces[propname]} onChange={(e) => updateShapes(e, 'color', `${propname}_${index}`, '')} inputref={paramRef} disabled={/* colorDisabled */(copyOfShape.faces[propname] !== true) ? true : false}></input>\n            </FormControl>\n        </div>\n    )\n}\n\nexport default Face;","export default function fixCamelCase(str, caps=true) {\n    \n    function replaceLetter(letter) {\n        let l = (caps) ? letter : letter.toLowerCase();\n        return (' ' + l);\n    }\n\n    let newStr = str.replace(/[A-Z]/g, replaceLetter);\n    \n    if (caps) {\n        let uc = newStr.charAt(0).toUpperCase();\n        newStr = uc + newStr.slice(1);\n    }\n    return newStr;\n}","import React, { useEffect, useRef} from 'react';\nimport '../zdogui.css';\nimport { FormControl, Input, InputLabel, makeStyles } from '@material-ui/core';\nimport fixCamelCase from '../fixCamelCase';\n\nconst useStyles = makeStyles((theme) => ({\n    parameter: {\n        display: 'block',\n        margin: 12\n    }\n}));\n\nfunction SingleParameterInput(props) {\n\n    const index = 0;\n    const copyOfShape = props.copyOfShape;\n\n    const parameter = props.parameter;\n\n    const label = fixCamelCase(parameter);\n\n    const updateShapes = props.updateShapes;\n\n    //let cursorFocus = props.cursorFocus;\n\n    /* let shapeRefs = props.shapeRefs; */\n\n    let paramRef =  props.paramRef;\n\n    const classes = useStyles();\n\n    /* useEffect(() => {\n        props.refocus(cursorFocus, shapeRefs);\n    }, []) */\n\n    return (\n\n        <FormControl className={classes.parameter}>\n            <InputLabel htmlFor={parameter + '_' + index}>{label}</InputLabel>\n            <Input inputRef={paramRef} id={parameter + '_' + index} value={copyOfShape.data[parameter]} disabled={false} onChange={(e) => updateShapes(e, 'textinput', `${parameter}_${index}`, '')} />\n        </FormControl>\n\n    )\n\n}\n\nexport default SingleParameterInput;","import React from 'react';\nimport '../zdogui.css';\nimport { FormControl, Slider, makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n    parameter: {\n        display: 'block',\n        margin: 12,\n        marginLeft: 4\n    },\n    slider: {\n        marginBottom: 36,\n        display: 'block',\n        fontSize: 'small'\n    },\n    label: {\n        fontSize: 'small',\n        'margin-bottom': 8,\n        marginTop: 24\n    }\n}));\n\nfunction ParameterSlider(props) {\n\n    const [id, label, value] = [props.id, props.label, props.value];\n\n    //const sublabel = props.sublabel;\n\n    const [min, max, step] = [props.min, props.max, props.step];\n\n    const onChange = props.onChange;\n\n    let marksArray;\n\n    // create marks if empty\n    if (props.marks.length < 2) {\n        console.log('INSIDE EMPTY MARKS')\n        let newmarks = [];\n        for (let i=min; i <= max; i++) {\n            let mark = { 'value': Number(i), 'label': `${i}`};\n            newmarks.push(mark);\n        }\n        console.log(newmarks);\n        marksArray = newmarks;\n    } else {\n        marksArray = props.marks;\n    }\n\n    const classes = useStyles();\n\n    return (\n        <FormControl className={classes.parameter}>\n            <p id={id + '_label'} className={classes.label}>{label} {props.sublabel !== undefined ? <span className='tinytext'>{props.sublabel}</span> : ''} </p>\n            <Slider className={classes.slider} id={id} value={value} min={min} max={max} step={step} marks={marksArray} onChange={onChange} aria-labelledby={id + '_label'} />\n        </FormControl>\n    )\n\n}\n\nexport default ParameterSlider;","import React from 'react';\nimport {makeStyles} from '@material-ui/core';\nimport '../zdogui.css';\nimport ParameterSlider from './ParameterSlider';\nimport Zdog from 'zdog';\n\nconst tau = Zdog.TAU;\n\nconst marks_rotate = [\n    {\n        value: 0,\n        label: '0',\n    },\n    {\n        value: tau / 12,\n        label: '30',\n    },\n    {\n        value: tau / 4,\n        label: '90',\n    },\n    {\n        value: tau / 2,\n        label: '180',\n    },\n    {\n        value: ((tau / 4) * 3),\n        label: '270',\n    },\n    {\n        value: tau\n    },\n];\n\nconst useStyles = makeStyles((theme) => ({\n    parameterGroup: {\n        display: 'block',\n        margin: 12,\n        marginTop: 24,\n        fontSize: 'small'\n    },\n    parameterSection: {\n        display: 'block',\n        marginLeft: 12,\n        marginTop: 24,\n        marginBottom: 42,\n        fontSize: 'small'\n    },\n    label: {\n        fontSize: 'small',\n        'margin-bottom': 14,\n        marginTop: 24\n    }\n}));\n\nfunction RotateSliders(props) {\n\n    const classes = useStyles();\n\n    let updateShapes = props.updateShapes;\n\n    let nodeId = props.nodeId;\n    let rotateData = props.rotateData;\n\n    let axes = ['x', 'y', 'z'];\n    let rotateSliders = [];\n\n    axes.forEach((axis, i) => {\n        let id = `rotate_${axis}_0`;\n        let axisVal = (nodeId === 'canvasnode') ? rotateData[`rotate_${axis}`][0] : rotateData[axis];\n        let slider = (\n            <ParameterSlider\n                key={i}\n                id={id}\n                label={`${axis} = ${Math.round((axisVal) * (180 / Math.PI))}`}\n                value={axisVal}\n                min={0} max={tau} step={tau / 72} marks={marks_rotate}\n                onChange={(nodeId === 'canvasnode') ? ((e, v) => rotateData[`rotate_${axis}`][1](v)) : ((e, v) => updateShapes(e, 'vector', id, v))}\n            />\n        )\n        rotateSliders.push(slider);\n    });\n\n    return (\n\n        <div className={classes.parameterSection}>\n                <p className={classes.label}><b>Rotation</b></p>\n                {rotateSliders}\n        </div>\n    )\n}\n\nexport default RotateSliders;","import { Checkbox, FormControl, FormControlLabel, TextField, Tooltip, Badge, Select, MenuItem, Input, InputLabel, makeStyles, Slider, Typography, FormLabel, RadioGroup, Radio } from '@material-ui/core';\nimport React from 'react';\nimport RotateSliders from './RotateSliders';\nimport ParameterSlider from './ParameterSlider';\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\nimport HelpIcon from '@material-ui/icons/Help';\n\nconst useStyles = makeStyles((theme) => ({\n    slider: {\n        width: 155,\n        display: 'block',\n        marginTop: 4,\n        marginBottom: 6,\n        marginLeft: 12\n    },\n    checkbox: {\n        'padding-bottom': 10\n    },\n    inlinecheckbox: {\n        'padding-bottom': 10,\n        display: 'inline-block'\n    },\n    parameter: {\n        display: 'block',\n        margin: 12\n    },\n    parameterSubGroup: {\n        display: 'block',\n        margin: 12,\n        marginTop: 12,\n        fontSize: 'small'\n    },\n    parameterCheckbox: {\n        display: 'block',\n        'margin-left': 12,\n        'margin-top': 3,\n        'margin-bottom': 3\n    },\n    inlineParameterCheckbox: {\n        display: 'inline-block',\n        'margin-left': 12,\n        'margin-top': 3,\n        'margin-bottom': 3\n    },\n    subparameter: {\n        'margin-left': 38,\n        'margin-top': 3,\n        'margin-bottom': 3\n    },\n    myprimary: {\n        color: \"black\"\n    },\n    root: {\n        /* backgroundColor: \"#f1f1f1\", */\n        backgroundColor: \"#f9f9f9\",\n        fontSize: '0.9rem'\n    },\n    addshape: {\n        width: 140,\n        height: 32\n    },\n    add: {\n        backgroundColor: 'dodgerblue',\n        color: 'white'\n    },\n    li: {\n        paddingTop: 4,\n        paddingBottom: 4\n    },\n    nested: {\n        paddingTop: 4,\n        paddingBottom: 4\n    },\n    body2: {\n        fontSize: '0.9rem'\n    },\n    sublabel: {\n        fontSize: 'small',\n        'margin-bottom': 14,\n        marginTop: 8,\n        marginLeft: 8\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    smallFont: {\n        fontSize: 'small'\n    },\n    label: {\n        fontSize: 'small',\n        'margin-bottom': 14,\n        marginTop: 12,\n        fontWeight: 'bold'\n    }\n    /* mediumFont: {\n        fontSize: 16\n    } */\n}));\n\nfunction CanvasLayer(props) {\n\n    const stateVars = props.stateVars;\n    const [canvas_w, setCanvas_w] = [stateVars.canvas_w[0], stateVars.canvas_w[1]];\n    const [canvas_h, setCanvas_h] = [stateVars.canvas_h[0], stateVars.canvas_h[1]];\n    const [dragRotate, setDragRotate] = [stateVars.dragRotate[0], stateVars.dragRotate[1]];\n    const [animate, setAnimate] = [stateVars.animate[0], stateVars.animate[1]];\n    const [rotate_x, setRotate_x] = [stateVars.rotate_x[0], stateVars.rotate_x[1]];\n    const [rotate_y, setRotate_y] = [stateVars.rotate_y[0], stateVars.rotate_y[1]];\n    const [rotate_z, setRotate_z] = [stateVars.rotate_z[0], stateVars.rotate_z[1]];\n    const [spin_x, setSpin_x] = [stateVars.spin_x[0], stateVars.spin_x[1]];\n    const [spin_y, setSpin_y] = [stateVars.spin_y[0], stateVars.spin_y[1]];\n    const [spin_z, setSpin_z] = [stateVars.spin_z[0], stateVars.spin_z[1]];\n    const [easeIO, setEaseIO] = [stateVars.easeIO[0], stateVars.easeIO[1]];\n    const [animateSelection, setAnimateSelection] = [stateVars.animateSelection[0], stateVars.animateSelection[1]];\n    const [fallback, setFallback] = [stateVars.fallback[0], stateVars.fallback[1]];\n\n    const [animationOption, setAnimationOption] = [stateVars.animationOption[0], stateVars.animationOption[1]];\n\n    const [bgColor, setBgColor] = [stateVars.bgColor[0], stateVars.bgColor[1]];\n\n    let cursorFocus = props.cursorFocus;\n    let checkCursorFocus = props.checkCursorFocus;\n\n    const classes = useStyles();\n\n    const marks_cycleCount = [\n        {\n            value: 150,\n            label: 'short',\n        },\n        {\n            value: 450,\n            label: 'long',\n        }\n    ];\n\n    function updateEaseIO(paramID, val) {\n        let splitID = paramID.split('_');\n        let param = splitID[1];\n\n        let easeIO_copy = JSON.parse(JSON.stringify(easeIO));\n        easeIO_copy[param] = val;\n\n        setEaseIO(easeIO_copy);\n    }\n\n    function handleAnimateSelect(e) {\n        setAnimateSelection(e.target.value);\n    }\n\n    let animateParameters;\n\n    if (animateSelection === 'spin') {\n        animateParameters = (\n            <React.Fragment>\n                <FormControl className={classes.slider}>\n                    <Typography variant=\"body2\" id=\"spin_x_label\">x = {((spin_x) * (180 / Math.PI)).toFixed(1)} <span className='tinytext'>deg/rerender</span></Typography>\n                    <Slider className={classes.slider} id=\"spin_x\" value={spin_x} min={0} max={1} step={0.01} onChange={(e, v) => { setSpin_x(v); checkCursorFocus(); }} aria-labelledby=\"spin_x_label\" /* disabled={!animate} */ />\n                </FormControl>\n\n                <FormControl className={classes.slider}>\n                    <Typography variant=\"body2\" id=\"spin_y_label\">y = {((spin_y) * (180 / Math.PI)).toFixed(1)} <span className='tinytext'>deg/rerender</span></Typography>\n                    <Slider className={classes.slider} id=\"spin_y\" value={spin_y} min={0} max={1} step={0.01} onChange={(e, v) => { setSpin_y(v); checkCursorFocus(); }} aria-labelledby=\"spin_y_label\" /* disabled={!animate} */ />\n                </FormControl>\n\n                <FormControl className={classes.slider}>\n                    <Typography variant=\"body2\" id=\"spin_z_label\">z = {((spin_z) * (180 / Math.PI)).toFixed(1)} <span className='tinytext'>deg/rerender</span></Typography>\n                    <Slider className={classes.slider} id=\"spin_z\" value={spin_z} min={0} max={1} step={0.01} onChange={(e, v) => { setSpin_z(v); checkCursorFocus(); }} aria-labelledby=\"spin_z_label\" /* disabled={!animate} */ />\n                </FormControl>\n            </React.Fragment>\n        )\n    } else if (animateSelection === 'ease') {\n        animateParameters = (\n            <React.Fragment>\n                <div>\n                    <FormControl className={classes.inlineParameterCheckbox}>\n                        <FormControlLabel\n                            label=\"x\"\n                            control={<Checkbox className={classes.checkbox} checked={easeIO.x} onChange={() => { updateEaseIO(\"easeIO_x\", !easeIO.x); checkCursorFocus(); }} size=\"small\" name=\"easeIO_x\" id=\"easeIO_x\" color=\"primary\" />}\n                        />\n                    </FormControl>\n\n                    <FormControl className={classes.inlineParameterCheckbox}>\n                        <FormControlLabel\n                            label=\"y\"\n                            control={<Checkbox className={classes.checkbox} checked={easeIO.y} onChange={() => { updateEaseIO(\"easeIO_y\", !easeIO.y); checkCursorFocus(); }} size=\"small\" name=\"easeIO_y\" id=\"easeIO_y\" color=\"primary\" />}\n                        />\n                    </FormControl>\n\n                    <FormControl className={classes.inlineParameterCheckbox}>\n                        <FormControlLabel\n                            label=\"z\"\n                            control={<Checkbox className={classes.checkbox} checked={easeIO.z} onChange={() => { updateEaseIO(\"easeIO_z\", !easeIO.z); checkCursorFocus(); }} size=\"small\" name=\"easeIO_z\" id=\"easeIO_z\" color=\"primary\" />}\n                        />\n                    </FormControl>\n                </div>\n\n                <div className={classes.parameterSubGroup}>\n                    <ParameterSlider\n                        id='easeIO_cycleCount'\n                        label='Cycle'\n                        sublabel={`count = ${easeIO.cycleCount}`}\n                        value={easeIO.cycleCount}\n                        min={100} max={500} step={50} marks={marks_cycleCount}\n                        onChange={(e, v) => { updateEaseIO(\"easeIO_cycleCount\", v); checkCursorFocus(); }}\n                    />\n\n                    <ParameterSlider\n                        id='easeIO_power'\n                        label='Power'\n                        value={easeIO.power}\n                        min={2} max={5} step={1} marks={['']}\n                        onChange={(e, v) => { updateEaseIO(\"easeIO_power\", v); checkCursorFocus(); }}\n                    />\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    return (\n        <div>\n\n            <p className={classes.label + ' ' + classes.parameter}>Canvas</p>\n\n            <FormControl className={classes.parameter}>\n                <label htmlFor='bgColor' className={classes.labelsm}>Background</label>\n                <input type=\"color\" id='bgColor' value={bgColor} \n                onChange={(e) => {setBgColor(e.target.value); checkCursorFocus();}} /* inputref={basicRefs['color']} */></input>\n            </FormControl>\n\n            <FormControl className={classes.parameter}>\n                <InputLabel htmlFor=\"fallback\">Fallback Text {<Tooltip className={classes.mediumFont} title={<Typography variant=\"body2\">Alternative text added inside the canvas tags. Useful for assistive technology users (eg. screen readers) or browsers which don't support canvas rendering.</Typography>}><HelpIcon fontSize='inherit' /></Tooltip>}</InputLabel>\n\n                <Input\n                    id=\"fallback\"\n                    multiline\n                    maxRows={8}\n                    value={fallback}\n                    onChange={(e) => { setFallback(e.target.value); checkCursorFocus(); }}\n                />\n            </FormControl>\n\n            <FormControl className={classes.parameter}>\n                <InputLabel htmlFor=\"canvas_w\">Width</InputLabel>\n                <Input id=\"canvas_w\" value={canvas_w} disabled={false} onChange={\n                    (e) => { setCanvas_w(e.target.value); checkCursorFocus(); }\n                } />\n            </FormControl>\n\n            <FormControl className={classes.parameter}>\n                <InputLabel htmlFor=\"canvas_h\">Height</InputLabel>\n                <Input id=\"canvas_h\" value={canvas_h} disabled={false} onChange={(e) => { setCanvas_h(e.target.value); checkCursorFocus(); }} />\n            </FormControl>\n\n\n            <RotateSliders nodeId={'canvasnode'} rotateData={stateVars} updateShapes='' />\n\n            <FormControl component=\"fieldset\" className={classes.parameterCheckbox}>\n                {/* <FormLabel component=\"legend\">Animation</FormLabel> */}\n                <p className={classes.label}>Animation</p>\n                <RadioGroup\n                    aria-label=\"animation\"\n                    name=\"animation\"\n                    value={animationOption}\n                    onChange={(e) => setAnimationOption(e.target.value)}\n                >\n                    <FormControlLabel\n                        value=\"none\"\n                        label=\"None\"\n                        control={<Radio size=\"small\" color=\"primary\" />}\n                    />\n                    <FormControlLabel\n                        value=\"dragRotate\"\n                        label=\"Drag Rotate\"\n                        control={<Radio size=\"small\" color=\"primary\" />}\n                    />\n                    <FormControlLabel\n                        value=\"animate\"\n                        label=\"Animate\"\n                        control={<Radio size=\"small\" color=\"primary\" />}\n                    />\n                </RadioGroup>\n            </FormControl>\n\n\n            {/*    <FormControl className={classes.parameterCheckbox}>\n                <FormControlLabel\n                    label=\"Drag Rotate\"\n                    control={<Checkbox className={classes.checkbox} checked={dragRotate} onChange={() => { setDragRotate(!dragRotate); checkCursorFocus(); }} size=\"small\" name=\"dragRotate\" id=\"dragRotate\" color=\"primary\" />}\n                />\n            </FormControl>\n\n\n            <FormControl className={classes.parameterCheckbox}>\n                <FormControlLabel\n                    label=\"Animate\"\n                    control={<Checkbox className={classes.checkbox} checked={animate} onChange={() => { setAnimate(!animate); checkCursorFocus(); }} size=\"small\" name=\"animate\" id=\"animate\" color=\"primary\" />}\n                />\n            </FormControl> */}\n\n\n            <div className={classes.parameterSubGroup}>\n\n                <FormControl className={classes.formControl} disabled={animationOption !== 'animate'}>\n                    <Select\n                        labelId=\"animateSelection_label\"\n                        id=\"animateSelection\"\n                        value={animateSelection}\n                        onChange={handleAnimateSelect}\n                        className={classes.smallFont}\n                    >\n                        <MenuItem value='spin' className={classes.smallFont}>Continuous spin</MenuItem>\n                        <MenuItem value='ease' className={classes.smallFont}>Ease In/Out</MenuItem>\n                    </Select>\n                </FormControl>\n\n                {(animationOption === 'animate') ? animateParameters : ''}\n\n            </div>\n\n        </div>\n    )\n\n\n}\n\nexport default CanvasLayer;","import React from 'react';\nimport { makeStyles } from '@material-ui/core';\nimport '../zdogui.css';\nimport ParameterSlider from './ParameterSlider';\nimport Zdog from 'zdog';\n\nconst tau = Zdog.TAU;\n\nconst useStyles = makeStyles((theme) => ({\n    parameterGroup: {\n        display: 'block',\n        margin: 12,\n        marginTop: 24,\n        fontSize: 'small'\n    },\n    label: {\n        fontSize: 'small',\n        'margin-bottom': 14,\n        marginTop: 24\n    }\n}));\n\nfunction TranslateSliders(props) {\n\n    const classes = useStyles();\n\n    let updateShapes = props.updateShapes;\n\n    let [x_limit, y_limit] = [Math.round(props.canvasDim[0] / 2), Math.round(props.canvasDim[1] / 2)];\n    let z_limit = Math.max(x_limit, y_limit);\n\n    const limits = [x_limit, y_limit, z_limit];\n\n    let nodeId = props.nodeId;\n    let translateData = props.translateData;\n\n    let axes = ['x', 'y', 'z'];\n    let translateSliders = [];\n\n    axes.forEach((axis, i) => {\n        let limit = limits[i];\n        let id = `translate_${axis}_0`;\n        let axisVal = (nodeId === 'canvasnode') ? translateData[`translate_${axis}`][0] : translateData[axis];\n        let slider = (\n            <ParameterSlider\n                key={i}\n                id={id}\n                label={`${axis} = ${Math.round(axisVal)}`}\n                value={axisVal}\n                min={0 - limit} max={limit} step={1} marks={\n                    [{\n                        value: 0 - limit,\n                        label: `-${limit}`,\n                    },\n                    {\n                        value: 0,\n                        label: '0',\n                    },\n                    {\n                        value: limit,\n                        label: `${limit}`,\n                    }]\n                }\n                onChange={(nodeId === 'canvasnode') ? ((e, v) => translateData[`translate_${axis}`][1](v)) : ((e, v) => updateShapes(e, 'vector', id, v))}\n            />\n        )\n        translateSliders.push(slider);\n    });\n\n    return (\n\n        <div className={classes.parameterGroup}>\n            <p className={classes.label}>Translate</p>\n            {translateSliders}\n        </div>\n    )\n}\n\nexport default TranslateSliders;","import React, { useEffect, useRef, useState } from 'react';\nimport { FormControl, IconButton, Input, InputLabel, makeStyles } from '@material-ui/core';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport '../zdogui.css';\n\nconst useStyles = makeStyles((theme) => ({\n    parameter: {\n        display: 'block',\n        margin: 12,\n        fontSize: 'small'\n    },\n    label: {\n        fontSize: 'small',\n        'margin-bottom': 14,\n        /* marginTop: 24, */\n        marginRight: 14\n    },\n    textField: {\n        width: 55,\n        marginBottom: 8\n    },\n    ptBtn: {\n        width: 36,\n        height: 36\n    },\n    pathpointHeader: {\n        display: 'flex',\n        'align-items': 'center',\n        height: 44,\n        marginTop: 10\n    },\n    pathpointContainer: {\n        '&:hover .deletePtBtnContainer': {\n            display: 'inline-flex',\n        }\n    }\n}));\n\nexport default function ShapePathPoint(props) {\n\n    const classes = useStyles();\n\n    let pathindex = props.pathindex;\n    let segmentindex = props.segmentindex;\n    let copyOfShape = props.copyOfShape;\n    let addedShapes = props.addedShapes;\n    let flattened = props.flattened;\n\n    let cursorFocus = props.cursorFocus;\n    let emptyOrNegative = props.emptyOrNegative;\n\n    const ppRefs = {\n        'x' : useRef(),\n        'y' : useRef(),\n        'z' : useRef()\n    }\n\n    let segment = copyOfShape.data.path[pathindex];\n    let label = Object.keys(segment)[0];\n\n    let baseid = `path_${pathindex}_${label}_${segmentindex}`;\n\n    let pp = segmentindex === '-' ? segment[label] : segment[label][segmentindex];\n\n    function ppRefocus() {\n        let pos = cursorFocus[0]['cursorPos'];\n        let focusid = cursorFocus[0]['id'];\n        if (focusid.includes(baseid)) {\n            let axis = focusid[focusid.length - 1];\n            console.log('AXIS = ' + axis);\n            let ppRef = ppRefs[axis];\n            ppRef.current.focus();\n            if (pos !== 0) {\n                ppRef.current.setSelectionRange(pos, pos);\n            }\n        }\n    }\n\n    function checkValueOnBlur(e, axis) {\n        if (e.target.value === '-' || e.target.value.length === 0) {\n            e.target.value = 0;\n            updatePathPoint(e, axis, false);\n        }\n    }\n\n    function copyPath() {\n        let newpatharry = [];\n        newpatharry.push(copyOfShape.data.path);\n        let flatpath = newpatharry.flat();\n        return flatpath;\n    }\n    \n    function updatePathPoint(e, axis, setfocus=true) {\n\n        /* let val = Number(e.target.value); */\n\n        let val;\n\n\n        if (e.target.value.length === 1 && e.target.value === '-') {\n            /* emptyOrNegative.current = ['-', axis]; */\n            emptyOrNegative[1](['-', axis, e.target.id]);\n            val = 0; // not shown to user\n        } else if (e.target.value.length === 0){\n            /* emptyOrNegative.current = ['', axis]; */\n            emptyOrNegative[1](['', axis, e.target.id]);\n            val = 0; // not shown to user\n        } else {\n            val = Number(e.target.value);\n            /* emptyOrNegative.current = [false, false]; */\n            emptyOrNegative[1]([false, false, '']);\n        }\n\n        \n        if (axis === 'x') {\n            pp.set({ x: val, y: pp.y, z: pp.z });\n        } else if (axis === 'y') {\n            pp.set({ x: pp.x, y: val, z: pp.z });\n        } else {\n            pp.set({ x: pp.x, y: pp.y, z: val });\n        }\n\n        if (setfocus) {\n            cursorFocus[1](\n                {\n                    'id': e.target.id,\n                    'cursorPos': e.target.selectionStart\n                }\n            );\n        } else {\n            cursorFocus[1](\n                {\n                    'id': '',\n                    'cursorPos': 0\n                }\n            );\n        }\n\n        \n        //if (emptyOrNegative.current === [false, false]) {\n        if (emptyOrNegative[0] === [false, false, '']) {\n            addedShapes[1](flattened);\n        }\n\n        //addedShapes[1](flattened);\n\n    }\n\n    useEffect(() => {\n        ppRefocus();\n    }, []);\n\n    return (\n\n        <div /* className={classes.pathpointContainer} */>\n\n           {/*  <div className={classes.pathpointHeader}>\n                <p className={classes.label}>{label}</p>\n                { (label === 'start point' ? '' : deletePtBtnContainer) } \n            </div> */}\n            \n            <FormControl className={classes.textField}>\n                <InputLabel htmlFor={baseid + '_x'}>x</InputLabel>\n                <Input inputRef={ppRefs['x']} id={baseid + '_x'}\n                    value={(emptyOrNegative[0][2] === `${baseid}_x` && emptyOrNegative[0][1] === 'x') ? emptyOrNegative[0][0] : pp.x}\n                    onBlur={(e) => checkValueOnBlur(e, 'x')}\n                    disabled={false} onChange={(e) => updatePathPoint(e, 'x')} />\n            </FormControl>\n\n            <FormControl className={classes.textField}>\n                <InputLabel htmlFor={baseid + '_y'}>y</InputLabel>\n                <Input inputRef={ppRefs['y']} id={baseid + '_y'} value={(emptyOrNegative[0][2] === `${baseid}_y` && emptyOrNegative[0][1] === 'y') ? emptyOrNegative[0][0] : pp.y} onBlur={(e) => checkValueOnBlur(e, 'y')} disabled={false} onChange={(e) => updatePathPoint(e, 'y')} />\n            </FormControl>\n\n            <FormControl className={classes.textField}>\n                <InputLabel htmlFor={baseid + '_z'}>z</InputLabel>\n                <Input inputRef={ppRefs['z']} id={baseid + '_z'} value={(emptyOrNegative[0][2] === `${baseid}_z` && emptyOrNegative[0][1] === 'z') ? emptyOrNegative[0][0] : pp.z} onBlur={(e) => checkValueOnBlur(e, 'z')} disabled={false} onChange={(e) => updatePathPoint(e, 'z')} />\n            </FormControl>\n\n        </div>\n\n    )\n\n}","import React, { useEffect, useRef, useState } from 'react';\nimport { FormControl, IconButton, Input, InputLabel, makeStyles } from '@material-ui/core';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport '../zdogui.css';\nimport ShapePathPoint from './ShapePathPoint';\nimport generateID from '../generateID';\n\nconst useStyles = makeStyles((theme) => ({\n    parameter: {\n        display: 'block',\n        margin: 12,\n        fontSize: 'small'\n    },\n    label: {\n        fontSize: 'small',\n        'margin-bottom': 14,\n        /* marginTop: 24, */\n        marginRight: 14\n    },\n    textField: {\n        width: 55,\n    },\n    ptBtn: {\n        width: 36,\n        height: 36\n    },\n    pathSegmentHeader: {\n        display: 'flex',\n        'align-items': 'center',\n        height: 44,\n        marginTop: 10\n    },\n    pathSegmentContainer: {\n        '&:hover .deleteSegmentBtnContainer': {\n            display: 'inline-flex',\n        }\n    }\n}));\n\nexport default function PathSegment(props) {\n\n    const classes = useStyles();\n\n    let pathindex = props.pathindex;\n    let copyOfShape = props.copyOfShape;\n    let addedShapes = props.addedShapes;\n    let flattened = props.flattened;\n\n    let cursorFocus = props.cursorFocus;\n    let emptyOrNegative = props.emptyOrNegative;\n\n    let segment = copyOfShape.data.path[pathindex];\n    let label = Object.keys(segment)[0];\n\n    function copyPath() {\n        let newpatharry = [];\n        newpatharry.push(copyOfShape.data.path);\n        let flatpath = newpatharry.flat();\n        return flatpath;\n    }\n\n    function deletePathSegment() {\n        let flatpath = copyPath();\n        flatpath.splice(pathindex, 1);\n        copyOfShape.data.path = flatpath;\n        addedShapes[1](flattened);\n    }\n\n    let deleteSegmentBtnContainer = (<div className='deleteSegmentBtnContainer'>\n    <IconButton className={classes.ptBtn} onClick={deletePathSegment} aria-label=\"delete path segment\">\n                <DeleteOutlinedIcon fontSize=\"small\" />\n            </IconButton>\n    </div>)\n\n    \n    let cap = label.charAt(0).toUpperCase();\n    let sliced = label.slice(1);\n    let labelUI = cap + sliced;\n\n    if (pathindex === 0) {\n        labelUI = 'Line (start point)';\n    }\n\n    let sppArry = [];\n    if (label === 'line' || label === 'move') {\n        let spp = <ShapePathPoint pathindex={pathindex} segmentindex='-' copyOfShape={copyOfShape} addedShapes={addedShapes} flattened={flattened} cursorFocus={cursorFocus} emptyOrNegative={emptyOrNegative} />\n        sppArry.push(spp);\n    } else {\n        segment[label].forEach((pt, i) => {\n            let spp = <ShapePathPoint key={generateID()} pathindex={pathindex} segmentindex={i} copyOfShape={copyOfShape} addedShapes={addedShapes} flattened={flattened} cursorFocus={cursorFocus} emptyOrNegative={emptyOrNegative} />\n            sppArry.push(spp);\n        })\n    }\n\n    return (\n        <div className={classes.pathSegmentContainer}>\n\n            <div className={classes.pathSegmentHeader}>\n                <p className={classes.label}>{labelUI}</p>\n                { (pathindex === 0 ? '' : deleteSegmentBtnContainer) } \n            </div>\n            \n            {sppArry}\n\n        </div>\n    )\n\n}","import React, { useState } from 'react';\nimport { IconButton, makeStyles, Menu, MenuItem } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport '../zdogui.css';\nimport PathSegment from './PathSegment';\n\nimport Zdog from 'zdog';\nimport generateID from '../generateID';\n\nconst useStyles = makeStyles((theme) => ({\n    parameterSection: {\n        display: 'block',\n        marginLeft: 12,\n        marginTop: 24,\n        marginBottom: 42,\n        fontSize: 'small'\n    },\n    label: {\n        fontSize: 'small',\n        'margin-bottom': 14,\n        marginTop: 24\n    },\n    smallFont: {\n        fontSize: '0.8rem'\n    }\n}));\n\nexport default function Path(props) {\n\n    const classes = useStyles();\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    let emptyOrNegative = useState([false, false]); // [value, axis]\n\n    let checkCursorFocus = props.checkCursorFocus;\n    let cursorFocus = props.cursorFocus;\n    let copyOfShape = props.copyOfShape;\n    let addedShapes = props.addedShapes;\n    let flattened = props.flattened;\n\n    function handleAddToPathClick(e) {\n        console.log('add to path');\n        setAnchorEl(e.currentTarget);\n        checkCursorFocus();\n    }\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    function copyPath() {\n        let newpatharry = [];\n        newpatharry.push(copyOfShape.data.path);\n        let flatpath = newpatharry.flat();\n        return flatpath;\n    }\n\n    function addToPath(v) {\n        \n        handleClose();\n\n        // copy current path array\n        let flatpath = copyPath();\n\n        if (v === 'line') {\n            let pt = new Zdog.Vector({});\n            flatpath.push({line: pt});\n        } else if (v === 'move') {\n            let pt = new Zdog.Vector({});\n            flatpath.push({move: pt});\n        } else if (v === 'arc') {\n            let pts = [ new Zdog.Vector({}), new Zdog.Vector({}) ];\n            flatpath.push({arc: pts});\n        } else if (v === 'bezier') {\n            let pts = [ new Zdog.Vector({}), new Zdog.Vector({}), new Zdog.Vector({}) ];\n            flatpath.push({bezier: pts});\n        }\n\n        copyOfShape.data.path = flatpath;\n        addedShapes[1](flattened);\n\n        console.log(v);\n    }\n\n    function createPathSegments() {\n        let segments = [];\n        copyOfShape.data.path.forEach((item, i) => {\n            let segment = (<PathSegment key={generateID()} pathindex={i} copyOfShape={copyOfShape} addedShapes={addedShapes} flattened={flattened} cursorFocus={cursorFocus} emptyOrNegative={emptyOrNegative} />);\n            segments.push(segment);\n        })\n        return segments;\n    }\n\n    \n    /* function createPathPointFields(patharry) {\n        let pathpointFields = [];\n        patharry.forEach((item, i) => {\n            if (i !== 0 && Object.keys(item).includes('line')) {\n                console.log('includes is true');\n                let sPP = (<ShapePathPoint emptyOrNegative={emptyOrNegative} checkCursorFocus={props.checkCursorFocus} key={generateID()} pathindex={i} pathSegment='line' segmentIndex= '-' label=\"point\" cursorFocus={cursorFocus} copyOfShape={copyOfShape} addedShapes={addedShapes} flattened={flattened} />);\n                pathpointFields.push(sPP);\n            } else {\n                console.log('includes is false');\n            }\n        })\n        return pathpointFields;\n    } */\n\n    //let ppFields = createPathPointFields(copyOfShape.data.path);\n\n    return (\n        <div className={classes.parameterSection}>\n            <p className={classes.label}><b>Path</b></p>\n            {/* <div id=\"pathpoints\">\n                <ShapePathPoint emptyOrNegative={emptyOrNegative} checkCursorFocus={props.checkCursorFocus} pathindex={0} pathSegment='line' segmentIndex= '-' label='start point' cursorFocus={cursorFocus} copyOfShape={copyOfShape} addedShapes={addedShapes} flattened={flattened} />\n                {copyOfShape.data.path.length > 1 ? createPathPointFields(copyOfShape.data.path) : ''}\n            </div> */}\n            {createPathSegments()}\n            <IconButton id='addToPathBtn' onClick={handleAddToPathClick}>\n                <AddIcon fontSize=\"small\" />\n            </IconButton>\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                <MenuItem className={classes.smallFont} onClick={() => addToPath('line')} value=\"line\">Line</MenuItem>\n                <MenuItem className={classes.smallFont} onClick={() => addToPath('move')} value=\"move\">Move</MenuItem>\n                <MenuItem className={classes.smallFont} onClick={() => addToPath('arc')} value=\"arc\">Arc</MenuItem>\n                <MenuItem className={classes.smallFont} onClick={() => addToPath('bezier')} value=\"bezier\">Bezier</MenuItem>\n            </Menu>\n        </div >\n    )\n}","import React, { useRef, useEffect, useState } from 'react';\nimport '../zdogui.css';\nimport { FormControl, FormControlLabel, Input, InputLabel, Checkbox, makeStyles, Typography, Slider } from '@material-ui/core';\n\nimport Zdog from 'zdog';\nimport Face from './Face';\nimport SingleParameterInput from './SingleParameterInput';\nimport ParameterSlider from './ParameterSlider';\nimport fixCamelCase from '../fixCamelCase';\nimport CanvasLayer from './CanvasLayer';\nimport RotateSliders from './RotateSliders';\nimport TranslateSliders from './TranslateSliders';\nimport Path from './Path';\n\n/* const tau = Zdog.TAU; */\n\nconst useStyles = makeStyles((theme) => ({\n    checkbox: {\n        'padding-bottom': 12\n    },\n    parameter: {\n        display: 'block',\n        margin: 12,\n        fontSize: 'small'\n    },\n    parameterInline: {\n        display: 'inline-block',\n        margin: 12\n    },\n    parameterGroup: {\n        display: 'block',\n        margin: 12,\n        marginTop: 24,\n        fontSize: 'small'\n    },\n    parameterCheckbox: {\n        display: 'block',\n        'margin-left': 12,\n        'margin-top': 3,\n        'margin-bottom': 3\n    },\n    subparameter: {\n        'margin-left': 32,\n        'margin-top': 3,\n        'margin-bottom': 3\n    },\n    nested: {\n        paddingLeft: theme.spacing(4),\n    },\n    '.MuiTypography-body1': {\n        fontSize: '0.5rem'\n    },\n    label: {\n        fontSize: 'small',\n        'margin-bottom': 14,\n        marginTop: 24\n    },\n    labelsm: {\n        fontSize: 'small',\n        display: 'inline-block',\n        width: 84\n    },\n    textField: {\n        width: 55,\n    },\n    delete: {\n        margin: 16,\n        color: 'red'\n    },\n    myprimary: {\n        color: \"black\"\n    },\n    confirmDialog: {\n        padding: 40\n    },\n    li: {\n        paddingTop: 4,\n        paddingBottom: 4\n    },\n    slider: {\n        marginBottom: 36,\n        marginLeft: 2,\n        display: 'block',\n        fontSize: 'small'\n    },\n    checkbox: {\n        'padding-bottom': 10\n    },\n    inlineCheckbox: {\n        display: 'inline-block',\n        marginTop: 2,\n        width: 70\n    },\n    checkboxFace: {\n        'padding-bottom': 12,\n        display: 'inline-block',\n        marginTop: 4\n    },\n    disabledlabel: {\n        fontSize: 'small',\n        color: 'darkgray'\n    }\n}));\n\nfunction ShapeLayer(props) {\n\n    let cursorFocus = props.cursorFocus;\n\n    console.log('cursorFocus = ', cursorFocus);\n\n    const index = 0;\n    const selectedNodeId = props.selectedNodeId;\n\n    //const shape = props.shape;\n    const [shapes, setShapes] = props.addedShapes;\n\n    const [confirmDialogOpen, setConfirmDialogOpen] = useState(false);\n\n    const basicRefs = {\n        \"stroke\": useRef(),\n        \"fill\": useRef(),\n        \"color\": useRef(),\n        \"backface\": useRef(),\n        \"translate_x\": useRef(),\n        \"translate_y\": useRef(),\n        \"translate_z\": useRef(),\n    }\n\n    const shapeRefs = {\n        \"width\": useRef(),\n        \"height\": useRef(),\n        \"depth\": useRef(),\n        \"diameter\": useRef(),\n        \"length\": useRef(),\n        \"cornerRadius\": useRef(),\n        \"radius\": useRef(),\n        \"sides\": useRef(),\n        \"frontFace\": useRef(),\n        \"rearFace\": useRef(),\n        \"topFace\": useRef(),\n        \"bottomFace\": useRef(),\n        \"leftFace\": useRef(),\n        \"rightFace\": useRef(),\n        \"quarters\": useRef(),\n        \"path\": useRef()\n    }\n\n    const classes = useStyles();\n\n    function copyShapes() {\n        let newshapearry = [];\n        newshapearry.push(shapes);\n        let flattened = newshapearry.flat();\n        return flattened;\n    }\n\n    let flattened = copyShapes();\n\n    function locateShapeInAddedShapesTree(flattened) {\n\n        let posStrings = selectedNodeId[0].split('_');\n        let posNums = posStrings.map((s) => Number(s));\n\n        let currentShape;\n\n        posNums.forEach((posNum, i) => {\n            if ((0 < i) && (i <= (posNums.length - 1))) {\n                currentShape = currentShape.children[posNum];\n            } else if (i === 0) {\n                currentShape = flattened[posNum];\n            }\n        })\n\n        return currentShape;\n    }\n\n    const copyOfShape = (selectedNodeId[0] !== 'canvasnode') ? locateShapeInAddedShapesTree(flattened) : '';\n\n\n    const handleClick = () => {\n        let flattened = copyShapes();\n        flattened[index].open = !flattened[index].open;\n        setShapes(flattened);\n    };\n\n    function handleDelete() {\n        setConfirmDialogOpen(true);\n    }\n\n    function handleConfirm() {\n        let flattened = copyShapes();\n        flattened.splice(index, 1);\n        setShapes(flattened);\n        handleClose();\n    }\n\n    function handleClose() {\n        setConfirmDialogOpen(false);\n    }\n\n    let shapeParameters = [];\n\n    let emptyOrNegative = useRef([false, false]); // [value, axis]\n\n    function updateShapes(e, controlType, id = '', v = '') {\n\n        let splitElID = id.split('_');\n        let property = splitElID[0];\n        let axis = splitElID[1];\n\n        // vector vs non-vector\n        if (controlType === 'vector') {\n\n            let val;\n\n            if (property === 'translate') {\n                if (e.target.value.length === 1 && e.target.value === '-') {\n                    emptyOrNegative.current = ['-', axis];\n                    val = 0; // not shown to user\n                } else if (e.target.value.length === 0){\n                    emptyOrNegative.current = ['', axis];\n                    val = 0; // not shown to user\n                } else {\n                    val = Number(e.target.value);\n                    emptyOrNegative.current = [false, false];\n                }\n                \n            } else if (property === 'rotate') {\n                val = Number(v);\n            }\n\n            let shapeProp = copyOfShape.data[property];\n\n            if (axis === 'x') {\n                shapeProp.set({ x: val, y: shapeProp.y, z: shapeProp.z });\n            } else if (axis === 'y') {\n                shapeProp.set({ x: shapeProp.x, y: val, z: shapeProp.z });\n            } else {\n                shapeProp.set({ x: shapeProp.x, y: shapeProp.y, z: val });\n            }\n\n            cursorFocus[1](\n                {\n                    'id': id,\n                    'cursorPos': e.target.selectionStart\n                }\n            );\n\n        } else if (controlType === 'checkbox_face') {\n\n            if (e.target.checked) {\n                copyOfShape.data[property] = copyOfShape.faces[property];\n                copyOfShape.faces[property] = true;\n            } else {\n                copyOfShape.faces[property] = copyOfShape.data[property];\n                copyOfShape.data[property] = false;\n            }\n\n            cursorFocus[1]({\n                'id': '',\n                'cursorPos': 0\n            });\n\n        } else {\n\n            if (controlType === 'slider') {\n\n                copyOfShape.data[property] = v;\n\n                cursorFocus[1]({\n                    'id': '',\n                    'cursorPos': 0\n                });\n\n            } else {\n\n                if (controlType === 'checkbox') {\n\n                    copyOfShape.data[property] = !copyOfShape.data[property];\n                    cursorFocus[1]({\n                        'id': '',\n                        'cursorPos': 0\n                    });\n                } else if (controlType === 'textinput') {\n\n                    copyOfShape.data[property] = e.target.value;\n                    cursorFocus[1](\n                        {\n                            'id': e.target.id,\n                            'cursorPos': e.target.selectionStart\n                        }\n                    );\n                } else if (controlType === 'color') {\n\n                    copyOfShape.data[property] = e.target.value;\n                    cursorFocus[1]({\n                        'id': '',\n                        'cursorPos': 0\n                    });\n                }\n\n            }\n\n        }\n\n        if (emptyOrNegative.current === [false, false]) {\n            setShapes(flattened);\n        }\n\n\n    }\n\n    function createColorControls() {\n        let cylinderFrontFace = (\n            <FormControl className={classes.parameter}>\n                <label htmlFor={'frontFace_' + index} className={classes.labelsm}>Front Face</label>\n                <input type=\"color\" id={'frontFace_' + index} value={copyOfShape.data.frontFace} onChange={(e) => updateShapes(e, 'color', `frontFace_${index}`, '')} inputref={shapeRefs['frontFace']}></input>\n            </FormControl>\n        )\n    \n        let colorControls = (\n            <React.Fragment>\n                <FormControl className={classes.parameter}>\n                    <label htmlFor={'color_' + index} className={classes.labelsm}>Color</label>\n                    <input type=\"color\" id={'color_' + index} value={copyOfShape.data.color} onChange={(e) => updateShapes(e, 'color', `color_${index}`, '')} inputref={basicRefs['color']}></input>\n                </FormControl>\n                <FormControl className={classes.parameter}>\n                    <label htmlFor={'backface_' + index} className={classes.labelsm}>Back Face</label>\n                    <input type=\"color\" id={'backface_' + index} value={copyOfShape.data.backface} onChange={(e) => updateShapes(e, 'color', `backface_${index}`, '')} inputref={basicRefs['backface']}></input>\n                </FormControl>\n                {(copyOfShape.shapeClass === 'Cylinder') ? cylinderFrontFace : ''}\n            </React.Fragment>\n        );\n\n        return colorControls;\n    }\n\n\n    let colorControls = '';\n\n    let shapeSpecificControls = [];\n    let faceControls = [];\n    let faceContainer = (\n        <div className={classes.parameterGroup}>\n            <p className={classes.label}>Faces</p>\n            {faceControls}\n        </div>\n    );\n\n    if (selectedNodeId[0] !== 'canvasnode') {\n        createControls();\n        colorControls = createColorControls();\n    }\n\n    function createControls() {\n\n        Object.keys(shapeRefs).forEach((property) => {\n            if (copyOfShape.data[property] !== undefined) {\n                if (property.includes('Face') && (copyOfShape.shapeClass === 'Box')) {\n                    let side = property.split('F')[0];\n                    let faceComp = <Face side={side} copyOfShape={copyOfShape} updateShapes={updateShapes} cursorFocus={cursorFocus} refocus={refocus} shapeRefs={shapeRefs} />\n                    faceControls.push(faceComp);\n                } else if (property === 'quarters' || property === 'sides') {\n                    let min = (property === 'quarters') ? 1 : 3;\n                    let max = (property === 'quarters') ? 4 : 12;\n                    let id = `${property}_${index}`;\n                    let slider = (\n                        <ParameterSlider\n                            id={id}\n                            label={fixCamelCase(property)}\n                            value={copyOfShape.data[property]}\n                            min={min} max={max} step={1} marks={['']}\n                            onChange={(e, v) => updateShapes(e, 'slider', id, v)}\n                        />\n                    )\n                    shapeSpecificControls.push(slider);\n                } else if (property === 'path') {\n                    let path = <Path checkCursorFocus={props.checkCursorFocus} cursorFocus={cursorFocus} copyOfShape={copyOfShape} addedShapes={props.addedShapes} flattened={flattened}/>\n                    shapeSpecificControls.push(path);\n                } else if (property !== 'frontFace') {\n                    let spi = <SingleParameterInput parameter={property} copyOfShape={copyOfShape} updateShapes={updateShapes} paramRef={shapeRefs[property]} />\n                    shapeSpecificControls.push(spi);\n                }\n            }\n        })\n\n        if (faceControls.length !== 0) {\n            shapeSpecificControls.push(faceContainer);\n        }\n\n    }\n\n    function refocus(cursorFocus, shapeRefs) {\n        if (cursorFocus[0]['id'] !== '' && !cursorFocus[0]['id'].includes('path')) {\n\n            let splitID = cursorFocus[0]['id'].split('_');\n            console.log(splitID);\n\n            let property;\n\n            if (splitID.length === 3) {\n                console.log('equal to 3');\n                property = `${splitID[0]}_${splitID[1]}`;\n            } else {\n                property = `${splitID[0]}`;\n            }\n\n            let pos = cursorFocus[0]['cursorPos'];\n\n\n            let paramRef = (shapeRefs[property] !== undefined) ? shapeRefs[property] : basicRefs[property];\n\n            if (paramRef !== undefined) {\n                if (paramRef.current !== undefined && paramRef.current !== null) {\n                    paramRef.current.focus();\n                    if (pos !== 0) {\n                        paramRef.current.setSelectionRange(pos, pos);\n                    }\n                }\n            }\n        }\n    }\n\n    function checkValueOnBlur(e, type, id, v) {\n        if (e.target.value === '-' || e.target.value.length === 0) {\n            let validVal = 0;\n            e.target.value = validVal;\n            updateShapes(e, type, id, v);\n        }\n    }\n\n\n    function renderLayerControls() {\n        if (selectedNodeId[0] === 'canvasnode') {\n            return (\n                <CanvasLayer checkCursorFocus={props.checkCursorFocus} cursorFocus={cursorFocus} stateVars={props.stateVars} updateShapes={updateShapes}></CanvasLayer>\n            )\n        } else {\n            return (\n\n                <div>\n\n                    {(copyOfShape.shapeClass !== 'Box' && copyOfShape.shapeClass !== 'Group') ? colorControls : ''}\n\n                    {(copyOfShape.shapeClass !== 'Group') ? (\n\n                        <React.Fragment>\n\n                        <FormControl className={classes.parameterCheckbox}>\n                        <FormControlLabel\n                            label=\"Fill\"\n                            control={<Checkbox inputRef={basicRefs['fill']} checked={copyOfShape.data.fill} onChange={(e) => updateShapes(e, 'checkbox', `fill_${index}`, '')} size=\"small\" /* name={'fill_' + index} */ id={'fill_' + index} color=\"primary\" className={classes.checkbox} />}\n                        />\n                        </FormControl>\n                        \n                        <FormControl className={classes.parameter}>\n                        <InputLabel htmlFor={'stroke_' + index}>Stroke</InputLabel>\n                        <Input inputRef={basicRefs['stroke']} id={'stroke_' + index} value={copyOfShape.data.stroke} disabled={false} onChange={(e) => { updateShapes(e, 'textinput', `stroke_${index}`, ''); console.log(e.target.selectionStart) }} />\n                    </FormControl>\n\n                    </React.Fragment>\n\n                    ) : ''}\n                    \n\n                    <div className={classes.parameter}>\n\n                        <p className={classes.label}>Translate</p>\n\n                        <FormControl className={classes.textField}>\n                            <InputLabel htmlFor={'translate_x_' + index}>x</InputLabel>\n                            <Input inputRef={basicRefs['translate_x']} id={'translate_x_' + index} \n                            value={emptyOrNegative.current[1] === 'x' ? emptyOrNegative.current[0] : copyOfShape.data.translate.x} \n                            onBlur={(e) => checkValueOnBlur(e, 'vector', `translate_x_${index}`, '')}\n                            disabled={false} onChange={(e) => updateShapes(e, 'vector', `translate_x_${index}`, '')} />\n                        </FormControl>\n\n                        <FormControl className={classes.textField}>\n                            <InputLabel htmlFor={'translate_y_' + index}>y</InputLabel>\n                            <Input inputRef={basicRefs['translate_y']} id={'translate_y_' + index} value={emptyOrNegative.current[1] === 'y' ? emptyOrNegative.current[0] : copyOfShape.data.translate.y} onBlur={(e) => checkValueOnBlur(e, 'vector', `translate_y_${index}`, '')} disabled={false} onChange={(e) => updateShapes(e, 'vector', `translate_y_${index}`, '')} />\n                        </FormControl>\n\n                        <FormControl className={classes.textField}>\n                            <InputLabel htmlFor={'translate_z_' + index}>z</InputLabel>\n                            <Input inputRef={basicRefs['translate_z']} id={'translate_z_' + index} value={emptyOrNegative.current[1] === 'z' ? emptyOrNegative.current[0] : copyOfShape.data.translate.z} onBlur={(e) => checkValueOnBlur(e, 'vector', `translate_z_${index}`, '')} disabled={false} onChange={(e) => updateShapes(e, 'vector', `translate_z_${index}`, '')} />\n                        </FormControl>\n\n                    </div>\n\n                    <RotateSliders nodeId={selectedNodeId[0]} rotateData={copyOfShape.data.rotate} updateShapes={updateShapes} />\n\n                    {shapeSpecificControls}\n\n                </div>\n\n\n            )\n        }\n    }\n\n\n    useEffect(() => {\n        refocus(cursorFocus, shapeRefs);\n    }, []);\n\n    return (\n        <React.Fragment>\n            {renderLayerControls()}\n        </React.Fragment>\n    )\n}\n\nexport default ShapeLayer;\n\n/* TO FIX:\n       x all open after each update to shapes - needs to remember which were open and closed\n       .. no input refocus\n           x shapelayer input still in focus while interacting with canvas inputs (eg. after typing once in the canvas width field, it jumps back to whatever shapelayer input you last updated)\n           x refocus to string index or character where cursor was last\n           x negative numbers and zeros\n           x color picker issue: can no longer drag to update\n\n       x rm Material UI List click animation\n       .. input styles\n\n       - safari: webpage reload on color picker (??)\n   */\n\n/* TO ADD:\n    .. other shape properties\n    .. additional specific shape properties\n\n    features\n    x remove a layer\n    - edit layer name\n    - undo last change?\n\n    minor\n    .. replace stars with icons that match shapeclass?\n*/","import React, { useState, useEffect, useRef } from 'react';\nimport Shape from './Shape';\nimport { Button, FormControl, Input, IconButton, makeStyles } from '@material-ui/core';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport List from '@material-ui/core/List';\nimport AddIcon from '@material-ui/icons/Add';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport generateID from '../generateID';\n// import Ellipse from './Ellipse';\nimport ShapeLayer from './ShapeLayer';\n\n\nconst useStyles = makeStyles((theme) => ({\n    slider: {\n        width: 200\n    },\n    checkbox: {\n        'padding-bottom': 12\n    },\n    parameter: {\n        display: 'block',\n        margin: 16\n    },\n    subparameter: {\n        'margin-left': 32,\n        'margin-top': 3,\n        'margin-bottom': 3\n    },\n    root: {\n        backgroundColor: \"#f1f1f1\"\n    }\n}));\n\nfunction ShapeControls(props) {\n\n    /* let inputRef1 = useRef();\n    let inputRef2 = useRef();\n\n    let inputNum = useRef(0); */\n\n    /* const shapeLayers = {\n        'Ellipse': (<Ellipse />)\n    } */\n\n    //const [selectShapeValue, setSelectShapeValue] = useState('Ellipse');\n\n    const addedShapes = props.addedShapes;\n    const [shapes, setShapes] = [addedShapes[0], addedShapes[1]];\n\n    const classes = useStyles();\n\n    /* function copyShapes() {\n        let newshapearry = [];\n        newshapearry.push(shapes);\n        let flattened = newshapearry.flat();\n        return flattened;\n    } */\n\n    /* function handle_onChange(shape, index) {\n        let flattened = copyShapes();\n        flattened[index] = shape;\n        setShapes(flattened);\n    } */\n\n    /*\n    function handle_onAdd(e) {\n        //if (selectShapeValue === 'Ellipse') {\n            let newshape = {\n                //shapeid: 0,\n                shapeClass: selectShapeValue,\n                //params: shapeparams[selectShapeValue]\n                params: []\n            }\n            let flattened = copyShapes();\n            flattened.push(newshape);\n            setShapes(flattened);\n        //}\n    }\n    */\n\n    /*   function handleTest(e) {\n        \n          let [parameter, shapeindex] = e.target.id.split('_');\n  \n          if (parameter === 'diameter') {\n              inputNum.current = 1;\n          } else {\n              inputNum.current = 2;\n          }\n  \n          console.log(e.target);\n  \n          let flattened = copyShapes();\n          flattened[shapeindex].data[parameter] = e.target.value;\n  \n          setShapes(flattened);\n      } */\n\n\n    /* function refocus(ref) {\n        ref.current.focus();\n    }\n */\n\n    let shapeLayers = [];\n    if (shapes.length > 0) {\n        shapeLayers = shapes.map((shape, i) => {\n\n            return (\n                \n                <ShapeLayer cursorFocus={props.cursorFocus} key={generateID()} index={i} shape={shape} addedShapes={addedShapes} />\n\n\n                /*  <ShapeLayer key={generateID()} index={i} shape={shape} addedShapes={addedShapes}></ShapeLayer> */\n\n            )\n            /*\n            if (shape.shapeClass === 'Ellipse') {\n                return (\n                    <Ellipse key={generateID()} index={i} shape={shape} stateShapes={stateShapes} onChange={handle_onChange}></Ellipse>\n                )\n            }*/\n            /*\n            return (\n                <Shape key={generateID()} id={shape.shapeid} appstate={this.props.appstate} onChange={this.handle_onChange}></Shape>\n            )\n            */\n        })\n    }\n\n    /* function handle_onAdd() {\n        props.addNewZdogShape(selectShapeValue);\n    } */\n\n    /* useEffect(() => {\n\n        if (shapes.length > 0) {\n            //console.log(inputRef);\n            //refocus(uiEls[refIndex[0]]);\n            if (inputNum.current === 1) {\n                refocus(inputRef1);\n                //inputRefs[1].current.focus();\n            } else if (inputNum.current === 2) {\n                refocus(inputRef2);\n                //inputRefs[2].current.focus();\n            }\n        }\n\n\n    }, [shapes]); */\n\n    return (\n        <section className=\"controls_shape\">\n\n            {/* <header>\n                <FormControl>\n                    <InputLabel id=\"new-shape-label\">\n                        Shape\n                        </InputLabel>\n                    <Select value={selectShapeValue} onChange={(e) => setSelectShapeValue(e.target.value)}>\n                        <MenuItem value=\"Ellipse\">Ellipse</MenuItem>\n                        <MenuItem value=\"Rect\">Rect</MenuItem>\n                    </Select>\n                </FormControl>\n                \n                <div className=\"btnContainer\">\n                    <IconButton onClick={handle_onAdd} aria-label=\"add\">\n                        <AddIcon color=\"primary\" fontSize=\"small\" />\n                    </IconButton>\n                </div>\n            </header> */}\n\n            <div className=\"controlsContainer\">\n                <List component=\"div\" aria-labelledby=\"nested-list-subheader\"\n                    /* subheader={\n                        <ListSubheader component=\"div\" id=\"nested-list-subheader\">\n                            Shapes\n                        </ListSubheader>\n                    }  */className={classes.root}>\n                    {shapeLayers}\n                </List>\n\n            </div>\n\n        </section>\n    );\n\n\n}\n\nexport default ShapeControls;\n\n/*\n\n<Button onClick={handle_onAdd} color=\"primary\" startIcon={<AddIcon />} aria-label=\"add shape\">Add</Button>\n\n\n<select name=\"selectShape\" id=\"selectShape\" onChange={this.handle_selectShape}>\n                        <option value=\"\">New shape</option>\n                        <option value=\"Ellipse\">Ellipse</option>\n                    </select>\n                    */\n//<button id=\"addShapeBtn\" onClick={this.handle_onAdd}>Add</button>\n//<Button color=\"primary\" onClick={this.handle_onAdd} startIcon={<AddIcon />}>Add Shape</Button>\n\n/*\n<MenuItem value=\"Rectangle\">Rectangle</MenuItem>\n                        <MenuItem value=\"Triangle\">Triangle</MenuItem>\n                        */\n\n\n/* (el) => inputRefs[1].current = el */","import React, { useEffect, useState } from 'react';\nimport '../zdogui.css';\nimport { Button, ButtonGroup, Collapse, createMuiTheme, FormControl, FormControlLabel, IconButton, Input, InputLabel, List, ListItem, ListItemText, ListSubheader, makeStyles, MenuItem, Select } from '@material-ui/core';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Slider from '@material-ui/core/Slider';\nimport Typography from '@material-ui/core/Typography';\nimport ShapeControls from './ShapeControls';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport AddIcon from '@material-ui/icons/Add';\nimport CanvasLayer from './CanvasLayer';\nimport ShapeLayer from './ShapeLayer';\n\n/* const themeBody2 = createMuiTheme({\n    props: {\n      MuiTypography: {\n        variantMapping: {\n          body2: 'span'\n        },\n      },\n    },\n  }); */\n\n\nconst useStyles = makeStyles((theme) => ({\n    slider: {\n        width: 155\n    },\n    checkbox: {\n        'padding-bottom': 10\n    },\n    parameter: {\n        display: 'block',\n        margin: 12\n    },\n    parameterCheckbox: {\n        display: 'block',\n        'margin-left': 12,\n        'margin-top': 3,\n        'margin-bottom': 3\n    },\n    subparameter: {\n        'margin-left': 38,\n        'margin-top': 3,\n        'margin-bottom': 3\n    },\n    myprimary: {\n        color: \"black\"\n    },\n    root: {\n        /* backgroundColor: \"#f1f1f1\", */\n        backgroundColor: \"#f9f9f9\",\n        fontSize: '0.9rem'\n    },\n    addshape: {\n        width: 140,\n        height: 32\n    },\n    add: {\n        backgroundColor: 'dodgerblue',\n        color: 'white'\n    },\n    li: {\n        paddingTop: 4,\n        paddingBottom: 4\n    },\n    nested: {\n        paddingTop: 4,\n        paddingBottom: 4\n    },\n    body2: {\n        fontSize: '0.9rem'\n    }\n}));\n\nfunction Controls(props) {\n\n    const stateVars = props.stateVars;\n\n    //const [shapes, setShapes] = [stateVars.shapes[0], stateVars.shapes[1]];\n\n    const [canvasLayerOpen, setCanvasLayerOpen] = useState(true);\n\n    const [selectShapeValue, setSelectShapeValue] = useState('Ellipse');\n\n    let cursorFocus = props.cursorFocus;\n\n    const classes = useStyles();\n\n    function handle_onAdd() {\n        props.addNewZdogShape(selectShapeValue);\n        checkCursorFocus();\n    }\n\n    function checkCursorFocus() {\n        console.log('inside cursor check');\n        if (cursorFocus[0]['id'] !== '') {\n            cursorFocus[1]({\n                'id': '',\n                'cursorPos': 0\n              });\n            console.log('cursorFocus reset');\n        }\n    }\n\n    /* function renderLayerControls() {\n\n        if (props.selectedNodeId[0] === 'canvasnode') {\n            return (\n                <CanvasLayer checkCursorFocus={checkCursorFocus} cursorFocus={cursorFocus} stateVars={stateVars}></CanvasLayer>\n            )\n        } else {\n            return (\n                <ShapeLayer selectedNodeId={props.selectedNodeId} addedShapes={props.addedShapes} checkCursorFocus={checkCursorFocus} cursorFocus={cursorFocus} stateVars={stateVars}></ShapeLayer>\n            )\n        }\n    } */\n\n\n    useEffect(() => {\n        checkCursorFocus();\n    }, [props.selectedNodeId[0]]);\n\n\n    return (\n\n        <section className=\"controls\">\n\n            {/* <div className=\"controlsContainer\" id=\"addShapeHeader\">\n            <header>\n                <ButtonGroup>\n                <Select color=\"primary\" className={classes.addshape} value={selectShapeValue} onChange={(e) => {setSelectShapeValue(e.target.value); checkCursorFocus()}}>\n                        <MenuItem value=\"Ellipse\">Ellipse</MenuItem>\n                        <MenuItem value=\"Rect\">Rect</MenuItem>\n                    </Select>\n                    <Button id=\"add\" className={classes.add} onClick={handle_onAdd} aria-label=\"add\">\n                        <AddIcon fontSize=\"small\" />\n                    </Button>\n                </ButtonGroup>\n                \n            </header>\n            </div> */}\n\n            <section className=\"controls_illo\">\n                <div className=\"controlsContainer\">\n\n                    {/* <List component=\"div\" aria-labelledby=\"nested-list-subheader-canvas\" className={classes.root}>\n                        <ListItem className={classes.li}>\n                            <ListItemText primary=\"Canvas\" />\n                            {canvasLayerOpen ?\n                                <IconButton onClick={() => setCanvasLayerOpen(!canvasLayerOpen)} className={classes.myprimary} aria-label=\"Expand less\"><ExpandLess /></IconButton>\n                                :\n                                <IconButton onClick={() => setCanvasLayerOpen(!canvasLayerOpen)} className={classes.myprimary} aria-label=\"Expand more\"><ExpandMore /></IconButton>\n                            }\n                        </ListItem>\n\n                        <Collapse in={canvasLayerOpen} timeout=\"auto\" unmountOnExit>\n                            <List component=\"div\" disablePadding>\n\n                                <ListItem className={classes.nested}> */}\n                                \n                    {/* {renderLayerControls()} */}\n                    <ShapeLayer selectedNodeId={props.selectedNodeId} addedShapes={props.addedShapes} checkCursorFocus={checkCursorFocus} cursorFocus={cursorFocus} stateVars={stateVars}></ShapeLayer>\n\n                            {/*     </ListItem>\n\n                            </List>\n                        </Collapse>\n\n\n\n                    </List> */}\n\n                </div>\n\n            </section>\n                \n        </section>\n\n    )\n\n}\n\n/*\n{(props.addedShapes[0].length > 0) ? <ShapeControls cursorFocus={cursorFocus} addNewZdogShape={props.addNewZdogShape} addedShapes={props.addedShapes}></ShapeControls> : ''}\n*/\n\nexport default Controls;","import React, { useEffect, useState, useRef } from 'react';\nimport '../zdogui.css';\n\nimport Zdog from 'zdog';\n\nlet illo = '';\n\nfunction Viewer(props) {\n\n    const stateVars = props.stateVars;\n    const shapes = props.shapes;\n    \n    /* const refDragRotate = useRef(stateVars.dragRotate[0]);\n    refDragRotate.current = stateVars.dragRotate[0]; */\n\n    /* const refAnimate = useRef(stateVars.animate[0]);\n    refAnimate.current = stateVars.animate[0]; */\n\n    const refRotate_x = useRef(stateVars.rotate_x[0]);\n    refRotate_x.current = stateVars.rotate_x[0];\n\n    const refRotate_y = useRef(stateVars.rotate_y[0]);\n    refRotate_y.current = stateVars.rotate_y[0];\n\n    const refRotate_z = useRef(stateVars.rotate_z[0]);\n    refRotate_z.current = stateVars.rotate_z[0];\n\n    const isRotating = useState(false);\n\n    const refSpin_x = useRef(stateVars.spin_x[0]);\n    refSpin_x.current = stateVars.spin_x[0];\n\n    const refSpin_y = useRef(stateVars.spin_y[0]);\n    refSpin_y.current = stateVars.spin_y[0];\n\n    const refSpin_z = useRef(stateVars.spin_z[0]);\n    refSpin_z.current = stateVars.spin_z[0];\n\n    const refAnimateSelection = useRef(stateVars.animateSelection[0]);\n    refAnimateSelection.current = stateVars.animateSelection[0];\n\n    const refEaseIOx = useRef(stateVars.easeIO[0].x);\n    refEaseIOx.current = stateVars.easeIO[0].x;\n\n    const refEaseIOy = useRef(stateVars.easeIO[0].y);\n    refEaseIOy.current = stateVars.easeIO[0].y;\n\n    const refEaseIOz = useRef(stateVars.easeIO[0].z);\n    refEaseIOz.current = stateVars.easeIO[0].z;\n\n    const refEaseIOcycleCount = useRef(stateVars.easeIO[0].cycleCount);\n    refEaseIOcycleCount.current = stateVars.easeIO[0].cycleCount;\n\n    const refEaseIOpower = useRef(stateVars.easeIO[0].power);\n    refEaseIOpower.current = stateVars.easeIO[0].power;\n\n    const refAnimationOption = useRef(stateVars.animationOption[0]);\n    refAnimationOption.current = stateVars.animationOption[0];\n\n    let af;\n\n    function createChildShapes(parent, parentInstance) {\n        if (parent.children.length > 0) {\n            parent.children.forEach((shape) => {\n                shape.data.addTo = parentInstance;\n                let shapeInstance = new Zdog[shape.shapeClass](shape.data);\n                createChildShapes(shape, shapeInstance);\n            })\n        }\n    }\n\n    function copyShapes() {\n        let newshapearry = [];\n        newshapearry.push(shapes[0]);\n        let flattened = newshapearry.flat();\n        return flattened;\n      }\n\n    function createIllo() {\n\n        illo = new Zdog.Illustration({\n          element: '#illo',\n          /* dragRotate: stateVars.dragRotate[0], */\n          dragRotate: (refAnimationOption.current === 'dragRotate'),\n          rotate: {\n              x: refRotate_x.current,\n              y: refRotate_y.current,\n              z: refRotate_z.current\n          }\n        })\n    \n        illo.setSize(stateVars.canvas_w[0], stateVars.canvas_h[0]);\n\n        let copiedshapes = shapes[0].slice(0, shapes[0].length);\n    \n        copiedshapes.forEach((shape) => {\n          console.log(shape);\n          shape.data.addTo = illo;\n          // check face props and replace color value with false if actually false\n          if (Object.keys(shape.faces).length !== 0) {\n              Object.keys(shape.faces).forEach((face) => {\n                  if (shape.faces[face] === false) {\n                      shape.data[face] = false;\n                  }\n              })\n          }\n          let shapeInstance = new Zdog[shape.shapeClass](shape.data);\n          createChildShapes(shape, shapeInstance);\n        })\n    \n        illo.updateRenderGraph();\n\n        console.log('illo = ', illo);\n    \n      }\n\n    let ticker = 0;\n    \n    \n    function rotateIllo() {\n\n        /* if (refAnimate.current === false && refDragRotate.current === false) { */\n        if (refAnimationOption.current === 'none') {\n            console.log('canceling animation frame');\n            cancelAnimationFrame(af);\n            illo.rotate.x = refRotate_x.current;\n            illo.rotate.y = refRotate_y.current;\n            illo.rotate.z = refRotate_z.current;\n            illo.updateRenderGraph();\n\n            isRotating[1](false);\n\n        } else {\n        \n            /* if (refAnimate.current === true) { */\n            if (refAnimationOption.current === 'animate') {\n\n                if (refAnimateSelection.current === 'spin') {\n\n                    if (refSpin_x.current === 0) {\n                        illo.rotate.x = refRotate_x.current;\n                    } else {\n                        illo.rotate.x += (refSpin_x.current);\n                    }\n                    if (refSpin_y.current === 0) {\n                        illo.rotate.y = refRotate_y.current;\n                    } else {\n                        illo.rotate.y += (refSpin_y.current);\n                    }\n                    if (refSpin_z.current === 0) {\n                        illo.rotate.z = refRotate_z.current;\n                    } else {\n                        illo.rotate.z += (refSpin_z.current);\n                    }\n\n                } else if (refAnimateSelection.current === 'ease') {\n\n                    // Zdog animate fn for easeInOut()\n                    let progress = ticker / refEaseIOcycleCount.current;\n                    // apply easing to rotation\n                    let tween = Zdog.easeInOut( progress % 1, refEaseIOpower.current );\n\n                    if (refEaseIOx.current) {\n                        illo.rotate.x = refRotate_x.current + (tween * Zdog.TAU);\n                    }\n                    if (refEaseIOy.current) {\n                        illo.rotate.y = refRotate_y.current + (tween * Zdog.TAU);\n                    }\n                    if (refEaseIOz.current) {\n                        illo.rotate.z = refRotate_z.current + (tween * Zdog.TAU);\n                    }\n\n                    ticker++;\n\n                }\n\n            }\n\n            illo.updateRenderGraph();\n            af = requestAnimationFrame(rotateIllo);\n \n        }\n    }\n\n    useEffect(() => {\n        createIllo();\n    })\n\n    useEffect(() => {\n\n        if (illo !== '' && /* (stateVars.animate[0] | stateVars.dragRotate[0]) */ stateVars.animationOption[0] !== 'none' && isRotating[0] === false) {\n            console.log(\"was not rotating\");\n            isRotating[1](true);\n            rotateIllo();\n        }\n\n    /* }, [stateVars.animate[0], stateVars.dragRotate[0]]); */\n    }, [stateVars.animationOption[0]]);\n\n    return (\n        <section className=\"results\">\n            <section className=\"illustration\" width={stateVars.canvas_w[0]} height={stateVars.canvas_h[0]}>\n                <canvas style={{backgroundColor:stateVars.bgColor[0]}} id=\"illo\" width={stateVars.canvas_w[0]} height={stateVars.canvas_h[0]}>\n                    <p>{stateVars.fallback[0]}</p>\n                </canvas>\n            </section>\n        </section>\n    )\n}\n\nexport default Viewer;","\n\nexport let shapeProperties = {\n    'basic': [\n        'addTo', 'color', 'backface', 'stroke', 'closed', 'fill', 'translate', 'rotate'/*, 'scale', 'zoom' */\n    ],\n    'Ellipse': [\n        /*'diameter',*/ 'width', 'height', 'quarters'\n    ],\n    'Rect': [\n        'width', 'height'\n    ],\n    'Box': [\n        'width', 'height', 'depth', 'frontFace', 'rearFace', 'topFace', 'bottomFace', 'leftFace', 'rightFace'\n    ],\n    'Hemisphere': [\n        'diameter'\n    ],\n    'RoundedRect': [\n        'width', 'height', 'cornerRadius'\n    ],\n    'Polygon': [\n        'radius', 'sides'\n    ],\n    'Cone': [\n        'diameter', 'length'\n    ],\n    'Cylinder': [\n        'diameter', 'length', 'frontFace'\n    ],\n    'Group': [],\n    'Shape': [\n        'path'\n    ]\n}","export default function createScript(illoVars, shapesCopy) {\n    \n    let scriptString = `// illo.js\n\n// create illo\nlet illo = new Zdog.Illustration({\n    // set canvas with id 'illo'\n    element: \"#illo\",\n    dragRotate: ${illoVars.animationOption[0] === 'dragRotate'},\n    rotate: {\n        x: ${illoVars.rotate_x[0]},\n        y: ${illoVars.rotate_y[0]},\n        z: ${illoVars.rotate_z[0]}\n    }\n});\n\n// add shapes\n    `;\n\n    let shapeCount = 0;\n\n    function createChildShapes(parent, parentName) {\n        if (parent.children.length > 0) {\n            parent.children.forEach((shape) => {\n                let name = `shape${shapeCount}`;\n                let data = shape.data;\n                shape.data.addTo = \"--\" + parentName + \"--\";\n                let dataString = JSON.stringify(data, null, '\\t');\n                let newShapeString = `\nlet ${name} = new Zdog['${shape.shapeClass}'](${dataString})\n        `;\n        \n        scriptString = scriptString.concat(newShapeString);\n        shapeCount += 1;\n                createChildShapes(shape, name);\n            })\n        }\n    }\n\n    shapesCopy.forEach(shape => {\n        let name = `shape${shapeCount}`;\n        let data = shape.data;\n        data.addTo = \"--illo--\";\n        let dataString = JSON.stringify(data, null, '\\t');\n        let newShapeString = `\nlet ${name} = new Zdog['${shape.shapeClass}'](${dataString})\n        `;\n        scriptString = scriptString.concat(newShapeString);\n        shapeCount += 1;\n        createChildShapes(shape, name);\n    });\n\n    let endString;\n\n    if (illoVars.animationOption[0] === 'animate') {\n\n        // continuous spin\n        if (illoVars.animateSelection[0] === 'spin') {\n            endString = `\nfunction animate() {\n    illo.rotate.x += ${illoVars.spin_x[0]};\n    illo.rotate.y += ${illoVars.spin_y[0]};\n    illo.rotate.z += ${illoVars.spin_z[0]};\n    illo.updateRenderGraph();\n    requestAnimationFrame(animate);\n}\n            \n    animate();\n        `\n        } else if (illoVars.animateSelection[0] === 'ease') {\n        endString = `\n/* Zdog animate fn for easeInOut */\n\nlet ticker = 0;\nlet cycleCount = ${illoVars.easeIO[0].cycleCount};\n\nfunction animate() {\n    let progress = ticker / cycleCount;\n    // apply easing to rotation\n    let tween = Zdog.easeInOut(progress % 1, ${illoVars.easeIO[0].power});\n    ${illoVars.easeIO[0].x ? 'illo.rotate.x = ' + illoVars.rotate_x[0] + ' + (tween * Zdog.TAU);' : ''}\n    ${illoVars.easeIO[0].y ? 'illo.rotate.y = ' + illoVars.rotate_y[0] + ' + (tween * Zdog.TAU);' : ''}\n    ${illoVars.easeIO[0].z ? 'illo.rotate.z = ' + illoVars.rotate_x[0] + ' + (tween * Zdog.TAU);' : ''}\n    ticker++;\n\n    illo.updateRenderGraph();\n    requestAnimationFrame(animate);\n}\n\nanimate();\n        `\n        }\n    } else if (illoVars.animationOption[0] === 'dragRotate') {\n        endString = `\nfunction animate() {\n    illo.updateRenderGraph();\n    requestAnimationFrame(animate);\n}\n        \nanimate();\n        `\n    } else {\n        endString = `\n// update & render\nillo.updateRenderGraph();\n        `\n    }\n\n    scriptString = scriptString.concat(endString);\n\n    return scriptString;\n\n}\n\n","import React, { useEffect, useState } from 'react';\nimport { Container, Dialog, IconButton, makeStyles, Snackbar, Typography } from '@material-ui/core';\nimport ContentCopyOutlinedIcon from '@mui/icons-material/ContentCopyOutlined';\nimport '../zdogui.css';\nimport { CodeJar } from 'codejar';\nimport createScript from '../createScript';\nimport hljs from 'highlight.js';\n\n\nconst useStyles = makeStyles((theme) => ({\n    invisible: {\n        visibility: 'hidden'\n    },\n    container: {\n        paddingTop: 24,\n        backgroundColor: '#fafafa'\n    },\n    snackbar: {\n        backgroundColor: 'white',\n        color: 'black'\n    },\n    extraMarginTop: {\n        marginTop: '36px'\n    }\n}));\n\nfunction SourceCodeDialog(props) {\n\n    const classes = useStyles();\n\n    const [snackbarOpen, setSnackbarOpen] = useState(false);\n\n    const [editorVisibility, setEditorVisibility] = [props.editorVisibility[0], props.editorVisibility[1]];\n    const [open, setOpen] = [props.open[0], props.open[1]];\n\n    const stateVars = props.stateVars;\n    const addedShapes = props.addedShapes;\n\n    function clipboardCopy(elID) {\n        let text = document.getElementById(elID).innerText;\n        navigator.clipboard.writeText(text).then(function () {\n            console.log('copy to clipboard successful');\n            // add notification\n            setSnackbarOpen(true);\n        }, function () {\n            console.log('copy to clipboard failed')\n        })\n    }\n\n    function handleClose() {\n        setOpen(false);\n        setEditorVisibility(false);\n    }\n\n    function removeAllDoubleDashQuotes(scriptString) {\n        let fixedScript = scriptString.replaceAll(`\"--`, '');\n        let fixedScript2 = fixedScript.replaceAll(`--\"`, '');\n        return fixedScript2;\n    }\n\n    function copyShapes() {\n        let newshapearry = [];\n        newshapearry.push(addedShapes[0]);\n        let flattened = newshapearry.flat();\n        return flattened;\n    }\n\n    useEffect(() => {\n        //if (open) {\n          \n          console.log('open');\n          setTimeout(() => {\n    \n            // HTML snippets\n    \n            let codetagsHTML_canvas = document.getElementById('codetagsHTML_canvas');\n            let codetagsHTML_script = document.getElementById('codetagsHTML_script');\n    \n            let snippet_canvas =\n              `<!-- canvas for Zdog illo -->\n    <canvas id=\"illo\" style=\"background-color:${stateVars.bgColor[0]};\" width=\"${stateVars.canvas_w[0]}\" height=\"${stateVars.canvas_h[0]}\">\n      <p>${stateVars.fallback[0]}</p>\n    </canvas>`;\n    \n            let snippet_script = \n            `<!-- Zdog CDN and illo.js -->\n    <script src=\"https://unpkg.com/zdog@1/dist/zdog.dist.min.js\"></script>\n    <script src=\"illo.js\"></script>`;\n    \n            let jarHTML_canvas = CodeJar(codetagsHTML_canvas, hljs.highlightAll);\n            jarHTML_canvas.updateCode(snippet_canvas);\n    \n            let jarHTML_script = CodeJar(codetagsHTML_script, hljs.highlightAll);\n            jarHTML_script.updateCode(snippet_script);\n    \n            // JavaScript snippet\n      \n            let codetagsJS = document.getElementById('codetagsJS');\n            \n            if (codetagsJS !== null) {\n              let jar = CodeJar(codetagsJS, hljs.highlightAll);\n    \n              if (addedShapes[0].length > 0) {\n                let flattened = copyShapes();\n                let scriptString = createScript(stateVars, flattened);\n                let fixed = removeAllDoubleDashQuotes(scriptString);\n                jar.updateCode(fixed);\n              }\n    \n              // Get code\n              let mycode = jar.toString();\n              //console.log(mycode);\n    \n              // Listen to updates\n              jar.onUpdate((code) => {\n                console.log(code);\n              });\n            }\n    \n            // set editors to be visible\n            setEditorVisibility(true);\n    \n          }, 200);\n        //}\n      }, []);\n\n\n    return (\n\n        <Dialog open={open} maxWidth=\"md\" onClose={handleClose} /* open={open}  */ className={(!editorVisibility) ? classes.invisible : ''}>\n            <Container className={classes.container}>\n                <div className=\"editorHeader\">\n                    <Typography>HTML</Typography>\n                </div>\n                <div className=\"contentcopy\">\n                    <IconButton onClick={() => clipboardCopy('editorHTML_canvas')} id=\"copyHTML_canvas\" aria-label=\"Copy to clipboard\"><ContentCopyOutlinedIcon fontSize='small' /></IconButton>\n                </div>\n                <div id=\"editorHTML_canvas\">\n                    <pre>\n                        <code id=\"codetagsHTML_canvas\" className=\"language-html\">''\n                        </code>\n                    </pre>\n                </div>\n                <div className=\"contentcopy\">\n                    <IconButton onClick={() => clipboardCopy('editorHTML_script')} id=\"copyHTML_script\" aria-label=\"Copy to clipboard\"><ContentCopyOutlinedIcon fontSize=\"small\" /></IconButton>\n                </div>\n                <div id=\"editorHTML_script\">\n                    <pre>\n                        <code id=\"codetagsHTML_script\" className=\"language-html\">''\n                        </code>\n                    </pre>\n                </div>\n                <div className=\"editorHeader\">\n                    <Typography className={classes.extraMarginTop}>JavaScript</Typography>\n                </div>\n                <div className=\"contentcopy\">\n                    <IconButton onClick={() => clipboardCopy('editor')} id=\"copyJS\" aria-label=\"Copy to clipboard\"><ContentCopyOutlinedIcon fontSize=\"small\" /></IconButton>\n                </div>\n                <div id=\"editor\">\n                    <pre>\n                        <code id=\"codetagsJS\" className=\"language-javascript\">''\n                        </code>\n                    </pre>\n                </div>\n                <Snackbar\n                    ContentProps={{ className: classes.snackbar }}\n                    anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n                    open={snackbarOpen}\n                    autoHideDuration={3000}\n                    onClose={() => setSnackbarOpen(false)}\n                    message=\"Copied to clipboard!\"\n                />\n            </Container>\n\n        </Dialog>\n    )\n}\n\nexport default SourceCodeDialog;","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport AddIcon from '@material-ui/icons/Add';\nimport { IconButton } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n    addbtn: {\n        /* color: '#643263' */\n    },\n    disabled: {\n        color: 'grey'\n    },\n    smallFont: {\n      fontSize: '0.9rem'\n    }\n});\n\nexport default function AddShapeMenu(props) {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  //let selected = props.selected;\n\n  let selectedNodeId = props.selectedNodeId;\n  let addNewZdogShape = props.addNewZdogShape;\n\n  const classes = useStyles();\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  function handleShapeSelect(v) {\n      handleClose();\n      addNewZdogShape(v, selectedNodeId[0]);\n  }\n\n  return (\n    <div>\n      <IconButton disabled={selectedNodeId[0] === ''} aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\n        <AddIcon className={(selectedNodeId[0] === '')? classes.disabled : classes.addbtn} /* color=\"inherit\"  */fontSize=\"small\"/>\n      </IconButton>\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        <MenuItem className={classes.smallFont} divider onClick={() => handleShapeSelect('Group')}value=\"Group\">Group</MenuItem>\n        <MenuItem className={classes.smallFont} divider onClick={() => handleShapeSelect('Shape')} value=\"Shape\">Shape</MenuItem>\n        <MenuItem className={classes.smallFont} onClick={() => handleShapeSelect('Box')} value=\"Box\">Box</MenuItem>\n        <MenuItem className={classes.smallFont} onClick={() => handleShapeSelect('Cone')} value=\"Cone\">Cone</MenuItem>\n        <MenuItem className={classes.smallFont} onClick={() => handleShapeSelect('Cylinder')} value=\"Cylinder\">Cylinder</MenuItem>\n        <MenuItem className={classes.smallFont} onClick={() => handleShapeSelect('Ellipse')}value=\"Ellipse\">Ellipse</MenuItem>\n        <MenuItem className={classes.smallFont} onClick={() => handleShapeSelect('Hemisphere')} value=\"Hemisphere\">Hemisphere</MenuItem>\n        <MenuItem className={classes.smallFont} onClick={() => handleShapeSelect('Polygon')} value=\"Polygon\">Polygon</MenuItem>\n        <MenuItem className={classes.smallFont} onClick={() => handleShapeSelect('Rect')} value=\"Rectangle\">Rectangle</MenuItem>\n        <MenuItem className={classes.smallFont} onClick={() => handleShapeSelect('RoundedRect')} value=\"Rounded Rectangle\">Rounded Rectangle</MenuItem>\n      </Menu>\n    </div>\n  );\n}","import React, { useEffect, useState } from 'react';\nimport '../zdogui.css';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { Button, ButtonGroup, Container, Dialog, IconButton, Typography } from '@material-ui/core';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport AddShapeMenu from './AddShapeMenu';\n\nimport NoteAddOutlinedIcon from '@mui/icons-material/NoteAddOutlined';\nimport CodeIcon from '@mui/icons-material/Code';\n\n\nconst useStyles = makeStyles({\n    addshape: {\n        width: 140,\n        height: 34\n    },\n    disabled: {\n        color: 'grey'\n    },\n    confirmDialog: {\n        padding: 40\n    },\n});\n\nexport default function IlloToolbar(props) {\n\n    const setPresets = props.setPresets;\n    const stateVars = props.stateVars;\n    const addedShapes = props.addedShapes;\n    let selectedNodeId = props.selectedNodeId;\n    let addNewZdogShape = props.addNewZdogShape;\n    const setOpen = props.setOpen;\n\n    const classes = useStyles();\n\n    const [confirmDialogOpen, setConfirmDialogOpen] = useState(false);\n    const [confirmCreateNewDialogOpen, setConfirmCreateNewDialogOpen] = useState(false);\n\n    function handleDelete() {\n        console.log('hello');\n        setConfirmDialogOpen(true);\n    }\n\n    function handleConfirm() {\n        let flattened = copyShapes();\n\n        let nodeId = selectedNodeId[0];\n        let posStrings = nodeId.split('_');\n        let posNums = posStrings.map((s) => Number(s));\n\n        if (posNums.length === 1) {\n\n            flattened.splice(posNums[0], 1);\n\n            // reset selected node id to canvas\n            selectedNodeId[1]('canvasnode');\n\n        } else {\n            let currentShape;\n\n            posNums.forEach((posNum, i) => {\n                if ((0 < i) && (i <= (posNums.length - 2))) {\n                    currentShape = currentShape.children[posNum];\n                } else if (i === 0) {\n                    currentShape = flattened[posNum];\n                }\n            })\n\n            let lastpos = posNums[posNums.length - 1];\n\n            currentShape.children.splice(lastpos, 1);\n\n            // reset selected node id to parent of deleted shape\n            posNums.pop();\n            let posNumsToStrings = posNums.map((n) => n.toString());\n            let parentNodeId = posNumsToStrings.join('_');\n            selectedNodeId[1](parentNodeId);\n            \n        }\n\n        addedShapes[1](flattened);\n        handleClose();\n    }\n\n    function handleClose() {\n        setConfirmDialogOpen(false);\n    }\n\n    function copyShapes() {\n        let newshapearry = [];\n        newshapearry.push(addedShapes[0]);\n        let flattened = newshapearry.flat();\n        return flattened;\n    }\n\n    function handleCreateNew() {\n        console.log('create new clicked');\n        setConfirmCreateNewDialogOpen(true);\n    }\n\n    function handleConfirmCreateNew() {\n\n        // TO DO: replace below with a fn that sets all state props to a default or a specific demo\n        selectedNodeId[1]('canvasnode');\n        setPresets('blank');\n        /* stateVars.fallback[1]('');\n        addedShapes[1]([]); */\n\n        handleCloseCreateNewDialog();\n    }\n\n    function handleCloseCreateNewDialog() {\n        setConfirmCreateNewDialogOpen(false);\n    }\n\n    function getSourceCode() {\n        console.log('getting source code');\n        setOpen(true);\n    }\n\n\n    return (\n            <div className=\"toplevelactions\">\n\n                <IconButton id=\"createnew\" onClick={handleCreateNew} aria-label=\"Create new illustration\">\n                    <NoteAddOutlinedIcon fontSize=\"small\" />\n                </IconButton>\n\n                <Dialog onClose={handleCloseCreateNewDialog} open={confirmCreateNewDialogOpen}>\n                        <Container className={classes.confirmDialog}>\n                            <Typography>Starting a new Zdog Illustration will delete any work you've done so far! \n                                <br/>\n                                <b>Be sure to grab any source code you want for your current project first.</b>\n                            </Typography>\n                                <Typography><br/>Create a new Zdog Illustration?</Typography>\n                            <div>\n                                <Button onClick={handleConfirmCreateNew} color=\"primary\">Confirm</Button>\n                                <Button onClick={handleCloseCreateNewDialog}>Cancel</Button>\n                            </div>\n                        </Container>\n                </Dialog>\n\n                <ButtonGroup id=\"btngrp\">\n                    <div>\n                        <IconButton className={(selectedNodeId[0] === '' || selectedNodeId[0] === 'canvasnode') ? classes.disabled : ''} onClick={handleDelete} aria-label=\"delete\" disabled={(selectedNodeId[0] === '' || selectedNodeId[0] === 'canvasnode')}>\n                            <DeleteOutlinedIcon fontSize=\"small\" />\n                        </IconButton>\n                    </div>\n\n                    <Dialog onClose={handleClose} open={confirmDialogOpen}>\n                        <Container className={classes.confirmDialog}>\n                            <Typography>Deleting this shape will also delete any child shapes. Are you sure you want to delete this shape?</Typography>\n                            <div>\n                                <Button onClick={handleConfirm} color=\"primary\">Confirm</Button>\n                                <Button onClick={handleClose}>Cancel</Button>\n                            </div>\n                        </Container>\n\n                    </Dialog>\n\n                    <AddShapeMenu selectedNodeId={selectedNodeId} addNewZdogShape={addNewZdogShape} />\n            \n                </ButtonGroup>\n\n                <IconButton id=\"getsourcecode\" onClick={getSourceCode} aria-label=\"Source code\">\n                            <CodeIcon fontSize=\"small\" />\n                </IconButton>\n\n            </div>\n    )\n\n}","import React, { useEffect, useState } from 'react';\nimport '../zdogui.css';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport TreeView from '@material-ui/lab/TreeView';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport TreeItem from '@material-ui/lab/TreeItem';\n\nimport generateID from '../generateID';\nimport fixCamelCase from '../fixCamelCase';\nimport IlloToolbar from './IlloToolbar';\n\n\nconst useStyles = makeStyles({\n    root: {\n        padding: 16,\n        overflowX: 'scroll',\n        overflowY: 'scroll',\n       height: window.innerHeight - 185 /* 185 is (appbar + actionsbar heights) + additional 33px offset needed for bottom horizontal scroll bar to show */\n\n    },\n    item: {\n        color: 'rgba(0, 0, 0, 0.87)'\n    }\n});\n\nexport default function IlloExplorer(props) {\n\n    const setPresets = props.setPresets;\n    const stateVars = props.stateVars;\n    const addedShapes = props.addedShapes;\n    let selectedNodeId = props.selectedNodeId;\n    let addNewZdogShape = props.addNewZdogShape;\n    const setOpen = props.setOpen;\n\n    const classes = useStyles();\n\n    const [expanded, setExpanded] = React.useState(['canvasnode']);\n\n    const handleToggle = (event, nodeIds) => {\n        setExpanded(nodeIds);\n    };\n\n    const handleSelect = (event, nodeIds) => {\n        selectedNodeId[1](nodeIds);\n        console.log('nodeIds: ' + nodeIds);\n    };\n\n    function copyArray(a) {\n        let newArray = [];\n        newArray.push(a);\n        let newArrayFlattened = newArray.flat();\n        return newArrayFlattened;\n    }\n\n    function checkParentExpanded() {\n        let pos = selectedNodeId[0].split('_');\n        if (pos.length > 1) {\n            pos.pop();\n            let parentId = pos.join('_');\n            if (!expanded.includes(parentId)) {\n                console.log('does not include parentId');\n                let copied = copyArray(expanded);\n                copied.push(parentId);\n                setExpanded(copied);\n            }\n        } else {\n            if (!expanded.includes('canvasnode')) {\n                let copied = copyArray(expanded);\n                copied.push('canvasnode');\n                setExpanded(copied);\n            }\n        }\n    }\n\n    function createTree(childrenArray, parentnodeid) {\n        let p = parentnodeid;\n        console.log(childrenArray.length !== 0);\n        if (childrenArray.length !== 0) {\n            let treeitems = childrenArray.map((shape, i) => {\n                let pos = `${p}_${i}`;\n                let item = (<TreeItem className={classes.item} key={generateID()} nodeId={pos} label={fixCamelCase(shape.shapeClass)}>\n                    {createTree(shape.children, pos)}\n                </TreeItem>);\n                return item;\n            })\n            return treeitems;\n        } else {\n            return '';\n        }\n    }\n\n    let toptreelevel = addedShapes[0].map((shape, i) => {\n        let item =\n            (<TreeItem className={classes.item} key={generateID()} nodeId={i.toString()} label={fixCamelCase(shape.shapeClass)}>\n                {createTree(shape.children, i.toString())}\n            </TreeItem>);\n        return item;\n    })\n\n    useEffect(() => {\n        checkParentExpanded();\n    });\n\n\n    return (\n        <section className=\"illoExplorer\">\n\n            <IlloToolbar setPresets={setPresets} setOpen={setOpen} stateVars={stateVars} addedShapes={addedShapes} selectedNodeId={selectedNodeId} addNewZdogShape={addNewZdogShape} />\n\n            <TreeView\n                className={classes.root}\n                defaultCollapseIcon={<ExpandMoreIcon />}\n                defaultExpandIcon={<ChevronRightIcon />}\n                expanded={expanded}\n                selected={selectedNodeId[0]}\n                onNodeToggle={handleToggle}\n                onNodeSelect={handleSelect}\n            >\n                <TreeItem className={classes.item} nodeId=\"canvasnode\" label=\"Canvas\">\n                    {toptreelevel}\n                </TreeItem>\n            </TreeView>\n\n        </section>\n    )\n\n}","import Zdog from 'zdog';\nimport generateID from './generateID';\n\nexport let illoPresets = {\n    'blank': {\n        canvas_w: 240,\n        canvas_h: 240,\n        dragRotate: true,\n        animate: false,\n        rotate_x: 0,\n        rotate_y: 0,\n        rotate_z: 0,\n        spin_x: .01,\n        spin_y: .04,\n        spin_z: .01,\n        easeIO:\n        {\n            x: false,\n            y: true,\n            z: true,\n            cycleCount: 200,\n            power: 3\n        }\n        ,\n        animateSelection: 'ease',\n        fallback: 'A blank canvas',\n        animationOption: 'dragRotate',\n        bgColor: '#FFDDBB',\n        shapeLayers: []\n    },\n    'whitebox': {\n        canvas_w: 240,\n        canvas_h: 240,\n        dragRotate: false,\n        animate: true,\n        rotate_x: 0,\n        rotate_y: 0,\n        rotate_z: 0,\n        spin_x: .01,\n        spin_y: .04,\n        spin_z: .01,\n        easeIO:\n        {\n            x: false,\n            y: true,\n            z: true,\n            cycleCount: 350,\n            power: 5\n        }\n        ,\n        animateSelection: 'ease',\n        fallback: 'An outline of a square rotates to reveal it is the front face of a cube',\n        animationOption: 'animate',\n        bgColor: '#424242',\n        shapeLayers: [\n            {\n                id: generateID(),\n                children: [\n                    {\n                        id: generateID(),\n                        children: [],\n                        open: true,\n                        shapeClass: 'Box',\n                        data: {\n                            \"color\": \"#5C5C5C\",\n                            \"backface\": true,\n                            \"stroke\": \"1\",\n                            \"fill\": true,\n                            \"translate\": new Zdog.Vector({}),\n                            \"rotate\": new Zdog.Vector({}),\n                            \"width\": 100,\n                            \"height\": 100,\n                            \"depth\": 100,\n                            \"frontFace\": false,\n                            \"rearFace\": false,\n                            \"topFace\": \"#f5f5f5\",\n                            \"bottomFace\": \"#bfbfbf\",\n                            \"leftFace\": \"#e0e0e0\",\n                            \"rightFace\": \"#e0e0e0\"\n                        },\n                        faces: {\n                            \"frontFace\": \"#cecece\",\n                            \"rearFace\": \"#cecece\",\n                            \"topFace\": true,\n                            \"bottomFace\": true,\n                            \"leftFace\": true,\n                            \"rightFace\": true\n                        }\n                    }\n                ],\n                open: true,\n                shapeClass: 'Box',\n                data: {\n                    \"color\": \"#5C5C5C\",\n                    \"backface\": true,\n                    \"stroke\": \"1\",\n                    \"fill\": false,\n                    \"translate\": new Zdog.Vector({}),\n                    \"rotate\": new Zdog.Vector({}),\n                    \"width\": 100,\n                    \"height\": 100,\n                    \"depth\": 100,\n                    \"frontFace\": \"#cecece\",\n                    \"rearFace\": \"#cecece\",\n                    \"topFace\": \"#cecece\",\n                    \"bottomFace\": \"#cecece\",\n                    \"leftFace\": \"#cecece\",\n                    \"rightFace\": \"#cecece\"\n                },\n                faces: {\n                    \"frontFace\": true,\n                    \"rearFace\": true,\n                    \"topFace\": true,\n                    \"bottomFace\": true,\n                    \"leftFace\": true,\n                    \"rightFace\": true\n                }\n            }\n        ]\n    },\n    'lego': {\n        canvas_w: 450,\n        canvas_h: 450,\n        dragRotate: true,\n        animate: false,\n        rotate_x: 0,\n        rotate_y: 0,\n        rotate_z: 0,\n        spin_x: .01,\n        spin_y: .04,\n        spin_z: .01,\n        easeIO:\n        {\n            x: true,\n            y: true,\n            z: false,\n            cycleCount: 200,\n            power: 3\n        }\n        ,\n        animateSelection: 'ease',\n        fallback: 'Animated model of a red LEGO piece',\n        animationOption: 'animate',\n        bgColor: '#3A7DE9',\n        shapeLayers: [\n            {\n                id: generateID(),\n                children: [\n                    {\n                        id: generateID(),\n                        children: [\n                            {\n                                id: generateID(),\n                                children: [],\n                                open: true,\n                                shapeClass: 'Cylinder',\n                                data: {\n                                    \"color\": \"#c30006\",\n                                    \"backface\": \"#aa0a11\",\n                                    \"stroke\": \"1\",\n                                    \"fill\": true,\n                                    \"translate\": new Zdog.Vector({\n                                        \"x\": -80,\n                                        \"y\": 0,\n                                        \"z\": 0\n                                    }),\n                                    \"rotate\": new Zdog.Vector({}),\n                                    \"diameter\": \"65\",\n                                    \"length\": \"85\",\n                                    \"frontFace\": \"#000000\"\n                                },\n                                faces: {}\n                            },\n                            {\n                                id: generateID(),\n                                children: [],\n                                open: true,\n                                shapeClass: 'Cylinder',\n                                data: {\n                                    \"color\": \"#c30006\",\n                                    \"backface\": \"#aa0a11\",\n                                    \"stroke\": \"1\",\n                                    \"fill\": true,\n                                    \"translate\": new Zdog.Vector({}),\n                                    \"rotate\": new Zdog.Vector({}),\n                                    \"diameter\": \"65\",\n                                    \"length\": \"85\",\n                                    \"frontFace\": \"#000000\"\n                                },\n                                faces: {}\n                            },\n                            {\n                                id: generateID(),\n                                children: [],\n                                open: true,\n                                shapeClass: 'Cylinder',\n                                data: {\n                                    \"color\": \"#c30006\",\n                                    \"backface\": \"#aa0a11\",\n                                    \"stroke\": \"1\",\n                                    \"fill\": true,\n                                    \"translate\": new Zdog.Vector({\n                                        \"x\": 80,\n                                        \"y\": 0,\n                                        \"z\": 0\n                                    }),\n                                    \"rotate\": new Zdog.Vector({}),\n                                    \"diameter\": \"65\",\n                                    \"length\": \"85\",\n                                    \"frontFace\": \"#000000\"\n                                },\n                                faces: {}\n                            }\n                        ],\n                        open: true,\n                        shapeClass: 'Group',\n                        data: {\n                            \"translate\": new Zdog.Vector({\n                                \"x\": 0,\n                                \"y\": 5,\n                                \"z\": 0\n                            }),\n                            \"rotate\": new Zdog.Vector({\n                                \"x\": 1.5707963267948966,\n                                \"y\": 0,\n                                \"z\": 0\n                            })\n                        },\n                        faces: {}\n                    }\n                ],\n                open: true,\n                shapeClass: 'Box',\n                data: {\n                    /*         \"addTo\": illo, */\n                    \"color\": \"#c30005\",\n                    \"backface\": true,\n                    \"stroke\": 1,\n                    \"fill\": true,\n                    \"translate\": new Zdog.Vector({}),\n                    \"rotate\": new Zdog.Vector({}),\n                    \"width\": \"320\",\n                    \"height\": \"96\",\n                    \"depth\": \"160\",\n                    \"frontFace\": \"#b2081f\",\n                    \"rearFace\": \"#c30005\",\n                    \"topFace\": \"#db0623\",\n                    \"bottomFace\": false,\n                    \"leftFace\": \"#c30005\",\n                    \"rightFace\": \"#c30005\"\n                },\n                faces: {\n                    \"frontFace\": true,\n                    \"rearFace\": true,\n                    \"topFace\": true,\n                    \"bottomFace\": \"#a20106\",\n                    \"leftFace\": true,\n                    \"rightFace\": true\n                }\n            },\n            {\n                id: generateID(),\n                children: [\n                    {\n                        id: generateID(),\n                        children: [],\n                        open: true,\n                        shapeClass: 'Cylinder',\n                        data: {\n                            \"color\": \"#c30006\",\n                            \"backface\": true,\n                            \"stroke\": 1,\n                            \"fill\": true,\n                            \"translate\": new Zdog.Vector({\n                                \"x\": 40,\n                                \"y\": 40,\n                                \"z\": 0\n                            }),\n                            \"rotate\": new Zdog.Vector({}),\n                            \"diameter\": \"50\",\n                            \"length\": \"20\",\n                            \"frontFace\": \"#db0723\"\n                        },\n                        faces: {}\n                    },\n                    {\n                        id: generateID(),\n                        children: [],\n                        open: true,\n                        shapeClass: 'Cylinder',\n                        data: {\n                            \"color\": \"#c30006\",\n                            \"backface\": true,\n                            \"stroke\": 1,\n                            \"fill\": true,\n                            \"translate\": new Zdog.Vector({\n                                \"x\": 40,\n                                \"y\": -40,\n                                \"z\": 0\n                            }),\n                            \"rotate\": new Zdog.Vector({}),\n                            \"diameter\": \"50\",\n                            \"length\": \"20\",\n                            \"frontFace\": \"#db0723\"\n                        },\n                        faces: {}\n                    },\n                    {\n                        id: generateID(),\n                        children: [],\n                        open: true,\n                        shapeClass: 'Cylinder',\n                        data: {\n                            \"color\": \"#c30006\",\n                            \"backface\": true,\n                            \"stroke\": 1,\n                            \"fill\": true,\n                            \"translate\": new Zdog.Vector({\n                                \"x\": 120,\n                                \"y\": 40,\n                                \"z\": 0\n                            }),\n                            \"rotate\": new Zdog.Vector({}),\n                            \"diameter\": \"50\",\n                            \"length\": \"20\",\n                            \"frontFace\": \"#db0723\"\n                        },\n                        faces: {}\n                    },\n                    {\n                        id: generateID(),\n                        children: [],\n                        open: true,\n                        shapeClass: 'Cylinder',\n                        data: {\n                            \"color\": \"#c30006\",\n                            \"backface\": true,\n                            \"stroke\": 1,\n                            \"fill\": true,\n                            \"translate\": new Zdog.Vector({\n                                \"x\": 120,\n                                \"y\": -40,\n                                \"z\": 0\n                            }),\n                            \"rotate\": new Zdog.Vector({}),\n                            \"diameter\": \"50\",\n                            \"length\": \"20\",\n                            \"frontFace\": \"#db0723\"\n                        },\n                        faces: {}\n                    },\n                    {\n                        id: generateID(),\n                        children: [],\n                        open: true,\n                        shapeClass: 'Cylinder',\n                        data: {\n                            \"color\": \"#c30006\",\n                            \"backface\": true,\n                            \"stroke\": 1,\n                            \"fill\": true,\n                            \"translate\": new Zdog.Vector({\n                                \"x\": -120,\n                                \"y\": 40,\n                                \"z\": 0\n                            }),\n                            \"rotate\": new Zdog.Vector({}),\n                            \"diameter\": \"50\",\n                            \"length\": \"20\",\n                            \"frontFace\": \"#db0723\"\n                        },\n                        faces: {}\n                    },\n                    {\n                        id: generateID(),\n                        children: [],\n                        open: true,\n                        shapeClass: 'Cylinder',\n                        data: {\n                            \"color\": \"#b2081f\",\n                            \"backface\": true,\n                            \"stroke\": 1,\n                            \"fill\": true,\n                            \"translate\": new Zdog.Vector({\n                                \"x\": -120,\n                                \"y\": -40,\n                                \"z\": 0\n                            }),\n                            \"rotate\": new Zdog.Vector({}),\n                            \"diameter\": \"50\",\n                            \"length\": \"20\",\n                            \"frontFace\": \"#db0723\"\n                        },\n                        faces: {}\n                    },\n                    {\n                        id: generateID(),\n                        children: [],\n                        open: true,\n                        shapeClass: 'Cylinder',\n                        data: {\n                            \"color\": \"#b2081f\",\n                            \"backface\": true,\n                            \"stroke\": 1,\n                            \"fill\": true,\n                            \"translate\": new Zdog.Vector({\n                                \"x\": -40,\n                                \"y\": 40,\n                                \"z\": 0\n                            }),\n                            \"rotate\": new Zdog.Vector({}),\n                            \"diameter\": \"50\",\n                            \"length\": \"20\",\n                            \"frontFace\": \"#db0723\"\n                        },\n                        faces: {}\n                    },\n                    {\n                        id: generateID(),\n                        children: [],\n                        open: true,\n                        shapeClass: 'Cylinder',\n                        data: {\n                            \"color\": \"#b2081f\",\n                            \"backface\": true,\n                            \"stroke\": 1,\n                            \"fill\": true,\n                            \"translate\": new Zdog.Vector({\n                                \"x\": -40,\n                                \"y\": -40,\n                                \"z\": 0\n                            }),\n                            \"rotate\": new Zdog.Vector({}),\n                            \"diameter\": \"50\",\n                            \"length\": \"20\",\n                            \"frontFace\": \"#db0723\"\n                        },\n                        faces: {}\n                    }\n                ],\n                open: true,\n                shapeClass: 'Group',\n                data: {\n                    \"translate\": new Zdog.Vector({\n                        \"x\": 0,\n                        \"y\": -58,\n                        \"z\": 0\n                    }),\n                    \"rotate\": new Zdog.Vector({\n                        \"x\": 1.5707963267948966,\n                        \"y\": 0,\n                        \"z\": 0\n                    }),\n                    /*  \"addTo\": illo */\n                },\n                faces: {}\n            }\n        ]\n    }\n}","import React, { useEffect, useState } from 'react';\nimport './zdogui.css';\nimport Controls from './components/Controls';\nimport Viewer from './components/Viewer';\nimport { shapeProperties } from './shapeProperties';\n\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nimport Zdog from 'zdog';\nimport { AppBar, Button, IconButton, Toolbar, Typography, makeStyles, Dialog, Container, Icon, Snackbar } from '@material-ui/core';\nimport CodeIcon from '@material-ui/icons/Code';\n\nimport AddIcon from '@material-ui/icons/Add';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\n\n/* import CreateNewFolderIcon from '@mui/icons-material/CreateNewFolder'; */\n/* import CreateNewFolderIcon from '@material-ui/icons/CreateNewFolder'; */\n\nimport { CodeJar } from 'codejar';\n/* import Prism from 'prismjs'; */\nimport createScript from './createScript';\nimport generateID from './generateID';\n\nimport hljs from 'highlight.js';\nimport 'highlight.js/styles/github.css';\n/* import javascript from 'highlight.js/lib/languages/javascript';\nhljs.registerLanguage('javascript', javascript); */\n\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport ContentCopyOutlinedIcon from '@mui/icons-material/ContentCopyOutlined';\n\nimport MoreHorizIcon from '@mui/icons-material/MoreHoriz';\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\nimport SourceCodeDialog from './components/SourceCodeDialog';\nimport IlloExplorer from './components/IlloExplorer';\n\nimport { illoPresets } from './illoPresets';\n\n/* Zdog shape instances */\nconst zdogDefaultShapes = {\n  'Group': new Zdog.Group(),\n  'Ellipse': new Zdog.Ellipse(),\n  'Rect': new Zdog.Rect(),\n  'Box': new Zdog.Box(),\n  'Hemisphere': new Zdog.Hemisphere(),\n  'RoundedRect': new Zdog.RoundedRect(),\n  'Polygon': new Zdog.Polygon(),\n  'Cone': new Zdog.Cone(),\n  'Cylinder': new Zdog.Cylinder(),\n  'Shape': new Zdog.Shape()\n}\n\n\nconst useStyles = makeStyles((theme) => ({\n  bar: {\n    backgroundColor: \"#fafafa\",\n    color: '#eeaa00',\n    borderBottom: '1px solid #ededed',\n  },\n  toolbar: {\n    justifyContent: 'space-between'\n  },\n  purple: {\n    color: '#636'\n  },\n  /* snackbar: {\n    backgroundColor: 'white',\n    color: 'black'\n  }, */\n  /* getCode: {\n    right: 16,\n    position: \"absolute\",\n    backgroundColor: \"rgb(100 50 99)\",\n    paddingLeft: 16,\n    paddingRight: 16,\n    borderStyle: 'solid',\n    borderWidth: 2,\n    borderColor: '#eeaa00',\n    color: '#eeaa00',\n    '&:hover': {\n      backgroundColor: '#eeaa00',\n      color: \"rgb(100 50 99)\"\n    }\n  }, */\n  code: {\n    borderStyle: 'solid',\n    borderWidth: 1,\n    borderColor: '#d5d5d5',\n    '&:hover': {\n      borderColor: '#f0f0f0',\n      color: 'black'\n    }\n  },\n  container: {\n    paddingTop: 24,\n    backgroundColor: '#fafafa'\n  },\n  /* invisible: {\n    visibility: 'hidden'\n  }, */\n  smallFont: {\n    fontSize: '0.85rem',\n  },\n  left: {\n    marginLeft: '4px'\n  },\n  /* extraMarginTop: {\n    marginTop: '36px'\n  } */\n\n}));\n\nfunction App(props) {\n\n  const [presets, setPresets] = useState('whitebox');\n\n  const [psets, setPsets] = useState(illoPresets[presets]);\n\n  const stateVars = {\n    canvas_w: useState(psets.canvas_w),\n    canvas_h: useState(psets.canvas_h),\n    dragRotate: useState(psets.dragRotate),\n    animate: useState(psets.animate),\n    rotate_x: useState(psets.rotate_x),\n    rotate_y: useState(psets.rotate_y),\n    rotate_z: useState(psets.rotate_z),\n    spin_x: useState(psets.spin_x),\n    spin_y: useState(psets.spin_y),\n    spin_z: useState(psets.spin_z),\n    easeIO: useState(psets.easeIO),\n    animateSelection: useState(psets.animateSelection),\n/*     demo: useState('lego'), */\n    fallback: useState(psets.fallback),\n    animationOption: useState(psets.animationOption),\n    bgColor: useState(psets.bgColor)\n  }\n\n  const addedShapes = useState(psets.shapeLayers);\n\n  const [open, setOpen] = useState(false);\n\n  /* const [snackbarOpen, setSnackbarOpen] = useState(false); */\n\n  let cursorFocus = useState({\n    'id': '',\n    'cursorPos': 0\n  });\n\n  const selectedNodeId = useState('canvasnode');\n\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const [editorVisibility, setEditorVisibility] = React.useState(false);\n\n  const classes = useStyles();\n\n  function updateAllPresets() {\n    //setPsets(illoPresets[presets]);\n    updateAllStateVars(illoPresets[presets]);\n    addedShapes[1](illoPresets[presets].shapeLayers);\n  }\n\n  function updateAllStateVars(selectedPresets) {\n    Object.keys(stateVars).forEach((param) => {\n      stateVars[param][1](selectedPresets[param]);\n    })\n  }\n\n  const handleClickMore = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleCloseMore = () => {\n    setAnchorEl(null);\n  };\n\n  const openInNewTab = (url) => {\n    handleCloseMore();\n    window.open(url);\n  }\n\n  function copyShapes() {\n    let newshapearry = [];\n    newshapearry.push(addedShapes[0]);\n    let flattened = newshapearry.flat();\n    return flattened;\n  }\n\n\n  function getDefaultValsForShapeProperties(defaultShapes, shapeClass) {\n\n    let zdogShape = defaultShapes[shapeClass];\n\n    let props_basic = (shapeClass === 'Group') ? ['translate', 'rotate'] : shapeProperties['basic'];\n\n    let props_shape = shapeProperties[shapeClass];\n    let data = {};\n    let faces = {};\n\n    props_basic.forEach((prop) => {\n      if (shapeClass === 'Shape' && prop === 'stroke') {\n        data[prop] = 10;\n      } else if (prop === 'translate' || prop === 'rotate') {\n        data[prop] = new Zdog.Vector({});\n      } else if (prop === 'backface' && !(shapeClass === 'Box')) { /* backface needs to remain set to default value of true for Box. If it is set to a color value then all Box-specific face colors do not render properly */\n        data[prop] = '#424242';\n      } else if (prop === 'color') {\n        data[prop] = '#5C5C5C';\n      } else {\n        let defaultVal = zdogShape[prop];\n        data[prop] = defaultVal;\n      }\n    })\n\n    props_shape.forEach((prop) => {\n      if (prop === 'width' || prop === 'height' || prop === 'depth' || prop === 'diameter' || prop === 'length' || prop === 'radius') {\n        data[prop] = 100;\n      } else if (prop.includes('Face')) {\n        if (prop === 'frontFace') {\n          data[prop] = '#B8B8B8';\n        } else if (prop === 'rearFace') {\n          data[prop] = '#424242';\n        } else {\n          data[prop] = '#5C5C5C';\n        }\n        faces[prop] = true;\n      } else if (prop === 'path') {\n        data[prop] = [{line: new Zdog.Vector({x: 10, y: 20, z: 30})}];\n        data.closed = false;\n      } else {\n        let defaultVal = zdogShape[prop];\n        data[prop] = defaultVal;\n      }\n    })\n\n    return { data, faces };\n\n  }\n\n\n  function addNewZdogShape(shapeClass, nodeId) {\n\n    let flattened = copyShapes();\n\n    //let shapeClass = (v === 'Sphere') ? 'Shape' : v;\n\n    let shapeDefaults = getDefaultValsForShapeProperties(zdogDefaultShapes, shapeClass);\n\n    let newshape = {\n      id: generateID(),\n      children: [],\n      open: true,\n      shapeClass: shapeClass,\n      data: shapeDefaults.data,\n      faces: shapeDefaults.faces\n    }\n\n    if (nodeId === \"canvasnode\") {\n\n      flattened.push(newshape);\n\n      // set selectedNodeId to newly added shape layer in tree\n      selectedNodeId[1]((flattened.length - 1).toString());\n\n    } else {\n      let posStrings = nodeId.split('_');\n      let posNums = posStrings.map((s) => Number(s));\n\n      let currentShape;\n\n      posNums.forEach((posNum, i) => {\n        if ((0 < i) && (i <= (posNums.length - 1))) {\n          currentShape = currentShape.children[posNum];\n        } else if (i === 0) {\n          currentShape = flattened[posNum];\n        }\n      })\n\n      currentShape.children.push(newshape);\n\n      // set selectedNodeId to newly added shape layer in tree\n      let childcount = currentShape.children.length;\n      selectedNodeId[1](nodeId + '_' + (childcount - 1));\n    }\n\n    addedShapes[1](flattened);\n\n  }\n\n  /* function getCode() {\n    console.log('getting code');\n    setOpen(true);\n  } */\n\n  console.log('selectedNodeId[0]: ' + selectedNodeId[0]);\n\n  useEffect(() => {\n    if (presets !== 'work_in_progress') {\n      console.log(`presets = '${presets}'`)\n      updateAllPresets();\n      setPresets('work_in_progress');\n    } else {\n      console.log(`presets = 'work_in_progress'`);\n    }\n  }, [presets]);\n\n\n  return (\n\n    <React.Fragment>\n\n      <AppBar elevation={0} position=\"fixed\" className={classes.bar}>\n        <Toolbar variant='dense' className={classes.toolbar}>\n          <Typography variant=\"h5\">\n            Zdog <span className={classes.purple}>UI</span>\n          </Typography>\n\n      {/*     <IconButton>\n            <CreateNewFolderIcon fontSize=\"small\" />\n          </IconButton> */}\n\n          <div>\n\n          {/* <IconButton>\n            <DeleteOutlinedIcon fontSize=\"small\" />\n          </IconButton>\n\n          <IconButton>\n            <AddIcon fontSize=\"small\" />\n          </IconButton> */}\n\n          {/* <IconButton className={classes.code} onClick={getCode} aria-label=\"source code\">\n            <CodeIcon fontSize=\"small\" />\n          </IconButton> */}\n\n          <IconButton className={classes.left} onClick={handleClickMore} aria-label=\"more\">\n            <MoreHorizIcon fontSize=\"small\" />\n          </IconButton>\n          <Menu\n            id=\"more-menu\"\n            anchorEl={anchorEl}\n            keepMounted\n            open={Boolean(anchorEl)}\n            onClose={handleCloseMore}\n          >\n            <MenuItem className={classes.smallFont} onClick={() => openInNewTab('https://github.com/oriane212/zdog-ui')} value=\"Zdog-UI on GitHub\">Zdog-UI on GitHub <OpenInNewIcon color='action' className={classes.left} fontSize=\"small\"/></MenuItem>\n            <MenuItem className={classes.smallFont} onClick={() => openInNewTab('https://zzz.dog/')} value=\"Zdog website\">Zdog website <OpenInNewIcon color='action' className={classes.left} fontSize=\"small\"/> </MenuItem>\n          </Menu>\n\n          </div>\n\n          {/* <div></div> */}\n\n          {/* <Button onClick={getCode} color=\"inherit\" startIcon={<CodeIcon />} aria-label=\"get code\" className={classes.getCode}>Get Code</Button> */}\n\n        </Toolbar>\n      </AppBar>\n\n      { open ? <SourceCodeDialog stateVars={stateVars} addedShapes={addedShapes} editorVisibility={[editorVisibility, setEditorVisibility]} open={[open, setOpen]} /> : ''}\n        \n\n      <main>\n\n        <IlloExplorer setPresets={setPresets} setOpen={setOpen} selectedNodeId={selectedNodeId} cursorFocus={cursorFocus} addNewZdogShape={addNewZdogShape} stateVars={stateVars} addedShapes={addedShapes}></IlloExplorer>\n        <Viewer shapes={addedShapes} stateVars={stateVars}></Viewer>\n        <Controls selectedNodeId={selectedNodeId} cursorFocus={cursorFocus} stateVars={stateVars} addedShapes={addedShapes}></Controls>\n      </main>\n\n    </React.Fragment>\n\n  );\n\n}\n\nexport default App;\n\n\n\n/* <AppBar position=\"static\" color=\"secondary\">\n          <Toolbar>\n            <Typography variant=\"h6\" >\n              Zdog UI\n            </Typography>\n              <IconButton edge=\"end\" color=\"inherit\" aria-label=\"get code\">\n              <CodeIcon />\n            </IconButton>\n          </Toolbar>\n        </AppBar>\n        */\n\n/*\n<header>\n<Typography variant=\"h6\">\nZdog UI\n</Typography>\n  <IconButton edge=\"end\" color=\"inherit\" aria-label=\"get code\">\n  <CodeIcon />\n</IconButton>\n</header>\n*/","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}