{"version":3,"sources":["generateID.js","components/RangeInput.js","components/Shape.js","components/Face.js","fixCamelCase.js","components/SingleParameterInput.js","components/ParameterSlider.js","components/RotateSliders.js","components/CanvasLayer.js","components/TranslateSliders.js","components/ShapePathPoint.js","components/PathSegment.js","components/Path.js","components/ShapeLayer.js","components/ShapeControls.js","components/Controls.js","components/Viewer.js","shapeProperties.js","createScript.js","components/SourceCodeDialog.js","components/IlloToolbar.js","components/AddShapeMenu.js","components/IlloExplorer.js","illoPresets.js","App.js","reportWebVitals.js","index.js"],"names":["generateID","numbers","code","i","charAt","Math","floor","random","length","console","log","RangeInput","props","className","Typography","id","label","value","Slider","min","max","step","onChange","e","React","Component","useStyles","makeStyles","theme","checkboxFace","display","marginTop","parameterInline","margin","inlineCheckbox","width","disabledlabel","fontSize","color","labelsm","Face","side","copyOfShape","updateShapes","cursorFocus","faceRefs","classes","propname","toUpperCase","slice","paramRef","useEffect","refocus","FormControl","FormControlLabel","control","Checkbox","checked","faces","size","type","data","inputref","disabled","fixCamelCase","str","caps","replaceLetter","letter","toLowerCase","newStr","replace","uc","parameter","lightBottomBorder","SingleParameterInput","addedShapes","shapes","setShapes","checkValueOnBlur","validSides","useState","open","setOpen","flattened","newshapearry","push","flat","copyShapes","spiUpdateShapes","property","target","selectionStart","isNaN","Number","includes","handleOpen","handleClose","handleChange","InputLabel","htmlFor","Input","inputRef","onBlur","sides","Select","onClose","onOpen","MenuItem","marginLeft","slider","marginBottom","ParameterSlider","marksArray","marks","newmarks","mark","undefined","sublabel","tau","Zdog","TAU","marks_rotate","parameterGroup","parameterSection","unit","RotateSliders","nodeId","rotateData","rotateSliders","forEach","axis","axisVal","round","PI","toFixed","v","checkbox","inlinecheckbox","inline_parameter","parameterSubGroup","parameterCheckbox","inlineParameterCheckbox","subparameter","myprimary","root","backgroundColor","addshape","height","add","li","paddingTop","paddingBottom","nested","body2","formControl","spacing","minWidth","smallFont","fontWeight","CanvasLayer","animateParameters","stateVars","canvas_w","setCanvas_w","canvas_h","setCanvas_h","zoom","setZoom","dragRotate","animate","rotate_x","rotate_y","rotate_z","spin_x","setSpin_x","spin_y","setSpin_y","spin_z","setSpin_z","easeIO","setEaseIO","animateSelection","setAnimateSelection","fallback","setFallback","animationOption","setAnimationOption","bgColor","setBgColor","checkCursorFocus","setFn","updateEaseIO","paramID","val","param","split","easeIO_copy","JSON","parse","stringify","Fragment","variant","x","name","y","z","cycleCount","power","Tooltip","mediumFont","title","multiline","maxRows","component","RadioGroup","Radio","labelId","TranslateSliders","marginRight","textField","ptBtn","pathpointHeader","pathpointContainer","ShapePathPoint","pathindex","segmentindex","emptyOrNegative","ppRefs","useRef","segment","path","Object","keys","baseid","pp","updatePathPoint","setfocus","set","pos","focusid","ppRef","current","focus","setSelectionRange","ppRefocus","FormHelperText","pathSegmentHeader","justifyContent","pathSegmentContainer","PathSegment","deleteSegmentBtnContainer","IconButton","onClick","flatpath","newpatharry","copyPath","splice","labelUI","sppArry","spp","pt","sectionHeader","alignItems","Path","anchorEl","setAnchorEl","addToPath","Vector","line","move","pts","arc","bezier","currentTarget","closed","segments","item","createPathSegments","Menu","keepMounted","Boolean","paddingLeft","delete","confirmDialog","padding","ShapeLayer","selectedNodeId","basicRefs","shapeRefs","currentShape","posNums","map","s","posNum","children","locateShapeInAddedShapesTree","controlType","splitElID","shapeProp","createColorControls","cylinderFrontFace","frontFace","backface","shapeClass","createBoxFaceControls","faceControls","faceComp","createShapeControls","spis","spi","splitID","rotate","translate","fill","ShapeControls","Controls","illo","Viewer","refZoom","refRotate_x","refRotate_y","refRotate_z","isRotating","refSpin_x","refSpin_y","refSpin_z","refAnimateSelection","refEaseIOx","refEaseIOy","refEaseIOz","refEaseIOcycleCount","refEaseIOpower","af","refAnimationOption","createChildShapes","parent","parentInstance","shape","addTo","createIllo","Illustration","element","setSize","face","shapeInstance","updateRenderGraph","ticker","rotateIllo","cancelAnimationFrame","progress","tween","easeInOut","requestAnimationFrame","style","cursor","shapeProperties","createScript","illoVars","shapesCopy","endString","scriptString","shapeCount","parentName","dataString","newShapeString","concat","invisible","visibility","container","snackbar","extraMarginTop","SourceCodeDialog","snackbarOpen","setSnackbarOpen","editorVisibility","setEditorVisibility","clipboardCopy","elID","text","document","getElementById","innerText","navigator","clipboard","writeText","then","setTimeout","codetagsHTML_canvas","codetagsHTML_script","snippet_canvas","CodeJar","hljs","highlightAll","updateCode","codetagsJS","jar","fixed","replaceAll","removeAllDoubleDashQuotes","toString","onUpdate","Dialog","maxWidth","Container","Snackbar","ContentProps","anchorOrigin","vertical","horizontal","autoHideDuration","message","IlloToolbar","setPresets","addNewZdogShape","confirmCreateNewDialogOpen","setConfirmCreateNewDialogOpen","handleCloseCreateNewDialog","Button","addbtn","itemAction","paddingRight","AddShapeMenu","anchor","checkParentExpanded","hovernodeid","handleShapeSelect","divider","overflowX","overflowY","window","innerHeight","flexy","selected","IlloExplorer","expanded","setExpanded","confirmDialogOpen","setConfirmDialogOpen","addMenuOpen","handleToggle","event","nodeIds","handleSelect","preventDefault","copyArray","a","newArray","handleDelete","pop","parentId","join","copied","handleAdd","nodeid","el","startingParentIds","createTree","childrenArray","parentnodeid","p","TreeItem","onLabelClick","onIconClick","toptreelevel","canvasItem","newArry","TreeView","defaultCollapseIcon","defaultExpandIcon","onNodeToggle","onNodeSelect","lastpos","parentNodeId","n","illoPresets","shapeLayers","zdogDefaultShapes","Group","Ellipse","Rect","Box","Hemisphere","RoundedRect","Polygon","Cone","Cylinder","Shape","bar","borderBottom","toolbar","purple","borderStyle","borderWidth","borderColor","left","App","presets","psets","updateAllPresets","selectedPresets","handleCloseMore","openInNewTab","url","AppBar","elevation","position","Toolbar","shapeDefaults","defaultShapes","zdogShape","props_shape","prop","defaultVal","getDefaultValsForShapeProperties","newshape","childcount","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f86142a6.chunk.js","sourcesContent":["export default function generateID() {\n    const length = 5;\n    //const letters_no_o = \"ABCDEFGHIJKLMNPQRSTUVWXYZ\";\n    const numbers = \"0123456789\";\n    //const alphanumeric = letters_no_o.concat(numbers);\n    let code = '';\n    for (let i = 0; i < length; i++) {\n        code += numbers.charAt(Math.floor(Math.random() * numbers.length));\n    }\n    console.log(code);\n    return code;\n}","import Slider from '@material-ui/core/Slider';\nimport Typography from '@material-ui/core/Typography';\n\nfunction RangeInput(props) {\n    function handle_onChange(e) {\n        console.log('range input changed');\n        props.onChange(e);\n    }\n\n    return (\n        <div className=\"parameter\">\n            <Typography id={props.id}>{props.label}= {props.value}</Typography>\n            <Slider value={props.value} min={props.min} max={props.max} step={props.step} onChange={handle_onChange} aria-labelledby={props.id}/>\n        </div>\n    );\n}\n\nexport default RangeInput;\n\n/*\n\n<label htmlFor={props.id}>{props.label}= {props.value}</label>\n            <input type=\"range\" id={props.id} name=\"parameter\" value={props.value} min={props.min} max={props.max} step={props.step} disabled={props.disabled} onChange={handle_onChange}/>\n\n            */","import React from 'react';\nimport generateID from '../generateID';\nimport RangeInput from './RangeInput';\n\nclass Shape extends React.Component {\n    constructor(props) {\n        super(props);\n        this.canvasMin = Math.min(parseInt(this.props.appstate.canvas_width), parseInt(this.props.appstate.canvas_height));\n        this.shapes = this.props.appstate.shapes;\n        this.shapedata = this.shapes[this.props.id];\n        this.paramToInput = {\n            'diameter': 'createInputRange'\n        }\n        this.ellipse = ['diameter', 'stroke', 'color'];\n        this.handle_onChange = this.handle_onChange.bind(this);\n        this.createRangeInput = this.createRangeInput.bind(this);\n        //this.createControlsForNewEllipse = this.createControlsForNewEllipse.bind(this);\n        this.createControls = this.createControls.bind(this);\n        this.createParam = this.createParam.bind(this);\n    }\n\n    handle_onChange(e) {\n        console.log('shape component');\n        this.props.onChange(e);\n    }\n\n    \n    createRangeInput(paramclass, paramvalue) {\n        return (\n            <RangeInput \n                key={generateID()}\n                id={`${paramclass}1`} \n                label={paramclass}\n                name=\"parameter\"\n                value={paramvalue}\n                min={0}\n                max={this.canvasMin}\n                step={1}\n                disabled={false}\n                onChange={this.props.onChange}\n            ></RangeInput>\n        )\n    }\n\n    createParam(paramclass, paramvalue) {\n        return this.createRangeInput(paramclass, paramvalue);\n        //this.paramToInput[paramclass]\n    }\n    \n    /*\n    createControlsForNewEllipse(shapeid) {\n        let diameter = this.createRangeInput(this.paramClasses['diameter']);\n        let stroke = this.createRangeInput(this.paramClasses['stroke']);\n        let section = (\n            <section className=\"controls_shape\">\n                {diameter, stroke}\n            </section>\n        )\n        return section;\n    }\n    */\n\n    createControls() {\n        let inputs = this.shapedata.params.map((param) => {\n            let paramclass = Object.keys(param)[0];\n            let paramvalue = param[paramclass];\n            console.log(paramclass, paramvalue);\n            let inputcomponent = this.createParam(paramclass, paramvalue);\n            return inputcomponent;\n        })\n        return inputs;\n    }\n\n    render() {\n\n        let inputs = this.createControls();\n\n        return (\n            <section className=\"controls_shape\">\n                {inputs}\n            </section>\n            /*\n            <section className=\"controls_shape\" id={this.props.data.id}>\n                <h3>Ellipse</h3>\n                <div className=\"parameter\">\n                  <label htmlFor=\"diameter1\">Diameter = </label>\n                  <span id=\"diameter1value\">100</span>\n                  <input type=\"range\" className=\"diameter\" id=\"diameter1\" name=\"parameter_shape1\" min=\"0\" max=\"240\" value=\"100\"\n                    step=\"1\" />\n                </div>\n                <div className=\"parameter\">\n                  <label htmlFor=\"stroke1\">Stroke = </label>\n                  <span id=\"stroke1value\">20</span>\n                  <input type=\"range\" className=\"stroke\" id=\"stroke1\" name=\"parameter_shape1\" min=\"0\" max=\"240\" value=\"20\" step=\"1\"\n                    list=\"tickmarks_stroke\" />\n                </div>\n                <div className=\"parameter\">\n                  <label htmlFor=\"color1\">Color = </label>\n                  <span id=\"color1value\">#663366</span>\n                  <input type=\"color\" className=\"color\" id=\"color1\" name=\"parameter_shape1\" value=\"#663366\" />\n                </div>\n              </section>\n              */\n        );\n    }\n    \n}\n\nexport default Shape;","import React, { useEffect } from 'react';\nimport '../zdogui.css';\nimport { FormControl, FormControlLabel, Checkbox, makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n\n    checkboxFace: {\n        'padding-bottom': 12,\n        display: 'inline-block',\n        marginTop: 4\n    },\n    parameterInline: {\n        display: 'inline-block',\n        margin: 12\n    },\n    inlineCheckbox: {\n        display: 'inline-block',\n        marginTop: 2,\n        width: 70\n    },\n    disabledlabel: {\n        fontSize: 'small',\n        color: 'darkgray'\n    },\n    labelsm: {\n        fontSize: 'small'\n    },\n}));\n\nfunction Face(props) {\n\n    const index = 0;\n\n    const side = props.side;\n    const copyOfShape = props.copyOfShape;\n\n    const updateShapes = props.updateShapes;\n\n    let cursorFocus = props.cursorFocus;\n\n    let faceRefs = props.faceRefs;\n\n    const classes = useStyles();\n\n    let propname = `${side}Face`;\n\n    let label = (side[0].toUpperCase() + side.slice(1));\n\n    let paramRef = faceRefs[propname];\n\n    useEffect(() => {\n        props.refocus(cursorFocus, faceRefs);\n    }, [])\n\n\n    return (\n        <div>\n\n            <FormControl className={classes.inlineCheckbox}>\n                <FormControlLabel\n                    label={label}\n                    control={<Checkbox checked={(copyOfShape.faces[propname] === true) ? true : false} onChange={(e) => updateShapes(e, 'checkbox_face', `${propname}_${index}`, '')} size=\"small\" color=\"#4c4c4c\" className={classes.checkboxFace} />}\n                />\n            </FormControl>\n\n            <FormControl className={classes.parameterInline}>\n                <input type=\"color\" id={`${propname}_` + index} value={(copyOfShape.faces[propname] === true) ? copyOfShape.data[propname] : copyOfShape.faces[propname]} onChange={(e) => updateShapes(e, 'color', `${propname}_${index}`, '')} inputref={paramRef} disabled={/* colorDisabled */(copyOfShape.faces[propname] !== true) ? true : false}></input>\n            </FormControl>\n        </div>\n    )\n}\n\nexport default Face;","export default function fixCamelCase(str, caps=true) {\n    \n    function replaceLetter(letter) {\n        let l = (caps) ? letter : letter.toLowerCase();\n        return (' ' + l);\n    }\n\n    let newStr = str.replace(/[A-Z]/g, replaceLetter);\n    \n    if (caps) {\n        let uc = newStr.charAt(0).toUpperCase();\n        newStr = uc + newStr.slice(1);\n    }\n    return newStr;\n}","import React, { useState} from 'react';\nimport '../zdogui.css';\nimport { FormControl, Input, InputLabel, makeStyles, MenuItem, Select } from '@material-ui/core';\nimport fixCamelCase from '../fixCamelCase';\n\nconst useStyles = makeStyles((theme) => ({\n    parameter: {\n        display: 'inline-flex',\n        margin: 12,\n        width: '40%',\n    },\n    lightBottomBorder: {\n        '&:before': {\n            'border-bottom': '1px solid rgba(0, 0, 0, 0.12)'\n        }\n    }\n}));\n\nfunction SingleParameterInput(props) {\n\n    const index = 0;\n    const copyOfShape = props.copyOfShape;\n\n    const parameter = props.parameter;\n\n    const label = fixCamelCase(parameter);\n\n    //const updateShapes = props.updateShapes;\n    const [shapes, setShapes] = props.addedShapes;\n\n    const checkValueOnBlur = props.checkValueOnBlur;\n\n    let cursorFocus = props.cursorFocus;\n\n    let validSides = useState(true);\n\n    //let cursorFocus = props.cursorFocus;\n\n    /* let shapeRefs = props.shapeRefs; */\n\n    let paramRef =  props.paramRef;\n\n    // State of Select menu for Ellipse quarters\n    const [open, setOpen] = useState(false);\n\n    function copyShapes() {\n        let newshapearry = [];\n        newshapearry.push(shapes);\n        let flattened = newshapearry.flat();\n        return flattened;\n    }\n\n    let flattened = copyShapes();\n\n    function spiUpdateShapes(e, property) {\n        if (property !== 'sides' && property !== 'quarters') {\n            copyOfShape.data[property] = e.target.value;\n            cursorFocus[1](\n                {\n                    'id': e.target.id,\n                    'cursorPos': e.target.selectionStart\n                }\n            );\n            setShapes(flattened);\n            //validSides[1](true);\n        } else if (property === 'quarters') {\n            copyOfShape.data[property] = e.target.value;\n            cursorFocus[1](\n                {\n                    'id': parameter + '_' + index,\n                    'cursorPos': 0\n                }\n            );\n            setShapes(flattened);\n        }\n        else if (property === 'sides') {\n            if (e.target.value === '0' || e.target.value.length < 1 || isNaN(Number(e.target.value)) || e.target.value.includes('-')) {\n                console.log('aaaa');\n                validSides[1](false);\n            } else {\n                console.log('bbbb');\n                validSides[1](true);\n                copyOfShape.data[property] = e.target.value;\n                cursorFocus[1](\n                    {\n                        'id': e.target.id,\n                        'cursorPos': e.target.selectionStart\n                    }\n                );\n                setShapes(flattened);\n            }\n        }\n\n\n        /* if (validSides[0]) {\n            setShapes(flattened);\n        } */\n    }\n\n    function sides(parameter) {\n        if (parameter === 'sides') {\n            validSides[1](true);\n        }\n    }\n\n    function handleOpen() {\n        setOpen(true);\n    }\n\n    function handleClose() {\n        setOpen(false);\n    }\n\n    function handleChange(e) {\n        spiUpdateShapes(e, 'quarters');\n    }\n\n    function createSPI() {\n        let spi = '';\n        if (parameter !== 'quarters') {\n            spi = (<FormControl className={classes.parameter}>\n                <InputLabel htmlFor={parameter + '_' + index}>{label}</InputLabel>\n                <Input className={classes.lightBottomBorder} inputRef={paramRef} id={parameter + '_' + index} value={(validSides[0]) ? copyOfShape.data[parameter] : ''} onBlur={(e) => {checkValueOnBlur(e, 'textinput', `${parameter}_${index}`, ''); sides(parameter);}} disabled={false} onChange={(e) => spiUpdateShapes(e, parameter)} />\n            </FormControl>);\n        } else {\n            spi = (<FormControl className={classes.parameter}>\n                <InputLabel htmlFor={parameter + '_' + index}>{label}</InputLabel>\n                <Select\n                  /* labelId=\"demo-controlled-open-select-label\" */\n                  className={classes.lightBottomBorder} \n                  id={parameter + '_' + index}\n                  open={open}\n                  onClose={handleClose}\n                  onOpen={handleOpen}\n                  value={copyOfShape.data[parameter]}\n                  label={label}\n                  onChange={handleChange}\n                  inputRef={paramRef}\n                >\n                  <MenuItem value={1}>1</MenuItem>\n                  <MenuItem value={2}>2</MenuItem>\n                  <MenuItem value={3}>3</MenuItem>\n                  <MenuItem value={4}>4</MenuItem>\n                </Select>\n              </FormControl>)\n        }\n        return spi;\n    }\n    \n\n    const classes = useStyles();\n\n    \n\n    return (\n\n        createSPI()\n\n    )\n\n}\n\nexport default SingleParameterInput;","import React from 'react';\nimport '../zdogui.css';\nimport { FormControl, Slider, makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n    parameter: {\n        display: 'block',\n        margin: 12,\n        marginLeft: 4\n    },\n    slider: {\n        marginBottom: 36,\n        display: 'block',\n        fontSize: 'small',\n        color: \"#4c4c4c\",\n        /* '> .MuiSlider-rail': {\n            opacity: 0.18\n        } */\n    },\n    label: {\n        fontSize: 'small',\n        'margin-bottom': 8,\n        marginTop: 24\n    }\n}));\n\nfunction ParameterSlider(props) {\n\n    const [id, label, value] = [props.id, props.label, props.value];\n\n    //const sublabel = props.sublabel;\n\n    const [min, max, step] = [props.min, props.max, props.step];\n\n    const onChange = props.onChange;\n\n    let marksArray;\n\n    // create marks if empty\n    if (props.marks.length < 2) {\n        console.log('INSIDE EMPTY MARKS')\n        let newmarks = [];\n        for (let i=min; i <= max; i++) {\n            let mark = { 'value': Number(i), 'label': `${i}`};\n            newmarks.push(mark);\n        }\n        console.log(newmarks);\n        marksArray = newmarks;\n    } else {\n        marksArray = props.marks;\n    }\n\n    const classes = useStyles();\n\n    return (\n        <FormControl className={classes.parameter}>\n            <p id={id + '_label'} className={classes.label}>{label} {props.sublabel !== undefined ? <span className='tinytext'>{props.sublabel}</span> : ''} </p>\n            <Slider className={classes.slider} id={id} value={value} min={min} max={max} step={step} marks={marksArray} onChange={onChange} aria-labelledby={id + '_label'} />\n        </FormControl>\n    )\n\n}\n\nexport default ParameterSlider;","import React from 'react';\nimport {makeStyles} from '@material-ui/core';\nimport '../zdogui.css';\nimport ParameterSlider from './ParameterSlider';\nimport Zdog from 'zdog';\n\nconst tau = Zdog.TAU;\n\nconst marks_rotate = [\n    {\n        value: 0,\n        label: '0°',\n    },\n    {\n        value: tau / 12,\n        label: '30°',\n    },\n    {\n        value: tau / 4,\n        label: '90°',\n    },\n    {\n        value: tau / 2,\n        label: '180°',\n    },\n    {\n        value: ((tau / 4) * 3),\n        label: '270°',\n    },\n    {\n        value: tau\n    },\n];\n\nconst useStyles = makeStyles((theme) => ({\n    parameterGroup: {\n        display: 'block',\n        margin: 12,\n        marginTop: 24,\n        fontSize: 'small'\n    },\n    parameterSection: {\n        display: 'block',\n        marginLeft: 12,\n        marginTop: 24,\n        marginBottom: 42,\n        fontSize: 'small'\n    },\n    label: {\n        fontSize: 'small',\n        'margin-bottom': 14,\n        marginTop: 24\n    },\n    unit: {\n        fontSize: 10,\n        marginLeft: 6,\n        color: '#626262'\n    }\n}));\n\nfunction RotateSliders(props) {\n\n    const classes = useStyles();\n\n    let updateShapes = props.updateShapes;\n\n    let nodeId = props.nodeId;\n    let rotateData = props.rotateData;\n\n    let axes = ['x', 'y', 'z'];\n    let rotateSliders = [];\n\n    axes.forEach((axis, i) => {\n        let id = `rotate_${axis}_0`;\n        let axisVal = (nodeId === 'canvasnode') ? rotateData[`rotate_${axis}`][0] : rotateData[axis];\n        let slider = (\n            <ParameterSlider\n                key={i}\n                id={id}\n                label={ <>{`${axis} = ${Math.round((axisVal) * (180 / Math.PI))}°`} <span className={classes.unit}>{`${axisVal.toFixed(2)} radians`}</span></>}\n                value={axisVal}\n                min={0} max={tau} step={tau / 360} marks={marks_rotate}\n                onChange={(nodeId === 'canvasnode') ? ((e, v) => rotateData[`rotate_${axis}`][1](v)) : ((e, v) => updateShapes(e, 'vector', id, v))}\n            />\n        )\n        rotateSliders.push(slider);\n    });\n\n    return (\n\n        <div className={classes.parameterSection}>\n                <p className={classes.label}>Rotate</p>\n                {rotateSliders}\n        </div>\n    )\n}\n\nexport default RotateSliders;","import { Checkbox, FormControl, FormControlLabel, TextField, Tooltip, Badge, Select, MenuItem, Input, InputLabel, makeStyles, Slider, Typography, FormLabel, RadioGroup, Radio } from '@material-ui/core';\nimport React from 'react';\nimport RotateSliders from './RotateSliders';\nimport ParameterSlider from './ParameterSlider';\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\nimport HelpIcon from '@material-ui/icons/Help';\n\nconst useStyles = makeStyles((theme) => ({\n    slider: {\n        width: 155,\n        display: 'block',\n        marginTop: 4,\n        marginBottom: 6,\n        marginLeft: 12,\n        color: '#626262'\n    },\n    checkbox: {\n        'padding-bottom': 10\n    },\n    inlinecheckbox: {\n        'padding-bottom': 10,\n        display: 'inline-block'\n    },\n    parameter: {\n        display: 'block',\n        margin: 12\n    },\n    inline_parameter: {\n        display: 'inline-flex',\n        margin: 12,\n        width: '40%'\n    },\n    parameterSubGroup: {\n        display: 'block',\n        margin: 12,\n        marginTop: 12,\n        fontSize: 'small'\n    },\n    parameterCheckbox: {\n        display: 'block',\n        'margin-left': 12,\n        'margin-top': 3,\n        'margin-bottom': 3\n    },\n    inlineParameterCheckbox: {\n        display: 'inline-block',\n        'margin-left': 12,\n        'margin-top': 3,\n        'margin-bottom': 3\n    },\n    subparameter: {\n        'margin-left': 38,\n        'margin-top': 3,\n        'margin-bottom': 3\n    },\n    myprimary: {\n        color: \"black\"\n    },\n    root: {\n        /* backgroundColor: \"#f1f1f1\", */\n        backgroundColor: \"#f9f9f9\",\n        fontSize: '0.9rem'\n    },\n    addshape: {\n        width: 140,\n        height: 32\n    },\n    add: {\n        backgroundColor: 'dodgerblue',\n        color: 'white'\n    },\n    li: {\n        paddingTop: 4,\n        paddingBottom: 4\n    },\n    nested: {\n        paddingTop: 4,\n        paddingBottom: 4\n    },\n    body2: {\n        fontSize: '0.9rem'\n    },\n    sublabel: {\n        fontSize: 'small',\n        'margin-bottom': 14,\n        marginTop: 8,\n        marginLeft: 8\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    smallFont: {\n        fontSize: 'small'\n    },\n    label: {\n        fontSize: 'small',\n        'margin-bottom': 14,\n        marginTop: 12,\n        fontWeight: 'bold'\n    },\n    lightBottomBorder: {\n        '&:before': {\n            'border-bottom': '1px solid rgba(0, 0, 0, 0.12)'\n        }\n    }\n}));\n\nfunction CanvasLayer(props) {\n\n    const stateVars = props.stateVars;\n    const [canvas_w, setCanvas_w] = [stateVars.canvas_w[0], stateVars.canvas_w[1]];\n    const [canvas_h, setCanvas_h] = [stateVars.canvas_h[0], stateVars.canvas_h[1]];\n    const [zoom, setZoom] = [stateVars.zoom[0], stateVars.zoom[1]];\n    const [dragRotate, setDragRotate] = [stateVars.dragRotate[0], stateVars.dragRotate[1]];\n    const [animate, setAnimate] = [stateVars.animate[0], stateVars.animate[1]];\n    const [rotate_x, setRotate_x] = [stateVars.rotate_x[0], stateVars.rotate_x[1]];\n    const [rotate_y, setRotate_y] = [stateVars.rotate_y[0], stateVars.rotate_y[1]];\n    const [rotate_z, setRotate_z] = [stateVars.rotate_z[0], stateVars.rotate_z[1]];\n    const [spin_x, setSpin_x] = [stateVars.spin_x[0], stateVars.spin_x[1]];\n    const [spin_y, setSpin_y] = [stateVars.spin_y[0], stateVars.spin_y[1]];\n    const [spin_z, setSpin_z] = [stateVars.spin_z[0], stateVars.spin_z[1]];\n    const [easeIO, setEaseIO] = [stateVars.easeIO[0], stateVars.easeIO[1]];\n    const [animateSelection, setAnimateSelection] = [stateVars.animateSelection[0], stateVars.animateSelection[1]];\n    const [fallback, setFallback] = [stateVars.fallback[0], stateVars.fallback[1]];\n\n    const [animationOption, setAnimationOption] = [stateVars.animationOption[0], stateVars.animationOption[1]];\n\n    const [bgColor, setBgColor] = [stateVars.bgColor[0], stateVars.bgColor[1]];\n\n    let cursorFocus = props.cursorFocus;\n    let checkCursorFocus = props.checkCursorFocus;\n\n    const classes = useStyles();\n\n    const marks_cycleCount = [\n        {\n            value: 150,\n            label: 'short',\n        },\n        {\n            value: 450,\n            label: 'long',\n        }\n    ];\n\n    function checkValueOnBlur(e, setFn) {\n            if (isNaN(e.target.value) || (e.target.value.includes('-')) || e.target.value.length === 0) {\n                e.target.value = 0;\n                setFn(e.target.value);\n            } else if (e.target.value[0] === '0' && e.target.value.length > 1) {\n                if (e.target.value[1] !== '.' || isNaN(e.target.value[2]) ) {\n                    e.target.value = 0;\n                    setFn(e.target.value);\n                }\n            } else if (e.target.value[e.target.value.length-1] === '.') {\n                e.target.value = e.target.value.slice(0, -1);\n                setFn(e.target.value);\n            }\n    }\n\n    function updateEaseIO(paramID, val) {\n        let splitID = paramID.split('_');\n        let param = splitID[1];\n\n        let easeIO_copy = JSON.parse(JSON.stringify(easeIO));\n        easeIO_copy[param] = val;\n\n        setEaseIO(easeIO_copy);\n    }\n\n    function handleAnimateSelect(e) {\n        setAnimateSelection(e.target.value);\n    }\n\n    let animateParameters;\n\n    if (animateSelection === 'spin') {\n        animateParameters = (\n            <React.Fragment>\n                <FormControl className={classes.slider}>\n                    <Typography variant=\"body2\" id=\"spin_x_label\">x = {((spin_x) * (180 / Math.PI)).toFixed(1)} <span className='tinytext'>deg/rerender</span></Typography>\n                    <Slider className={classes.slider} id=\"spin_x\" value={spin_x} min={0} max={1} step={0.01} onChange={(e, v) => { setSpin_x(v); checkCursorFocus(); }} aria-labelledby=\"spin_x_label\" /* disabled={!animate} */ />\n                </FormControl>\n\n                <FormControl className={classes.slider}>\n                    <Typography variant=\"body2\" id=\"spin_y_label\">y = {((spin_y) * (180 / Math.PI)).toFixed(1)} <span className='tinytext'>deg/rerender</span></Typography>\n                    <Slider className={classes.slider} id=\"spin_y\" value={spin_y} min={0} max={1} step={0.01} onChange={(e, v) => { setSpin_y(v); checkCursorFocus(); }} aria-labelledby=\"spin_y_label\" /* disabled={!animate} */ />\n                </FormControl>\n\n                <FormControl className={classes.slider}>\n                    <Typography variant=\"body2\" id=\"spin_z_label\">z = {((spin_z) * (180 / Math.PI)).toFixed(1)} <span className='tinytext'>deg/rerender</span></Typography>\n                    <Slider className={classes.slider} id=\"spin_z\" value={spin_z} min={0} max={1} step={0.01} onChange={(e, v) => { setSpin_z(v); checkCursorFocus(); }} aria-labelledby=\"spin_z_label\" /* disabled={!animate} */ />\n                </FormControl>\n            </React.Fragment>\n        )\n    } else if (animateSelection === 'ease') {\n        animateParameters = (\n            <React.Fragment>\n                <div>\n                    <FormControl className={classes.inlineParameterCheckbox}>\n                        <FormControlLabel\n                            label=\"x\"\n                            control={<Checkbox className={classes.checkbox} checked={easeIO.x} onChange={() => { updateEaseIO(\"easeIO_x\", !easeIO.x); checkCursorFocus(); }} size=\"small\" name=\"easeIO_x\" id=\"easeIO_x\" color=\"#4c4c4c\" />}\n                        />\n                    </FormControl>\n\n                    <FormControl className={classes.inlineParameterCheckbox}>\n                        <FormControlLabel\n                            label=\"y\"\n                            control={<Checkbox className={classes.checkbox} checked={easeIO.y} onChange={() => { updateEaseIO(\"easeIO_y\", !easeIO.y); checkCursorFocus(); }} size=\"small\" name=\"easeIO_y\" id=\"easeIO_y\" color=\"#4c4c4c\" />}\n                        />\n                    </FormControl>\n\n                    <FormControl className={classes.inlineParameterCheckbox}>\n                        <FormControlLabel\n                            label=\"z\"\n                            control={<Checkbox className={classes.checkbox} checked={easeIO.z} onChange={() => { updateEaseIO(\"easeIO_z\", !easeIO.z); checkCursorFocus(); }} size=\"small\" name=\"easeIO_z\" id=\"easeIO_z\" color=\"#4c4c4c\" />}\n                        />\n                    </FormControl>\n                </div>\n\n                <div className={classes.parameterSubGroup}>\n                    <ParameterSlider\n                        id='easeIO_cycleCount'\n                        label='Cycle'\n                        sublabel={`count = ${easeIO.cycleCount}`}\n                        value={easeIO.cycleCount}\n                        min={100} max={500} step={50} marks={marks_cycleCount}\n                        onChange={(e, v) => { updateEaseIO(\"easeIO_cycleCount\", v); checkCursorFocus(); }}\n                    />\n\n                    <ParameterSlider\n                        id='easeIO_power'\n                        label='Power'\n                        value={easeIO.power}\n                        min={2} max={5} step={1} marks={['']}\n                        onChange={(e, v) => { updateEaseIO(\"easeIO_power\", v); checkCursorFocus(); }}\n                    />\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    return (\n        <div>\n\n            <p className={classes.label + ' ' + classes.parameter}>Canvas</p>\n\n            <FormControl className={classes.parameter}>\n                <label htmlFor='bgColor' className={classes.labelsm}>Background</label>\n                <input type=\"color\" id='bgColor' value={bgColor} \n                onChange={(e) => {setBgColor(e.target.value); checkCursorFocus();}} /* inputref={basicRefs['color']} */></input>\n            </FormControl>\n\n            <FormControl className={classes.parameter}>\n                <InputLabel htmlFor=\"fallback\">Fallback Text {<Tooltip className={classes.mediumFont} title={<Typography variant=\"body2\">Alternative text added inside the canvas tags. Useful for assistive technology users (eg. screen readers) or browsers which don't support canvas rendering.</Typography>}><HelpIcon fontSize='inherit' /></Tooltip>}</InputLabel>\n\n                <Input\n                    className={classes.lightBottomBorder}\n                    id=\"fallback\"\n                    multiline\n                    maxRows={8}\n                    value={fallback}\n                    onChange={(e) => { setFallback(e.target.value); checkCursorFocus(); }}\n                />\n            </FormControl>\n\n            <FormControl className={classes.inline_parameter}>\n                <InputLabel htmlFor=\"canvas_w\">Width</InputLabel>\n                <Input className={classes.lightBottomBorder} id=\"canvas_w\" value={canvas_w} disabled={false} onChange={\n                    (e) => { setCanvas_w(e.target.value); checkCursorFocus(); }\n                } onBlur={ (e) => {checkValueOnBlur(e, setCanvas_w)}} />\n            </FormControl>\n\n            <FormControl className={classes.inline_parameter}>\n                <InputLabel htmlFor=\"canvas_h\">Height</InputLabel>\n                <Input className={classes.lightBottomBorder} id=\"canvas_h\" value={canvas_h} disabled={false} onChange={(e) => { setCanvas_h(e.target.value); checkCursorFocus(); }} onBlur={ (e) => {checkValueOnBlur(e, setCanvas_h)}} />\n            </FormControl>\n\n            <FormControl className={classes.inline_parameter}>\n                <InputLabel htmlFor=\"zoom\">Zoom</InputLabel>\n                <Input className={classes.lightBottomBorder} id=\"zoom\" value={zoom} onChange={(e) => { setZoom(e.target.value); checkCursorFocus(); }} onBlur={ (e) => {checkValueOnBlur(e, setZoom)}} />\n            </FormControl>\n\n\n            <RotateSliders nodeId={'canvasnode'} rotateData={stateVars} updateShapes='' />\n\n            <FormControl component=\"fieldset\" className={classes.parameterCheckbox}>\n                {/* <FormLabel component=\"legend\">Animation</FormLabel> */}\n                <p className={classes.label}>Animation</p>\n                <RadioGroup\n                    aria-label=\"animation\"\n                    name=\"animation\"\n                    value={animationOption}\n                    onChange={(e) => setAnimationOption(e.target.value)}\n                >\n                    <FormControlLabel\n                        value=\"none\"\n                        label=\"None\"\n                        control={<Radio size=\"small\" color=\"#4c4c4c\" />}\n                    />\n                    <FormControlLabel\n                        value=\"dragRotate\"\n                        label=\"Drag Rotate\"\n                        control={<Radio size=\"small\" color=\"#4c4c4c\" />}\n                    />\n                    <FormControlLabel\n                        value=\"animate\"\n                        label=\"Animate\"\n                        control={<Radio size=\"small\" color=\"#4c4c4c\" />}\n                    />\n                </RadioGroup>\n            </FormControl>\n\n\n            {/*    <FormControl className={classes.parameterCheckbox}>\n                <FormControlLabel\n                    label=\"Drag Rotate\"\n                    control={<Checkbox className={classes.checkbox} checked={dragRotate} onChange={() => { setDragRotate(!dragRotate); checkCursorFocus(); }} size=\"small\" name=\"dragRotate\" id=\"dragRotate\" color=\"primary\" />}\n                />\n            </FormControl>\n\n\n            <FormControl className={classes.parameterCheckbox}>\n                <FormControlLabel\n                    label=\"Animate\"\n                    control={<Checkbox className={classes.checkbox} checked={animate} onChange={() => { setAnimate(!animate); checkCursorFocus(); }} size=\"small\" name=\"animate\" id=\"animate\" color=\"primary\" />}\n                />\n            </FormControl> */}\n\n\n            <div className={classes.parameterSubGroup}>\n\n                <FormControl className={classes.formControl} disabled={animationOption !== 'animate'}>\n                    <Select\n                        labelId=\"animateSelection_label\"\n                        id=\"animateSelection\"\n                        value={animateSelection}\n                        onChange={handleAnimateSelect}\n                        className={classes.smallFont}\n                    >\n                        <MenuItem value='spin' className={classes.smallFont}>Continuous spin</MenuItem>\n                        <MenuItem value='ease' className={classes.smallFont}>Ease In/Out</MenuItem>\n                    </Select>\n                </FormControl>\n\n                {(animationOption === 'animate') ? animateParameters : ''}\n\n            </div>\n\n        </div>\n    )\n\n\n}\n\nexport default CanvasLayer;","import React from 'react';\nimport { makeStyles } from '@material-ui/core';\nimport '../zdogui.css';\nimport ParameterSlider from './ParameterSlider';\nimport Zdog from 'zdog';\n\nconst tau = Zdog.TAU;\n\nconst useStyles = makeStyles((theme) => ({\n    parameterGroup: {\n        display: 'block',\n        margin: 12,\n        marginTop: 24,\n        fontSize: 'small'\n    },\n    label: {\n        fontSize: 'small',\n        'margin-bottom': 14,\n        marginTop: 24\n    }\n}));\n\nfunction TranslateSliders(props) {\n\n    const classes = useStyles();\n\n    let updateShapes = props.updateShapes;\n\n    let [x_limit, y_limit] = [Math.round(props.canvasDim[0] / 2), Math.round(props.canvasDim[1] / 2)];\n    let z_limit = Math.max(x_limit, y_limit);\n\n    const limits = [x_limit, y_limit, z_limit];\n\n    let nodeId = props.nodeId;\n    let translateData = props.translateData;\n\n    let axes = ['x', 'y', 'z'];\n    let translateSliders = [];\n\n    axes.forEach((axis, i) => {\n        let limit = limits[i];\n        let id = `translate_${axis}_0`;\n        let axisVal = (nodeId === 'canvasnode') ? translateData[`translate_${axis}`][0] : translateData[axis];\n        let slider = (\n            <ParameterSlider\n                key={i}\n                id={id}\n                label={`${axis} = ${Math.round(axisVal)}`}\n                value={axisVal}\n                min={0 - limit} max={limit} step={1} marks={\n                    [{\n                        value: 0 - limit,\n                        label: `-${limit}`,\n                    },\n                    {\n                        value: 0,\n                        label: '0',\n                    },\n                    {\n                        value: limit,\n                        label: `${limit}`,\n                    }]\n                }\n                onChange={(nodeId === 'canvasnode') ? ((e, v) => translateData[`translate_${axis}`][1](v)) : ((e, v) => updateShapes(e, 'vector', id, v))}\n            />\n        )\n        translateSliders.push(slider);\n    });\n\n    return (\n\n        <div className={classes.parameterGroup}>\n            <p className={classes.label}>Translate</p>\n            {translateSliders}\n        </div>\n    )\n}\n\nexport default TranslateSliders;","import React, { useEffect, useRef, useState } from 'react';\nimport { FormControl, FormHelperText, IconButton, Input, InputLabel, makeStyles } from '@material-ui/core';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport '../zdogui.css';\n\nconst useStyles = makeStyles((theme) => ({\n    parameter: {\n        display: 'block',\n        margin: 12,\n        fontSize: 'small'\n    },\n    label: {\n        fontSize: 'small',\n        'margin-bottom': 14,\n        /* marginTop: 24, */\n        marginRight: 14\n    },\n    textField: {\n        width: 55,\n        marginBottom: 8\n    },\n    ptBtn: {\n        width: 36,\n        height: 36\n    },\n    pathpointHeader: {\n        display: 'flex',\n        'align-items': 'center',\n        height: 44,\n        marginTop: 10\n    },\n    pathpointContainer: {\n        '&:hover .deletePtBtnContainer': {\n            display: 'inline-flex',\n        }\n    },\n    lightBottomBorder: {\n        '&:before': {\n            'border-bottom': '1px solid rgba(0, 0, 0, 0.12)'\n        }\n    }\n}));\n\nexport default function ShapePathPoint(props) {\n\n    const classes = useStyles();\n\n    let pathindex = props.pathindex;\n    let segmentindex = props.segmentindex;\n    let copyOfShape = props.copyOfShape;\n    let addedShapes = props.addedShapes;\n    let flattened = props.flattened;\n\n    let cursorFocus = props.cursorFocus;\n    let emptyOrNegative = props.emptyOrNegative;\n\n    const ppRefs = {\n        'x' : useRef(),\n        'y' : useRef(),\n        'z' : useRef()\n    }\n\n    let segment = copyOfShape.data.path[pathindex];\n    let label = Object.keys(segment)[0];\n\n    let baseid = `path_${pathindex}_${label}_${segmentindex}`;\n\n    let pp = segmentindex === '-' ? segment[label] : segment[label][segmentindex];\n\n    function createHelperText() {\n        const helpers = {\n            'line' : ['point'],\n            'move' : ['start'],\n            'arc' : ['corner', 'end'],\n            'bezier' : ['control 1', 'control 2', 'end']\n        }\n        let i = (segmentindex === '-') ? 0 : segmentindex;\n        let helpertext = helpers[label][i];\n        return helpertext;\n    }\n\n    function ppRefocus() {\n        let pos = cursorFocus[0]['cursorPos'];\n        let focusid = cursorFocus[0]['id'];\n        if (focusid.includes(baseid)) {\n            let axis = focusid[focusid.length - 1];\n            console.log('AXIS = ' + axis);\n            let ppRef = ppRefs[axis];\n            ppRef.current.focus();\n            if (pos !== 0) {\n                ppRef.current.setSelectionRange(pos, pos);\n            }\n        }\n    }\n\n    function checkValueOnBlur(e, axis) {\n        if (e.target.value === '-' || e.target.value.length === 0) {\n            e.target.value = 0;\n            updatePathPoint(e, axis, false);\n        }\n    }\n    \n    function updatePathPoint(e, axis, setfocus=true) {\n\n        let val;\n\n        if (e.target.value.length === 1 && e.target.value === '-') {\n            /* emptyOrNegative.current = ['-', axis]; */\n            emptyOrNegative[1](['-', axis, e.target.id]);\n            val = 0; // not shown to user\n        } else if (e.target.value.length === 0){\n            /* emptyOrNegative.current = ['', axis]; */\n            emptyOrNegative[1](['', axis, e.target.id]);\n            val = 0; // not shown to user\n        } else if (e.target.value[e.target.value.length-1] === '.') {\n            if (e.target.value[0] === '.') {\n                e.target.value = '0' + e.target.value;\n                emptyOrNegative[1]([e.target.value, axis, e.target.id]);\n                val = Number(e.target.value);\n            } else if (e.target.value[0] === '-' && e.target.value[1] === '.') {\n                e.target.value = '-0' + e.target.value.slice(1);\n                emptyOrNegative[1]([e.target.value, axis, e.target.id]);\n                val = Number(e.target.value);\n            } else {\n                emptyOrNegative[1]([e.target.value, axis, e.target.id]);\n                val = Number(e.target.value.slice(0, -1));\n            }\n        } else {\n            val = Number(e.target.value);\n            /* emptyOrNegative.current = [false, false]; */\n            emptyOrNegative[1]([false, false, '']);\n        }\n\n        \n        if (axis === 'x') {\n            pp.set({ x: val, y: pp.y, z: pp.z });\n        } else if (axis === 'y') {\n            pp.set({ x: pp.x, y: val, z: pp.z });\n        } else {\n            pp.set({ x: pp.x, y: pp.y, z: val });\n        }\n\n        if (setfocus) {\n            cursorFocus[1](\n                {\n                    'id': e.target.id,\n                    'cursorPos': e.target.selectionStart\n                }\n            );\n        } else {\n            cursorFocus[1](\n                {\n                    'id': '',\n                    'cursorPos': 0\n                }\n            );\n        }\n\n        //if (emptyOrNegative.current === [false, false]) {\n        if (emptyOrNegative[0] === [false, false, '']) {\n            addedShapes[1](flattened);\n        }\n\n    }\n\n    useEffect(() => {\n        ppRefocus();\n    }, []);\n\n    return (\n\n        <div>\n            \n            <FormControl className={classes.textField}>\n                <InputLabel htmlFor={baseid + '_x'}>x</InputLabel>\n                <Input className={classes.lightBottomBorder} inputRef={ppRefs['x']} id={baseid + '_x'}\n                    value={(emptyOrNegative[0][2] === `${baseid}_x` && emptyOrNegative[0][1] === 'x') ? emptyOrNegative[0][0] : pp.x}\n                    onBlur={(e) => checkValueOnBlur(e, 'x')}\n                    disabled={false} onChange={(e) => updatePathPoint(e, 'x')} />\n                {label === 'line' ? '' : <FormHelperText>{createHelperText()}</FormHelperText>}\n            </FormControl>\n\n            <FormControl className={classes.textField}>\n                <InputLabel htmlFor={baseid + '_y'}>y</InputLabel>\n                <Input className={classes.lightBottomBorder} inputRef={ppRefs['y']} id={baseid + '_y'} value={(emptyOrNegative[0][2] === `${baseid}_y` && emptyOrNegative[0][1] === 'y') ? emptyOrNegative[0][0] : pp.y} onBlur={(e) => checkValueOnBlur(e, 'y')} disabled={false} onChange={(e) => updatePathPoint(e, 'y')} />\n            </FormControl>\n\n            <FormControl className={classes.textField}>\n                <InputLabel htmlFor={baseid + '_z'}>z</InputLabel>\n                <Input className={classes.lightBottomBorder} inputRef={ppRefs['z']} id={baseid + '_z'} value={(emptyOrNegative[0][2] === `${baseid}_z` && emptyOrNegative[0][1] === 'z') ? emptyOrNegative[0][0] : pp.z} onBlur={(e) => checkValueOnBlur(e, 'z')} disabled={false} onChange={(e) => updatePathPoint(e, 'z')} />\n            </FormControl>\n\n        </div>\n\n    )\n\n}","import React, { useEffect, useRef, useState } from 'react';\nimport { FormControl, IconButton, Input, InputLabel, makeStyles } from '@material-ui/core';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport '../zdogui.css';\nimport ShapePathPoint from './ShapePathPoint';\nimport generateID from '../generateID';\n\nconst useStyles = makeStyles((theme) => ({\n    parameter: {\n        display: 'block',\n        margin: 12,\n        fontSize: 'small'\n    },\n    label: {\n        fontSize: 'small',\n        'margin-bottom': 14,\n        /* marginTop: 24, */\n        marginRight: 14\n    },\n    textField: {\n        width: 55,\n    },\n    ptBtn: {\n        width: 28,\n        height: 28\n    },\n    pathSegmentHeader: {\n        display: 'flex',\n        'align-items': 'center',\n        justifyContent: 'space-between',\n        height: 44,\n        marginTop: 10,\n        width: 170\n    },\n    pathSegmentContainer: {\n        '&:hover .deleteSegmentBtnContainer': {\n            display: 'inline-flex',\n        }\n    }\n}));\n\nexport default function PathSegment(props) {\n\n    const classes = useStyles();\n\n    let pathindex = props.pathindex;\n    let copyOfShape = props.copyOfShape;\n    let addedShapes = props.addedShapes;\n    let flattened = props.flattened;\n\n    let cursorFocus = props.cursorFocus;\n    let emptyOrNegative = props.emptyOrNegative;\n\n    let segment = copyOfShape.data.path[pathindex];\n    let label = Object.keys(segment)[0];\n\n    function copyPath() {\n        let newpatharry = [];\n        newpatharry.push(copyOfShape.data.path);\n        let flatpath = newpatharry.flat();\n        return flatpath;\n    }\n\n    function deletePathSegment() {\n        let flatpath = copyPath();\n        flatpath.splice(pathindex, 1);\n        copyOfShape.data.path = flatpath;\n        addedShapes[1](flattened);\n    }\n\n    let deleteSegmentBtnContainer = (<div className='deleteSegmentBtnContainer'>\n    <IconButton className={classes.ptBtn} onClick={deletePathSegment} aria-label=\"delete path segment\">\n                <DeleteOutlinedIcon fontSize=\"small\" />\n            </IconButton>\n    </div>)\n\n    \n    let cap = label.charAt(0).toUpperCase();\n    let sliced = label.slice(1);\n    let labelUI = cap + sliced;\n\n    if (pathindex === 0) {\n        labelUI = 'Start';\n    }\n\n    let sppArry = [];\n    if (label === 'line' || label === 'move') {\n        let spp = <ShapePathPoint pathindex={pathindex} segmentindex='-' copyOfShape={copyOfShape} addedShapes={addedShapes} flattened={flattened} cursorFocus={cursorFocus} emptyOrNegative={emptyOrNegative} />\n        sppArry.push(spp);\n    } else {\n        segment[label].forEach((pt, i) => {\n            let spp = <ShapePathPoint key={generateID()} pathindex={pathindex} segmentindex={i} copyOfShape={copyOfShape} addedShapes={addedShapes} flattened={flattened} cursorFocus={cursorFocus} emptyOrNegative={emptyOrNegative} />\n            sppArry.push(spp);\n        })\n    }\n\n    return (\n        <div className={classes.pathSegmentContainer}>\n\n            <div className={classes.pathSegmentHeader}>\n                <p className={classes.label}>{labelUI}</p>\n                { (pathindex === 0 ? '' : deleteSegmentBtnContainer) } \n            </div>\n            \n            {sppArry}\n\n        </div>\n    )\n\n}","import React, { useState } from 'react';\nimport { Checkbox, FormControl, FormControlLabel, IconButton, makeStyles, Menu, MenuItem } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport '../zdogui.css';\nimport PathSegment from './PathSegment';\n\nimport Zdog from 'zdog';\nimport generateID from '../generateID';\n\nconst useStyles = makeStyles((theme) => ({\n    parameterSection: {\n        display: 'block',\n        marginLeft: 12,\n        marginTop: 24,\n        marginBottom: 42,\n        fontSize: 'small'\n    },\n    sectionHeader: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-between'\n    },\n    label: {\n        fontSize: 'small',\n        width: 85\n        /* 'margin-bottom': 14,\n        marginTop: 24 */\n    },\n    smallFont: {\n        fontSize: '0.8rem'\n    },\n    checkbox: {\n        'padding-bottom': 10\n    },\n    parameterCheckbox: {\n        /* display: 'block', */\n        /* 'margin-left': 12, */\n        'margin-top': 3,\n        'margin-bottom': 3\n    }\n}));\n\nexport default function Path(props) {\n\n    const classes = useStyles();\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    let emptyOrNegative = useState([false, false]); // [value, axis]\n\n    let checkCursorFocus = props.checkCursorFocus;\n    let cursorFocus = props.cursorFocus;\n    let copyOfShape = props.copyOfShape;\n    let addedShapes = props.addedShapes;\n    let flattened = props.flattened;\n\n    function handleAddToPathClick(e) {\n        console.log('add to path');\n        setAnchorEl(e.currentTarget);\n        checkCursorFocus();\n    }\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    function copyPath() {\n        let newpatharry = [];\n        newpatharry.push(copyOfShape.data.path);\n        let flatpath = newpatharry.flat();\n        return flatpath;\n    }\n\n    function addToPath(v) {\n        \n        handleClose();\n\n        // copy current path array\n        let flatpath = copyPath();\n\n        if (v === 'line') {\n            let pt = new Zdog.Vector({});\n            flatpath.push({line: pt});\n        } else if (v === 'move') {\n            let pt = new Zdog.Vector({});\n            flatpath.push({move: pt});\n        } else if (v === 'arc') {\n            let pts = [ new Zdog.Vector({}), new Zdog.Vector({}) ];\n            flatpath.push({arc: pts});\n        } else if (v === 'bezier') {\n            let pts = [ new Zdog.Vector({}), new Zdog.Vector({}), new Zdog.Vector({}) ];\n            flatpath.push({bezier: pts});\n        }\n\n        copyOfShape.data.path = flatpath;\n        addedShapes[1](flattened);\n\n        console.log(v);\n    }\n\n    function updateShapes_checkbox(property) {\n        copyOfShape.data[property] = !copyOfShape.data[property];\n            cursorFocus[1]({\n                'id': '',\n                'cursorPos': 0\n            });\n        addedShapes[1](flattened);\n    }\n\n    function createPathSegments() {\n        let segments = [];\n        copyOfShape.data.path.forEach((item, i) => {\n            let segment = (<PathSegment key={generateID()} pathindex={i} copyOfShape={copyOfShape} addedShapes={addedShapes} flattened={flattened} cursorFocus={cursorFocus} emptyOrNegative={emptyOrNegative} />);\n            segments.push(segment);\n        })\n        return segments;\n    }\n\n    \n    /* function createPathPointFields(patharry) {\n        let pathpointFields = [];\n        patharry.forEach((item, i) => {\n            if (i !== 0 && Object.keys(item).includes('line')) {\n                console.log('includes is true');\n                let sPP = (<ShapePathPoint emptyOrNegative={emptyOrNegative} checkCursorFocus={props.checkCursorFocus} key={generateID()} pathindex={i} pathSegment='line' segmentIndex= '-' label=\"point\" cursorFocus={cursorFocus} copyOfShape={copyOfShape} addedShapes={addedShapes} flattened={flattened} />);\n                pathpointFields.push(sPP);\n            } else {\n                console.log('includes is false');\n            }\n        })\n        return pathpointFields;\n    } */\n\n    //let ppFields = createPathPointFields(copyOfShape.data.path);\n\n    return (\n        <div className={classes.parameterSection}>\n            <div className={classes.sectionHeader}>\n                <p className={classes.label}><b>Path</b></p>\n\n                <IconButton id='addToPathBtn' onClick={handleAddToPathClick}>\n                    <AddIcon fontSize=\"small\" />\n                </IconButton>\n\n                <FormControl className={classes.parameterCheckbox}>\n                    <FormControlLabel\n                        label=\"Closed\"\n                        control={<Checkbox /* inputRef={basicRefs['closed']} */ checked={copyOfShape.data.closed} onChange={(e) => updateShapes_checkbox('closed')} size=\"small\" id={'closed_'/*  + index */} color=\"#4c4c4c\" /* className={classes.checkbox} */ />}\n                    />\n                </FormControl>\n            </div>\n            \n            {/* <div id=\"pathpoints\">\n                <ShapePathPoint emptyOrNegative={emptyOrNegative} checkCursorFocus={props.checkCursorFocus} pathindex={0} pathSegment='line' segmentIndex= '-' label='start point' cursorFocus={cursorFocus} copyOfShape={copyOfShape} addedShapes={addedShapes} flattened={flattened} />\n                {copyOfShape.data.path.length > 1 ? createPathPointFields(copyOfShape.data.path) : ''}\n            </div> */}\n\n            {createPathSegments()}\n            \n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                <MenuItem className={classes.smallFont} onClick={() => addToPath('line')} value=\"line\">Line</MenuItem>\n                <MenuItem disabled={copyOfShape.data.path.length === 1} className={classes.smallFont} onClick={() => addToPath('move')} value=\"move\">Move</MenuItem>\n                <MenuItem className={classes.smallFont} onClick={() => addToPath('arc')} value=\"arc\">Arc</MenuItem>\n                <MenuItem className={classes.smallFont} onClick={() => addToPath('bezier')} value=\"bezier\">Bezier</MenuItem>\n            </Menu>\n        </div >\n    )\n}","import React, { useRef, useEffect, useState } from 'react';\nimport '../zdogui.css';\nimport { FormControl, FormControlLabel, Input, InputLabel, Checkbox, makeStyles, Typography, Slider, InputAdornment } from '@material-ui/core';\n\nimport Zdog from 'zdog';\nimport Face from './Face';\nimport SingleParameterInput from './SingleParameterInput';\nimport ParameterSlider from './ParameterSlider';\nimport fixCamelCase from '../fixCamelCase';\nimport CanvasLayer from './CanvasLayer';\nimport RotateSliders from './RotateSliders';\nimport TranslateSliders from './TranslateSliders';\nimport Path from './Path';\n\n/* const tau = Zdog.TAU; */\n\nconst useStyles = makeStyles((theme) => ({\n    checkbox: {\n        'padding-bottom': 12\n    },\n    parameter: {\n        display: 'block',\n        margin: 12,\n        fontSize: 'small'\n    },\n    parameterInline: {\n        display: 'inline-block',\n        margin: 12\n    },\n    parameterGroup: {\n        display: 'block',\n        margin: 12,\n        marginTop: 24,\n        fontSize: 'small'\n    },\n    parameterCheckbox: {\n        display: 'block',\n        'margin-left': 12,\n        'margin-top': 3,\n        'margin-bottom': 3\n    },\n    subparameter: {\n        'margin-left': 32,\n        'margin-top': 3,\n        'margin-bottom': 3\n    },\n    nested: {\n        paddingLeft: theme.spacing(4),\n    },\n    '.MuiTypography-body1': {\n        fontSize: '0.5rem'\n    },\n    label: {\n        fontSize: 'small',\n        'margin-bottom': 14,\n        marginTop: 24\n    },\n    labelsm: {\n        fontSize: 'small',\n        display: 'inline-block',\n        width: 84\n    },\n    textField: {\n        width: 55,\n    },\n    delete: {\n        margin: 16,\n        color: 'red'\n    },\n    myprimary: {\n        color: \"black\"\n    },\n    confirmDialog: {\n        padding: 40\n    },\n    li: {\n        paddingTop: 4,\n        paddingBottom: 4\n    },\n    slider: {\n        marginBottom: 36,\n        marginLeft: 2,\n        display: 'block',\n        fontSize: 'small'\n    },\n    checkbox: {\n        'padding-bottom': 10\n    },\n    inlineCheckbox: {\n        display: 'inline-block',\n        marginTop: 2,\n        width: 70\n    },\n    checkboxFace: {\n        'padding-bottom': 12,\n        display: 'inline-block',\n        marginTop: 4\n    },\n    disabledlabel: {\n        fontSize: 'small',\n        color: 'darkgray'\n    },\n    unit: {\n        fontSize: 'small'\n    },\n    lightBottomBorder: {\n        '&:before': {\n            'border-bottom': '1px solid rgba(0, 0, 0, 0.12)'\n        }\n    }\n}));\n\nfunction ShapeLayer(props) {\n\n    let cursorFocus = props.cursorFocus;\n\n    console.log('cursorFocus = ', cursorFocus);\n\n    const index = 0;\n    const selectedNodeId = props.selectedNodeId;\n\n    //const shape = props.shape;\n    const [shapes, setShapes] = props.addedShapes;\n\n    const [confirmDialogOpen, setConfirmDialogOpen] = useState(false);\n\n    /* rules for checkValueOnBlur depend on specific property and what Zdog API accepts, not type of input (ie., single, vector) \n    \n    conditions:\n    - empty\n    - decimal ('.', '0.', '1.', '..')\n    - negative\n\n    also rules for valid inputs before onBlur - what error/warning does user see?\n    - negative\n    - decimal\n    - NaN\n\n    */\n\n    const basicRefs = {\n        \"translate_x\": useRef(),\n        \"translate_y\": useRef(),\n        \"translate_z\": useRef(),\n        \"fill\": useRef(),\n        \"color\": useRef(),\n        \"backface\": useRef(),\n        /* \"closed\": useRef(), */\n    }\n\n    // properties for VectorParameterInputs\n    // translate x, y, z (move from basicRefs)\n    // scale x, y, z (add)\n\n    // properties for SingleParameterInputs\n    const shapeRefs = {\n        \"width\": useRef(),\n        \"height\": useRef(),\n        \"depth\": useRef(),\n        \"diameter\": useRef(),\n        \"length\": useRef(),\n        \"radius\": useRef(),\n        \"sides\": useRef(),\n        \"cornerRadius\": useRef(),\n        \"quarters\": useRef(), // need to create menu with option 1 to 4\n        \"stroke\": useRef()\n    }\n\n    /* const shapeRefs = { */\n    /*  \"width\": useRef(),\n     \"height\": useRef(),\n     \"depth\": useRef(),\n     \"diameter\": useRef(),\n     \"length\": useRef(), */\n\n    /* \"radius\": useRef(), */\n\n    /* \"path\": useRef(), */\n    //}\n\n    const faceRefs = {\n        \"frontFace\": useRef(),\n        \"rearFace\": useRef(),\n        \"topFace\": useRef(),\n        \"bottomFace\": useRef(),\n        \"leftFace\": useRef(),\n        \"rightFace\": useRef(),\n    }\n\n    const classes = useStyles();\n\n    function copyShapes() {\n        let newshapearry = [];\n        newshapearry.push(shapes);\n        let flattened = newshapearry.flat();\n        return flattened;\n    }\n\n    let flattened = copyShapes();\n\n    function locateShapeInAddedShapesTree(flattened) {\n\n        let posStrings = selectedNodeId[0].split('_');\n        let posNums = posStrings.map((s) => Number(s));\n\n        let currentShape;\n\n        posNums.forEach((posNum, i) => {\n            if ((0 < i) && (i <= (posNums.length - 1))) {\n                currentShape = currentShape.children[posNum];\n            } else if (i === 0) {\n                currentShape = flattened[posNum];\n            }\n        })\n\n        return currentShape;\n    }\n\n    const copyOfShape = (selectedNodeId[0] !== 'canvasnode') ? locateShapeInAddedShapesTree(flattened) : '';\n\n\n    const handleClick = () => {\n        let flattened = copyShapes();\n        flattened[index].open = !flattened[index].open;\n        setShapes(flattened);\n    };\n\n    function handleDelete() {\n        setConfirmDialogOpen(true);\n    }\n\n    function handleConfirm() {\n        let flattened = copyShapes();\n        flattened.splice(index, 1);\n        setShapes(flattened);\n        handleClose();\n    }\n\n    function handleClose() {\n        setConfirmDialogOpen(false);\n    }\n\n    let shapeParameters = [];\n\n    let emptyOrNegative = useRef([false, false]); // [value, axis]\n\n    function updateShapes(e, controlType, id = '', v = '') {\n\n        let splitElID = id.split('_');\n        let property = splitElID[0];\n        let axis = splitElID[1];\n\n        // vector vs non-vector\n        if (controlType === 'vector') {\n\n            let val;\n\n            if (property === 'translate') {\n                if (e.target.value.length === 1 && e.target.value === '-') {\n                    emptyOrNegative.current = ['-', axis];\n                    val = 0; // not shown to user\n                } else if (e.target.value.length === 0) {\n                    emptyOrNegative.current = ['', axis];\n                    val = 0; // not shown to user\n                } else if (e.target.value[e.target.value.length - 1] === '.') {\n                    emptyOrNegative.current = [e.target.value, axis];\n                    val = Number(e.target.value.slice(0, -1));\n                }\n                else {\n                    val = Number(e.target.value);\n                    emptyOrNegative.current = [false, false];\n                }\n\n            } else if (property === 'rotate') {\n                val = Number(v);\n            }\n\n            let shapeProp = copyOfShape.data[property];\n\n            if (axis === 'x') {\n                shapeProp.set({ x: val, y: shapeProp.y, z: shapeProp.z });\n            } else if (axis === 'y') {\n                shapeProp.set({ x: shapeProp.x, y: val, z: shapeProp.z });\n            } else {\n                shapeProp.set({ x: shapeProp.x, y: shapeProp.y, z: val });\n            }\n\n            cursorFocus[1](\n                {\n                    'id': id,\n                    'cursorPos': e.target.selectionStart\n                }\n            );\n\n        } else if (controlType === 'checkbox_face') {\n\n            if (e.target.checked) {\n                copyOfShape.data[property] = copyOfShape.faces[property];\n                copyOfShape.faces[property] = true;\n            } else {\n                copyOfShape.faces[property] = copyOfShape.data[property];\n                copyOfShape.data[property] = false;\n            }\n\n            cursorFocus[1]({\n                'id': '',\n                'cursorPos': 0\n            });\n\n        } else {\n\n            if (controlType === 'slider') {\n\n                copyOfShape.data[property] = v;\n\n                cursorFocus[1]({\n                    'id': '',\n                    'cursorPos': 0\n                });\n\n            } else {\n\n                if (controlType === 'checkbox') {\n\n                    copyOfShape.data[property] = !copyOfShape.data[property];\n                    cursorFocus[1]({\n                        'id': '',\n                        'cursorPos': 0\n                    });\n                } else if (controlType === 'textinput') {\n\n                    //if (property !== 'sides' || (property === 'sides' && e.target.value.length > 0)) {\n                        copyOfShape.data[property] = e.target.value;\n                        cursorFocus[1](\n                            {\n                                'id': e.target.id,\n                                'cursorPos': e.target.selectionStart\n                            }\n                        );\n                    //} \n                    \n                    /* else {\n                        validSides.current = false;\n                    } */\n\n                    \n                } else if (controlType === 'color') {\n\n                    copyOfShape.data[property] = e.target.value;\n                    cursorFocus[1]({\n                        'id': '',\n                        'cursorPos': 0\n                    });\n                }\n\n            }\n\n        }\n\n        if (emptyOrNegative.current === [false, false]) {\n            setShapes(flattened);\n        }\n\n\n    }\n\n    function createColorControls() {\n\n        let cylinderFrontFace = (\n            <FormControl className={classes.parameter}>\n                <label htmlFor={'frontFace_' + index} className={classes.labelsm}>Front Face</label>\n                <input type=\"color\" id={'frontFace_' + index} value={copyOfShape.data.frontFace} onChange={(e) => updateShapes(e, 'color', `frontFace_${index}`, '')} inputref={faceRefs['frontFace']}></input>\n            </FormControl>\n        )\n\n        let colorControls = (\n            <React.Fragment>\n                <FormControl className={classes.parameter}>\n                    <label htmlFor={'color_' + index} className={classes.labelsm}>Color</label>\n                    <input type=\"color\" id={'color_' + index} value={copyOfShape.data.color} onChange={(e) => updateShapes(e, 'color', `color_${index}`, '')} inputref={basicRefs['color']}></input>\n                </FormControl>\n                <FormControl className={classes.parameter}>\n                    <label htmlFor={'backface_' + index} className={classes.labelsm}>Back Face</label>\n                    <input type=\"color\" id={'backface_' + index} value={copyOfShape.data.backface} onChange={(e) => updateShapes(e, 'color', `backface_${index}`, '')} inputref={basicRefs['backface']}></input>\n                </FormControl>\n                {(copyOfShape.shapeClass === 'Cylinder') ? cylinderFrontFace : ''}\n            </React.Fragment>\n        );\n\n        return colorControls;\n    }\n\n\n    /* if (selectedNodeId[0] !== 'canvasnode') {\n        createControls();\n        colorControls = createColorControls();\n    } */\n\n    function createBoxFaceControls() {\n        let faceControls = [];\n        Object.keys(faceRefs).forEach((property) => {\n            let side = property.split('F')[0];\n            let faceComp = <Face side={side} copyOfShape={copyOfShape} updateShapes={updateShapes} cursorFocus={cursorFocus} refocus={refocus} faceRefs={faceRefs} />\n            faceControls.push(faceComp);\n        })\n\n        let faceContainer = (\n            <div className={classes.parameterGroup}>\n                <p className={classes.label}>Faces</p>\n                {faceControls}\n            </div>\n        );\n\n        return faceContainer;\n    }\n\n    function createPath() {\n        let closed = (\n            {/* <FormControl className={classes.parameterCheckbox}>\n                <FormControlLabel\n                    label=\"Closed\"\n                    control={<Checkbox inputRef={basicRefs['closed']} checked={copyOfShape.data.closed} onChange={(e) => updateShapes(e, 'checkbox', `closed_${index}`, '')} size=\"small\" id={'closed_' + index} color=\"#4c4c4c\" className={classes.checkbox} />}\n                />\n            </FormControl> */}\n            );\n        let path = <Path checkCursorFocus={props.checkCursorFocus} cursorFocus={cursorFocus} copyOfShape={copyOfShape} addedShapes={props.addedShapes} flattened={flattened} />\n\n        return path;\n    }\n\n    function createShapeControls() {\n        let spis = [];\n        Object.keys(shapeRefs).forEach((property) => {\n            if (copyOfShape.data[property] !== undefined) {\n                let spi = <SingleParameterInput cursorFocus={cursorFocus} checkValueOnBlur={checkValueOnBlur} parameter={property} copyOfShape={copyOfShape} addedShapes={props.addedShapes} /* updateShapes={updateShapes} */ paramRef={shapeRefs[property]} />;\n                spis.push(spi);\n            }\n        })\n        let container = <> {spis} </>;\n        return container;\n    }\n\n    function refocus(cursorFocus, shapeRefs) {\n        if (cursorFocus[0]['id'] !== '' && !cursorFocus[0]['id'].includes('path')) {\n\n            let splitID = cursorFocus[0]['id'].split('_');\n            console.log(splitID);\n\n            let property;\n\n            if (splitID.length === 3) {\n                console.log('equal to 3');\n                property = `${splitID[0]}_${splitID[1]}`;\n            } else {\n                property = `${splitID[0]}`;\n            }\n\n            let pos = cursorFocus[0]['cursorPos'];\n\n\n            let paramRef = (shapeRefs[property] !== undefined) ? shapeRefs[property] : basicRefs[property];\n\n            if (paramRef !== undefined) {\n                if (paramRef.current !== undefined && paramRef.current !== null) {\n                    paramRef.current.focus();\n                    if (pos !== 0) {\n                        paramRef.current.setSelectionRange(pos, pos);\n                    }\n                }\n            }\n        }\n    }\n\n    function checkValueOnBlur(e, type, id, v) {\n        if (type === 'textinput') {\n            if (isNaN(e.target.value) || (e.target.value.includes('-')) || e.target.value.length === 0) {\n                id.includes('sides_') ? e.target.value = 3 : e.target.value = 0;\n                updateShapes(e, type, id, v);\n            } else if (e.target.value[0] === '0' && e.target.value.length > 1) {\n                if (e.target.value[1] !== '.' || isNaN(e.target.value[2])) {\n                    e.target.value = 0;\n                    updateShapes(e, type, id, v);\n                } else if (e.target.value[e.target.value.length - 1] === '.') {\n                    e.target.value = e.target.value.slice(0, -1);\n                    updateShapes(e, type, id, v);\n                }\n            }\n        } else if (e.target.value === '-' || e.target.value.length === 0) {\n            e.target.value = 0;\n            updateShapes(e, type, id, v);\n        } else if (e.target.value[e.target.value.length - 1] === '.') {\n            e.target.value = e.target.value.slice(0, -1);\n            updateShapes(e, type, id, v);\n        }\n    }\n\n\n    function renderLayerControls() {\n        if (selectedNodeId[0] === 'canvasnode') {\n            return (\n                <CanvasLayer checkCursorFocus={props.checkCursorFocus} cursorFocus={cursorFocus} stateVars={props.stateVars} updateShapes={updateShapes}></CanvasLayer>\n            )\n        } else {\n            return (\n\n                <div>\n\n                    <RotateSliders nodeId={selectedNodeId[0]} rotateData={copyOfShape.data.rotate} updateShapes={updateShapes} />\n\n                    <div className={classes.parameter}>\n                        <p className={classes.label}>Translate</p>\n\n                        <FormControl className={classes.textField}>\n                            <InputLabel htmlFor={'translate_x_' + index}>x</InputLabel>\n                            <Input className={classes.lightBottomBorder} inputRef={basicRefs['translate_x']} id={'translate_x_' + index}\n                                value={emptyOrNegative.current[1] === 'x' ? emptyOrNegative.current[0] : copyOfShape.data.translate.x}\n                                onBlur={(e) => checkValueOnBlur(e, 'vector', `translate_x_${index}`, '')}\n                                disabled={false} onChange={(e) => updateShapes(e, 'vector', `translate_x_${index}`, '')} />\n                        </FormControl>\n\n                        <FormControl className={classes.textField}>\n                            <InputLabel htmlFor={'translate_y_' + index}>y</InputLabel>\n                            <Input className={classes.lightBottomBorder} inputRef={basicRefs['translate_y']} id={'translate_y_' + index} value={emptyOrNegative.current[1] === 'y' ? emptyOrNegative.current[0] : copyOfShape.data.translate.y} onBlur={(e) => checkValueOnBlur(e, 'vector', `translate_y_${index}`, '')} disabled={false} onChange={(e) => updateShapes(e, 'vector', `translate_y_${index}`, '')} />\n                        </FormControl>\n\n                        <FormControl className={classes.textField}>\n                            <InputLabel htmlFor={'translate_z_' + index}>z</InputLabel>\n                            <Input className={classes.lightBottomBorder} inputRef={basicRefs['translate_z']} id={'translate_z_' + index} value={emptyOrNegative.current[1] === 'z' ? emptyOrNegative.current[0] : copyOfShape.data.translate.z} onBlur={(e) => checkValueOnBlur(e, 'vector', `translate_z_${index}`, '')} disabled={false} onChange={(e) => updateShapes(e, 'vector', `translate_z_${index}`, '')} />\n                        </FormControl>\n                    </div>\n\n\n                    {createShapeControls()}\n\n                    \n\n\n                    {/* {(copyOfShape.shapeClass !== 'Group') ? (\n                        <FormControl className={classes.parameter}>\n                            <InputLabel htmlFor={'stroke_' + index}>Stroke</InputLabel>\n                            <Input inputRef={basicRefs['stroke']} id={'stroke_' + index} value={copyOfShape.data.stroke} onBlur={(e) => checkValueOnBlur(e, 'textinput', `stroke_${index}`, '')} disabled={false} onChange={(e) => { updateShapes(e, 'textinput', `stroke_${index}`, ''); console.log(e.target.selectionStart) }} endAdornment={<InputAdornment position=\"end\"><p className={classes.unit}>px</p></InputAdornment>} />\n                        </FormControl>\n                    ) : ''} */}\n\n\n                    {/*    {shapeSpecificControls} */}\n\n\n                    {(copyOfShape.shapeClass !== 'Group') ? (\n                        <FormControl className={classes.parameterCheckbox}>\n                            <FormControlLabel\n                                label=\"Fill\"\n                                control={<Checkbox inputRef={basicRefs['fill']} checked={copyOfShape.data.fill} onChange={(e) => updateShapes(e, 'checkbox', `fill_${index}`, '')} size=\"small\" /* name={'fill_' + index} */ id={'fill_' + index} color=\"#4c4c4c\" className={classes.checkbox} />}\n                            />\n                        </FormControl>\n                    ) : ''}\n\n                    {(copyOfShape.shapeClass !== 'Box' && copyOfShape.shapeClass !== 'Group') ? createColorControls() : ''}\n\n                    {(copyOfShape.shapeClass === 'Shape') ? createPath() : ''}\n\n                    {(copyOfShape.shapeClass === 'Box') ? createBoxFaceControls() : ''}\n\n\n\n                </div>\n\n\n            )\n        }\n    }\n\n\n    useEffect(() => {\n        refocus(cursorFocus, shapeRefs);\n    }, []);\n\n    return (\n        <React.Fragment>\n            {renderLayerControls()}\n        </React.Fragment>\n    )\n}\n\nexport default ShapeLayer;\n\n/* TO FIX:\n       x all open after each update to shapes - needs to remember which were open and closed\n       .. no input refocus\n           x shapelayer input still in focus while interacting with canvas inputs (eg. after typing once in the canvas width field, it jumps back to whatever shapelayer input you last updated)\n           x refocus to string index or character where cursor was last\n           x negative numbers and zeros\n           x color picker issue: can no longer drag to update\n\n       x rm Material UI List click animation\n       .. input styles\n\n       - safari: webpage reload on color picker (??)\n   */\n\n/* TO ADD:\n    .. other shape properties\n    .. additional specific shape properties\n\n    features\n    x remove a layer\n    - edit layer name\n    - undo last change?\n\n    minor\n    .. replace stars with icons that match shapeclass?\n*/","import React, { useState, useEffect, useRef } from 'react';\nimport Shape from './Shape';\nimport { Button, FormControl, Input, IconButton, makeStyles } from '@material-ui/core';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport List from '@material-ui/core/List';\nimport AddIcon from '@material-ui/icons/Add';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport generateID from '../generateID';\n// import Ellipse from './Ellipse';\nimport ShapeLayer from './ShapeLayer';\n\n\nconst useStyles = makeStyles((theme) => ({\n    slider: {\n        width: 200\n    },\n    checkbox: {\n        'padding-bottom': 12\n    },\n    parameter: {\n        display: 'block',\n        margin: 16\n    },\n    subparameter: {\n        'margin-left': 32,\n        'margin-top': 3,\n        'margin-bottom': 3\n    },\n    root: {\n        backgroundColor: \"#f1f1f1\"\n    }\n}));\n\nfunction ShapeControls(props) {\n\n    /* let inputRef1 = useRef();\n    let inputRef2 = useRef();\n\n    let inputNum = useRef(0); */\n\n    /* const shapeLayers = {\n        'Ellipse': (<Ellipse />)\n    } */\n\n    //const [selectShapeValue, setSelectShapeValue] = useState('Ellipse');\n\n    const addedShapes = props.addedShapes;\n    const [shapes, setShapes] = [addedShapes[0], addedShapes[1]];\n\n    const classes = useStyles();\n\n    /* function copyShapes() {\n        let newshapearry = [];\n        newshapearry.push(shapes);\n        let flattened = newshapearry.flat();\n        return flattened;\n    } */\n\n    /* function handle_onChange(shape, index) {\n        let flattened = copyShapes();\n        flattened[index] = shape;\n        setShapes(flattened);\n    } */\n\n    /*\n    function handle_onAdd(e) {\n        //if (selectShapeValue === 'Ellipse') {\n            let newshape = {\n                //shapeid: 0,\n                shapeClass: selectShapeValue,\n                //params: shapeparams[selectShapeValue]\n                params: []\n            }\n            let flattened = copyShapes();\n            flattened.push(newshape);\n            setShapes(flattened);\n        //}\n    }\n    */\n\n    /*   function handleTest(e) {\n        \n          let [parameter, shapeindex] = e.target.id.split('_');\n  \n          if (parameter === 'diameter') {\n              inputNum.current = 1;\n          } else {\n              inputNum.current = 2;\n          }\n  \n          console.log(e.target);\n  \n          let flattened = copyShapes();\n          flattened[shapeindex].data[parameter] = e.target.value;\n  \n          setShapes(flattened);\n      } */\n\n\n    /* function refocus(ref) {\n        ref.current.focus();\n    }\n */\n\n    let shapeLayers = [];\n    if (shapes.length > 0) {\n        shapeLayers = shapes.map((shape, i) => {\n\n            return (\n                \n                <ShapeLayer cursorFocus={props.cursorFocus} key={generateID()} index={i} shape={shape} addedShapes={addedShapes} />\n\n\n                /*  <ShapeLayer key={generateID()} index={i} shape={shape} addedShapes={addedShapes}></ShapeLayer> */\n\n            )\n            /*\n            if (shape.shapeClass === 'Ellipse') {\n                return (\n                    <Ellipse key={generateID()} index={i} shape={shape} stateShapes={stateShapes} onChange={handle_onChange}></Ellipse>\n                )\n            }*/\n            /*\n            return (\n                <Shape key={generateID()} id={shape.shapeid} appstate={this.props.appstate} onChange={this.handle_onChange}></Shape>\n            )\n            */\n        })\n    }\n\n    /* function handle_onAdd() {\n        props.addNewZdogShape(selectShapeValue);\n    } */\n\n    /* useEffect(() => {\n\n        if (shapes.length > 0) {\n            //console.log(inputRef);\n            //refocus(uiEls[refIndex[0]]);\n            if (inputNum.current === 1) {\n                refocus(inputRef1);\n                //inputRefs[1].current.focus();\n            } else if (inputNum.current === 2) {\n                refocus(inputRef2);\n                //inputRefs[2].current.focus();\n            }\n        }\n\n\n    }, [shapes]); */\n\n    return (\n        <section className=\"controls_shape\">\n\n            {/* <header>\n                <FormControl>\n                    <InputLabel id=\"new-shape-label\">\n                        Shape\n                        </InputLabel>\n                    <Select value={selectShapeValue} onChange={(e) => setSelectShapeValue(e.target.value)}>\n                        <MenuItem value=\"Ellipse\">Ellipse</MenuItem>\n                        <MenuItem value=\"Rect\">Rect</MenuItem>\n                    </Select>\n                </FormControl>\n                \n                <div className=\"btnContainer\">\n                    <IconButton onClick={handle_onAdd} aria-label=\"add\">\n                        <AddIcon color=\"primary\" fontSize=\"small\" />\n                    </IconButton>\n                </div>\n            </header> */}\n\n            <div className=\"controlsContainer\">\n                <List component=\"div\" aria-labelledby=\"nested-list-subheader\"\n                    /* subheader={\n                        <ListSubheader component=\"div\" id=\"nested-list-subheader\">\n                            Shapes\n                        </ListSubheader>\n                    }  */className={classes.root}>\n                    {shapeLayers}\n                </List>\n\n            </div>\n\n        </section>\n    );\n\n\n}\n\nexport default ShapeControls;\n\n/*\n\n<Button onClick={handle_onAdd} color=\"primary\" startIcon={<AddIcon />} aria-label=\"add shape\">Add</Button>\n\n\n<select name=\"selectShape\" id=\"selectShape\" onChange={this.handle_selectShape}>\n                        <option value=\"\">New shape</option>\n                        <option value=\"Ellipse\">Ellipse</option>\n                    </select>\n                    */\n//<button id=\"addShapeBtn\" onClick={this.handle_onAdd}>Add</button>\n//<Button color=\"primary\" onClick={this.handle_onAdd} startIcon={<AddIcon />}>Add Shape</Button>\n\n/*\n<MenuItem value=\"Rectangle\">Rectangle</MenuItem>\n                        <MenuItem value=\"Triangle\">Triangle</MenuItem>\n                        */\n\n\n/* (el) => inputRefs[1].current = el */","import React, { useEffect, useState } from 'react';\nimport '../zdogui.css';\nimport { Button, ButtonGroup, Collapse, createMuiTheme, FormControl, FormControlLabel, IconButton, Input, InputLabel, List, ListItem, ListItemText, ListSubheader, makeStyles, MenuItem, Select } from '@material-ui/core';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Slider from '@material-ui/core/Slider';\nimport Typography from '@material-ui/core/Typography';\nimport ShapeControls from './ShapeControls';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport AddIcon from '@material-ui/icons/Add';\nimport CanvasLayer from './CanvasLayer';\nimport ShapeLayer from './ShapeLayer';\n\n/* const themeBody2 = createMuiTheme({\n    props: {\n      MuiTypography: {\n        variantMapping: {\n          body2: 'span'\n        },\n      },\n    },\n  }); */\n\n\nconst useStyles = makeStyles((theme) => ({\n    slider: {\n        width: 155\n    },\n    checkbox: {\n        'padding-bottom': 10\n    },\n    parameter: {\n        display: 'block',\n        margin: 12\n    },\n    parameterCheckbox: {\n        display: 'block',\n        'margin-left': 12,\n        'margin-top': 3,\n        'margin-bottom': 3\n    },\n    subparameter: {\n        'margin-left': 38,\n        'margin-top': 3,\n        'margin-bottom': 3\n    },\n    myprimary: {\n        color: \"black\"\n    },\n    root: {\n        /* backgroundColor: \"#f1f1f1\", */\n        backgroundColor: \"#f9f9f9\",\n        fontSize: '0.9rem'\n    },\n    addshape: {\n        width: 140,\n        height: 32\n    },\n    add: {\n        backgroundColor: 'dodgerblue',\n        color: 'white'\n    },\n    li: {\n        paddingTop: 4,\n        paddingBottom: 4\n    },\n    nested: {\n        paddingTop: 4,\n        paddingBottom: 4\n    },\n    body2: {\n        fontSize: '0.9rem'\n    }\n}));\n\nfunction Controls(props) {\n\n    const stateVars = props.stateVars;\n\n    //const [shapes, setShapes] = [stateVars.shapes[0], stateVars.shapes[1]];\n\n    const [canvasLayerOpen, setCanvasLayerOpen] = useState(true);\n\n    const [selectShapeValue, setSelectShapeValue] = useState('Ellipse');\n\n    let cursorFocus = props.cursorFocus;\n\n    const classes = useStyles();\n\n    function handle_onAdd() {\n        props.addNewZdogShape(selectShapeValue);\n        checkCursorFocus();\n    }\n\n    function checkCursorFocus() {\n        console.log('inside cursor check');\n        if (cursorFocus[0]['id'] !== '') {\n            cursorFocus[1]({\n                'id': '',\n                'cursorPos': 0\n              });\n            console.log('cursorFocus reset');\n        }\n    }\n\n    /* function renderLayerControls() {\n\n        if (props.selectedNodeId[0] === 'canvasnode') {\n            return (\n                <CanvasLayer checkCursorFocus={checkCursorFocus} cursorFocus={cursorFocus} stateVars={stateVars}></CanvasLayer>\n            )\n        } else {\n            return (\n                <ShapeLayer selectedNodeId={props.selectedNodeId} addedShapes={props.addedShapes} checkCursorFocus={checkCursorFocus} cursorFocus={cursorFocus} stateVars={stateVars}></ShapeLayer>\n            )\n        }\n    } */\n\n\n    useEffect(() => {\n        checkCursorFocus();\n    }, [props.selectedNodeId[0]]);\n\n\n    return (\n\n        <section className=\"controls\">\n\n            {/* <div className=\"controlsContainer\" id=\"addShapeHeader\">\n            <header>\n                <ButtonGroup>\n                <Select color=\"primary\" className={classes.addshape} value={selectShapeValue} onChange={(e) => {setSelectShapeValue(e.target.value); checkCursorFocus()}}>\n                        <MenuItem value=\"Ellipse\">Ellipse</MenuItem>\n                        <MenuItem value=\"Rect\">Rect</MenuItem>\n                    </Select>\n                    <Button id=\"add\" className={classes.add} onClick={handle_onAdd} aria-label=\"add\">\n                        <AddIcon fontSize=\"small\" />\n                    </Button>\n                </ButtonGroup>\n                \n            </header>\n            </div> */}\n\n            <section className=\"controls_illo\">\n                <div className=\"controlsContainer\">\n\n                    {/* <List component=\"div\" aria-labelledby=\"nested-list-subheader-canvas\" className={classes.root}>\n                        <ListItem className={classes.li}>\n                            <ListItemText primary=\"Canvas\" />\n                            {canvasLayerOpen ?\n                                <IconButton onClick={() => setCanvasLayerOpen(!canvasLayerOpen)} className={classes.myprimary} aria-label=\"Expand less\"><ExpandLess /></IconButton>\n                                :\n                                <IconButton onClick={() => setCanvasLayerOpen(!canvasLayerOpen)} className={classes.myprimary} aria-label=\"Expand more\"><ExpandMore /></IconButton>\n                            }\n                        </ListItem>\n\n                        <Collapse in={canvasLayerOpen} timeout=\"auto\" unmountOnExit>\n                            <List component=\"div\" disablePadding>\n\n                                <ListItem className={classes.nested}> */}\n                                \n                    {/* {renderLayerControls()} */}\n                    <ShapeLayer selectedNodeId={props.selectedNodeId} addedShapes={props.addedShapes} checkCursorFocus={checkCursorFocus} cursorFocus={cursorFocus} stateVars={stateVars}></ShapeLayer>\n\n                            {/*     </ListItem>\n\n                            </List>\n                        </Collapse>\n\n\n\n                    </List> */}\n\n                </div>\n\n            </section>\n                \n        </section>\n\n    )\n\n}\n\n/*\n{(props.addedShapes[0].length > 0) ? <ShapeControls cursorFocus={cursorFocus} addNewZdogShape={props.addNewZdogShape} addedShapes={props.addedShapes}></ShapeControls> : ''}\n*/\n\nexport default Controls;","import React, { useEffect, useState, useRef } from 'react';\nimport '../zdogui.css';\n\nimport Zdog from 'zdog';\n\nlet illo = '';\n\nfunction Viewer(props) {\n\n    const stateVars = props.stateVars;\n    const shapes = props.shapes;\n    \n    /* const refDragRotate = useRef(stateVars.dragRotate[0]);\n    refDragRotate.current = stateVars.dragRotate[0]; */\n\n    /* const refAnimate = useRef(stateVars.animate[0]);\n    refAnimate.current = stateVars.animate[0]; */\n\n    const refZoom = useRef(stateVars.zoom[0]);\n    refZoom.current = stateVars.zoom[0];\n\n    const refRotate_x = useRef(stateVars.rotate_x[0]);\n    refRotate_x.current = stateVars.rotate_x[0];\n\n    const refRotate_y = useRef(stateVars.rotate_y[0]);\n    refRotate_y.current = stateVars.rotate_y[0];\n\n    const refRotate_z = useRef(stateVars.rotate_z[0]);\n    refRotate_z.current = stateVars.rotate_z[0];\n\n    const isRotating = useState(false);\n\n    const refSpin_x = useRef(stateVars.spin_x[0]);\n    refSpin_x.current = stateVars.spin_x[0];\n\n    const refSpin_y = useRef(stateVars.spin_y[0]);\n    refSpin_y.current = stateVars.spin_y[0];\n\n    const refSpin_z = useRef(stateVars.spin_z[0]);\n    refSpin_z.current = stateVars.spin_z[0];\n\n    const refAnimateSelection = useRef(stateVars.animateSelection[0]);\n    refAnimateSelection.current = stateVars.animateSelection[0];\n\n    const refEaseIOx = useRef(stateVars.easeIO[0].x);\n    refEaseIOx.current = stateVars.easeIO[0].x;\n\n    const refEaseIOy = useRef(stateVars.easeIO[0].y);\n    refEaseIOy.current = stateVars.easeIO[0].y;\n\n    const refEaseIOz = useRef(stateVars.easeIO[0].z);\n    refEaseIOz.current = stateVars.easeIO[0].z;\n\n    const refEaseIOcycleCount = useRef(stateVars.easeIO[0].cycleCount);\n    refEaseIOcycleCount.current = stateVars.easeIO[0].cycleCount;\n\n    const refEaseIOpower = useRef(stateVars.easeIO[0].power);\n    refEaseIOpower.current = stateVars.easeIO[0].power;\n\n    const refAnimationOption = useRef(stateVars.animationOption[0]);\n    refAnimationOption.current = stateVars.animationOption[0];\n\n    let af;\n\n    function createChildShapes(parent, parentInstance) {\n        if (parent.children.length > 0) {\n            parent.children.forEach((shape) => {\n                shape.data.addTo = parentInstance;\n                let shapeInstance = new Zdog[shape.shapeClass](shape.data);\n                createChildShapes(shape, shapeInstance);\n            })\n        }\n    }\n\n    function copyShapes() {\n        let newshapearry = [];\n        newshapearry.push(shapes[0]);\n        let flattened = newshapearry.flat();\n        return flattened;\n      }\n\n    function createIllo() {\n\n        illo = new Zdog.Illustration({\n          element: '#illo',\n          /* dragRotate: stateVars.dragRotate[0], */\n          zoom: refZoom.current,\n          dragRotate: (refAnimationOption.current === 'dragRotate'),\n          rotate: {\n              x: refRotate_x.current,\n              y: refRotate_y.current,\n              z: refRotate_z.current\n          }\n        })\n    \n        illo.setSize(stateVars.canvas_w[0], stateVars.canvas_h[0]);\n\n        let copiedshapes = shapes[0].slice(0, shapes[0].length);\n    \n        copiedshapes.forEach((shape) => {\n          console.log(shape);\n          shape.data.addTo = illo;\n          // check face props and replace color value with false if actually false\n          if (Object.keys(shape.faces).length !== 0) {\n              Object.keys(shape.faces).forEach((face) => {\n                  if (shape.faces[face] === false) {\n                      shape.data[face] = false;\n                  }\n              })\n          }\n          let shapeInstance = new Zdog[shape.shapeClass](shape.data);\n          createChildShapes(shape, shapeInstance);\n        })\n    \n        illo.updateRenderGraph();\n\n        console.log('illo = ', illo);\n    \n      }\n\n    let ticker = 0;\n    \n    \n    function rotateIllo() {\n\n        /* if (refAnimate.current === false && refDragRotate.current === false) { */\n        if (refAnimationOption.current === 'none') {\n            console.log('canceling animation frame');\n            cancelAnimationFrame(af);\n            illo.rotate.x = refRotate_x.current;\n            illo.rotate.y = refRotate_y.current;\n            illo.rotate.z = refRotate_z.current;\n            illo.updateRenderGraph();\n\n            isRotating[1](false);\n\n        } else {\n        \n            /* if (refAnimate.current === true) { */\n            if (refAnimationOption.current === 'animate') {\n\n                if (refAnimateSelection.current === 'spin') {\n\n                    if (refSpin_x.current === 0) {\n                        illo.rotate.x = refRotate_x.current;\n                    } else {\n                        illo.rotate.x += (refSpin_x.current);\n                    }\n                    if (refSpin_y.current === 0) {\n                        illo.rotate.y = refRotate_y.current;\n                    } else {\n                        illo.rotate.y += (refSpin_y.current);\n                    }\n                    if (refSpin_z.current === 0) {\n                        illo.rotate.z = refRotate_z.current;\n                    } else {\n                        illo.rotate.z += (refSpin_z.current);\n                    }\n\n                } else if (refAnimateSelection.current === 'ease') {\n\n                    // Zdog animate fn for easeInOut()\n                    let progress = ticker / refEaseIOcycleCount.current;\n                    // apply easing to rotation\n                    let tween = Zdog.easeInOut( progress % 1, refEaseIOpower.current );\n\n                    if (refEaseIOx.current) {\n                        illo.rotate.x = refRotate_x.current + (tween * Zdog.TAU);\n                    }\n                    if (refEaseIOy.current) {\n                        illo.rotate.y = refRotate_y.current + (tween * Zdog.TAU);\n                    }\n                    if (refEaseIOz.current) {\n                        illo.rotate.z = refRotate_z.current + (tween * Zdog.TAU);\n                    }\n\n                    ticker++;\n\n                }\n\n            }\n\n            illo.updateRenderGraph();\n            af = requestAnimationFrame(rotateIllo);\n \n        }\n    }\n\n    useEffect(() => {\n        createIllo();\n    })\n\n    useEffect(() => {\n\n        if (illo !== '' && /* (stateVars.animate[0] | stateVars.dragRotate[0]) */ stateVars.animationOption[0] !== 'none' && isRotating[0] === false) {\n            console.log(\"was not rotating\");\n            isRotating[1](true);\n            rotateIllo();\n        }\n\n    /* }, [stateVars.animate[0], stateVars.dragRotate[0]]); */\n    }, [stateVars.animationOption[0]]);\n\n    return (\n        <section className=\"results\">\n            <section className=\"illustration\" width={stateVars.canvas_w[0]} height={stateVars.canvas_h[0]}>\n                <canvas style={{backgroundColor: stateVars.bgColor[0], cursor: (refAnimationOption.current === 'dragRotate' ? 'move' : 'default')}} id=\"illo\" width={stateVars.canvas_w[0]} height={stateVars.canvas_h[0]}>\n                    <p>{stateVars.fallback[0]}</p>\n                </canvas>\n            </section>\n        </section>\n    )\n}\n\nexport default Viewer;","\n\nexport let shapeProperties = {\n    'basic': [\n        'addTo', 'color', 'backface', 'stroke', 'fill', 'translate', 'rotate'/*, 'scale', 'zoom' */\n    ],\n    'Ellipse': [\n        /*'diameter',*/ 'width', 'height', 'quarters'\n    ],\n    'Rect': [\n        'width', 'height'\n    ],\n    'Box': [\n        'width', 'height', 'depth', 'frontFace', 'rearFace', 'topFace', 'bottomFace', 'leftFace', 'rightFace'\n    ],\n    'Hemisphere': [\n        'diameter'\n    ],\n    'RoundedRect': [\n        'width', 'height', 'cornerRadius'\n    ],\n    'Polygon': [\n        'radius', 'sides'\n    ],\n    'Cone': [\n        'diameter', 'length'\n    ],\n    'Cylinder': [\n        'diameter', 'length', 'frontFace'\n    ],\n    'Group': [],\n    'Shape': [\n        'path', 'closed'\n    ]\n}","export default function createScript(illoVars, shapesCopy) {\n    \n    let scriptString = `// illo.js\n\n// create illo\nlet illo = new Zdog.Illustration({\n    // set canvas with id 'illo'\n    element: \"#illo\",\n    zoom: ${illoVars.zoom[0]},\n    dragRotate: ${illoVars.animationOption[0] === 'dragRotate'},\n    rotate: {\n        x: ${illoVars.rotate_x[0]},\n        y: ${illoVars.rotate_y[0]},\n        z: ${illoVars.rotate_z[0]}\n    }\n});\n\n// add shapes\n    `;\n\n    let shapeCount = 0;\n\n    function createChildShapes(parent, parentName) {\n        if (parent.children.length > 0) {\n            parent.children.forEach((shape) => {\n                let name = `shape${shapeCount}`;\n                let data = shape.data;\n                shape.data.addTo = \"--\" + parentName + \"--\";\n                let dataString = JSON.stringify(data, null, '\\t');\n                let newShapeString = `\nlet ${name} = new Zdog['${shape.shapeClass}'](${dataString})\n        `;\n        \n        scriptString = scriptString.concat(newShapeString);\n        shapeCount += 1;\n                createChildShapes(shape, name);\n            })\n        }\n    }\n\n    shapesCopy.forEach(shape => {\n        let name = `shape${shapeCount}`;\n        let data = shape.data;\n        data.addTo = \"--illo--\";\n        let dataString = JSON.stringify(data, null, '\\t');\n        let newShapeString = `\nlet ${name} = new Zdog['${shape.shapeClass}'](${dataString})\n        `;\n        scriptString = scriptString.concat(newShapeString);\n        shapeCount += 1;\n        createChildShapes(shape, name);\n    });\n\n    let endString;\n\n    if (illoVars.animationOption[0] === 'animate') {\n\n        // continuous spin\n        if (illoVars.animateSelection[0] === 'spin') {\n            endString = `\nfunction animate() {\n    illo.rotate.x += ${illoVars.spin_x[0]};\n    illo.rotate.y += ${illoVars.spin_y[0]};\n    illo.rotate.z += ${illoVars.spin_z[0]};\n    illo.updateRenderGraph();\n    requestAnimationFrame(animate);\n}\n            \n    animate();\n        `\n        } else if (illoVars.animateSelection[0] === 'ease') {\n        endString = `\n/* Zdog animate fn for easeInOut */\n\nlet ticker = 0;\nlet cycleCount = ${illoVars.easeIO[0].cycleCount};\n\nfunction animate() {\n    let progress = ticker / cycleCount;\n    // apply easing to rotation\n    let tween = Zdog.easeInOut(progress % 1, ${illoVars.easeIO[0].power});\n    ${illoVars.easeIO[0].x ? 'illo.rotate.x = ' + illoVars.rotate_x[0] + ' + (tween * Zdog.TAU);' : ''}\n    ${illoVars.easeIO[0].y ? 'illo.rotate.y = ' + illoVars.rotate_y[0] + ' + (tween * Zdog.TAU);' : ''}\n    ${illoVars.easeIO[0].z ? 'illo.rotate.z = ' + illoVars.rotate_x[0] + ' + (tween * Zdog.TAU);' : ''}\n    ticker++;\n\n    illo.updateRenderGraph();\n    requestAnimationFrame(animate);\n}\n\nanimate();\n        `\n        }\n    } else if (illoVars.animationOption[0] === 'dragRotate') {\n        endString = `\nfunction animate() {\n    illo.updateRenderGraph();\n    requestAnimationFrame(animate);\n}\n        \nanimate();\n        `\n    } else {\n        endString = `\n// update & render\nillo.updateRenderGraph();\n        `\n    }\n\n    scriptString = scriptString.concat(endString);\n\n    return scriptString;\n\n}\n\n","import React, { useEffect, useState } from 'react';\nimport { Container, Dialog, IconButton, makeStyles, Snackbar, Typography } from '@material-ui/core';\nimport ContentCopyOutlinedIcon from '@mui/icons-material/ContentCopyOutlined';\nimport '../zdogui.css';\nimport { CodeJar } from 'codejar';\nimport createScript from '../createScript';\nimport hljs from 'highlight.js';\n\n\nconst useStyles = makeStyles((theme) => ({\n    invisible: {\n        visibility: 'hidden'\n    },\n    container: {\n        paddingTop: 24,\n        backgroundColor: '#fafafa'\n    },\n    snackbar: {\n        backgroundColor: 'white',\n        color: 'black'\n    },\n    extraMarginTop: {\n        marginTop: '36px'\n    }\n}));\n\nfunction SourceCodeDialog(props) {\n\n    const classes = useStyles();\n\n    const [snackbarOpen, setSnackbarOpen] = useState(false);\n\n    const [editorVisibility, setEditorVisibility] = [props.editorVisibility[0], props.editorVisibility[1]];\n    const [open, setOpen] = [props.open[0], props.open[1]];\n\n    const stateVars = props.stateVars;\n    const addedShapes = props.addedShapes;\n\n    function clipboardCopy(elID) {\n        let text = document.getElementById(elID).innerText;\n        navigator.clipboard.writeText(text).then(function () {\n            console.log('copy to clipboard successful');\n            // add notification\n            setSnackbarOpen(true);\n        }, function () {\n            console.log('copy to clipboard failed')\n        })\n    }\n\n    function handleClose() {\n        setOpen(false);\n        setEditorVisibility(false);\n    }\n\n    function removeAllDoubleDashQuotes(scriptString) {\n        let fixedScript = scriptString.replaceAll(`\"--`, '');\n        let fixedScript2 = fixedScript.replaceAll(`--\"`, '');\n        return fixedScript2;\n    }\n\n    function copyShapes() {\n        let newshapearry = [];\n        newshapearry.push(addedShapes[0]);\n        let flattened = newshapearry.flat();\n        return flattened;\n    }\n\n    useEffect(() => {\n        //if (open) {\n          \n          console.log('open');\n          setTimeout(() => {\n    \n            // HTML snippets\n    \n            let codetagsHTML_canvas = document.getElementById('codetagsHTML_canvas');\n            let codetagsHTML_script = document.getElementById('codetagsHTML_script');\n\n            let cursor = stateVars.animationOption[0] === 'dragRotate' ? 'move' : 'default';\n    \n            let snippet_canvas =\n              `<!-- canvas for Zdog illo -->\n    <canvas id=\"illo\" style=\"background-color:${stateVars.bgColor[0]}; cursor:${cursor};\" width=\"${stateVars.canvas_w[0]}\" height=\"${stateVars.canvas_h[0]}\">\n      <p>${stateVars.fallback[0]}</p>\n    </canvas>`;\n    \n            let snippet_script = \n            `<!-- Zdog CDN and illo.js -->\n    <script src=\"https://unpkg.com/zdog@1/dist/zdog.dist.min.js\"></script>\n    <script src=\"illo.js\"></script>`;\n    \n            let jarHTML_canvas = CodeJar(codetagsHTML_canvas, hljs.highlightAll);\n            jarHTML_canvas.updateCode(snippet_canvas);\n    \n            let jarHTML_script = CodeJar(codetagsHTML_script, hljs.highlightAll);\n            jarHTML_script.updateCode(snippet_script);\n    \n            // JavaScript snippet\n      \n            let codetagsJS = document.getElementById('codetagsJS');\n            \n            if (codetagsJS !== null) {\n              let jar = CodeJar(codetagsJS, hljs.highlightAll);\n    \n              if (addedShapes[0].length > 0) {\n                let flattened = copyShapes();\n                let scriptString = createScript(stateVars, flattened);\n                let fixed = removeAllDoubleDashQuotes(scriptString);\n                jar.updateCode(fixed);\n              }\n    \n              // Get code\n              let mycode = jar.toString();\n              //console.log(mycode);\n    \n              // Listen to updates\n              jar.onUpdate((code) => {\n                console.log(code);\n              });\n            }\n    \n            // set editors to be visible\n            setEditorVisibility(true);\n    \n          }, 200);\n        //}\n      }, []);\n\n\n    return (\n\n        <Dialog open={open} maxWidth=\"md\" onClose={handleClose} /* open={open}  */ className={(!editorVisibility) ? classes.invisible : ''}>\n            <Container className={classes.container}>\n                <div className=\"editorHeader\">\n                    <Typography>HTML</Typography>\n                </div>\n                <div className=\"contentcopy\">\n                    <IconButton onClick={() => clipboardCopy('editorHTML_canvas')} id=\"copyHTML_canvas\" aria-label=\"Copy to clipboard\"><ContentCopyOutlinedIcon fontSize='small' /></IconButton>\n                </div>\n                <div id=\"editorHTML_canvas\">\n                    <pre>\n                        <code id=\"codetagsHTML_canvas\" className=\"language-html\">''\n                        </code>\n                    </pre>\n                </div>\n                <div className=\"contentcopy\">\n                    <IconButton onClick={() => clipboardCopy('editorHTML_script')} id=\"copyHTML_script\" aria-label=\"Copy to clipboard\"><ContentCopyOutlinedIcon fontSize=\"small\" /></IconButton>\n                </div>\n                <div id=\"editorHTML_script\">\n                    <pre>\n                        <code id=\"codetagsHTML_script\" className=\"language-html\">''\n                        </code>\n                    </pre>\n                </div>\n                <div className=\"editorHeader\">\n                    <Typography className={classes.extraMarginTop}>JavaScript</Typography>\n                </div>\n                <div className=\"contentcopy\">\n                    <IconButton onClick={() => clipboardCopy('editor')} id=\"copyJS\" aria-label=\"Copy to clipboard\"><ContentCopyOutlinedIcon fontSize=\"small\" /></IconButton>\n                </div>\n                <div id=\"editor\">\n                    <pre>\n                        <code id=\"codetagsJS\" className=\"language-javascript\">''\n                        </code>\n                    </pre>\n                </div>\n                <Snackbar\n                    ContentProps={{ className: classes.snackbar }}\n                    anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n                    open={snackbarOpen}\n                    autoHideDuration={3000}\n                    onClose={() => setSnackbarOpen(false)}\n                    message=\"Copied to clipboard!\"\n                />\n            </Container>\n\n        </Dialog>\n    )\n}\n\nexport default SourceCodeDialog;","import React, { useEffect, useState } from 'react';\nimport '../zdogui.css';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Button, Container, Dialog, IconButton, Typography } from '@material-ui/core';\n\nimport NoteAddOutlinedIcon from '@mui/icons-material/NoteAddOutlined';\nimport CodeIcon from '@mui/icons-material/Code';\n\n\nconst useStyles = makeStyles({\n    addshape: {\n        width: 140,\n        height: 34\n    },\n    disabled: {\n        color: 'grey'\n    },\n    confirmDialog: {\n        padding: 40\n    },\n});\n\nexport default function IlloToolbar(props) {\n\n    const setPresets = props.setPresets;\n    const stateVars = props.stateVars;\n    const addedShapes = props.addedShapes;\n    let selectedNodeId = props.selectedNodeId;\n    let addNewZdogShape = props.addNewZdogShape;\n    const setOpen = props.setOpen;\n\n    const classes = useStyles();\n\n    /* const [confirmDialogOpen, setConfirmDialogOpen] = useState(false); */\n    const [confirmCreateNewDialogOpen, setConfirmCreateNewDialogOpen] = useState(false);\n\n    /* function handleDelete() {\n        console.log('hello');\n        setConfirmDialogOpen(true);\n    } */\n\n    /* function handleConfirm() {\n        let flattened = copyShapes();\n\n        let nodeId = selectedNodeId[0];\n        let posStrings = nodeId.split('_');\n        let posNums = posStrings.map((s) => Number(s));\n\n        if (posNums.length === 1) {\n\n            flattened.splice(posNums[0], 1);\n\n            // reset selected node id to canvas\n            selectedNodeId[1]('canvasnode');\n\n        } else {\n            let currentShape;\n\n            posNums.forEach((posNum, i) => {\n                if ((0 < i) && (i <= (posNums.length - 2))) {\n                    currentShape = currentShape.children[posNum];\n                } else if (i === 0) {\n                    currentShape = flattened[posNum];\n                }\n            })\n\n            let lastpos = posNums[posNums.length - 1];\n\n            currentShape.children.splice(lastpos, 1);\n\n            // reset selected node id to parent of deleted shape\n            posNums.pop();\n            let posNumsToStrings = posNums.map((n) => n.toString());\n            let parentNodeId = posNumsToStrings.join('_');\n            selectedNodeId[1](parentNodeId);\n            \n        }\n\n        addedShapes[1](flattened);\n        handleClose();\n    } */\n\n    /* function handleClose() {\n        setConfirmDialogOpen(false);\n    } */\n\n    /* function copyShapes() {\n        let newshapearry = [];\n        newshapearry.push(addedShapes[0]);\n        let flattened = newshapearry.flat();\n        return flattened;\n    } */\n\n    function handleCreateNew() {\n        console.log('create new clicked');\n        setConfirmCreateNewDialogOpen(true);\n    }\n\n    function handleConfirmCreateNew() {\n\n        // TO DO: replace below with a fn that sets all state props to a default or a specific demo\n        selectedNodeId[1]('canvasnode');\n        setPresets('blank');\n        /* stateVars.fallback[1]('');\n        addedShapes[1]([]); */\n\n        handleCloseCreateNewDialog();\n    }\n\n    function handleCloseCreateNewDialog() {\n        setConfirmCreateNewDialogOpen(false);\n    }\n\n    function getSourceCode() {\n        console.log('getting source code');\n        setOpen(true);\n    }\n\n\n    return (\n            <div className=\"toplevelactions\">\n\n           \n            \n\n                <IconButton id=\"createnew\" onClick={handleCreateNew} aria-label=\"Create new illustration\">\n                    <NoteAddOutlinedIcon fontSize=\"small\" />\n                </IconButton>\n\n                <IconButton id=\"getsourcecode\" onClick={getSourceCode} aria-label=\"Source code\">\n                            <CodeIcon fontSize=\"small\" />\n                </IconButton>\n            \n                <Dialog onClose={handleCloseCreateNewDialog} open={confirmCreateNewDialogOpen}>\n                        <Container className={classes.confirmDialog}>\n                            <Typography>Starting a new Zdog Illustration will delete any work you've done so far! \n                                <br/>\n                                <b>Be sure to grab any source code you want for your current project first.</b>\n                            </Typography>\n                                <Typography><br/>Create a new Zdog Illustration?</Typography>\n                            <div>\n                                <Button onClick={handleConfirmCreateNew} color=\"primary\">Confirm</Button>\n                                <Button onClick={handleCloseCreateNewDialog}>Cancel</Button>\n                            </div>\n                        </Container>\n                </Dialog>\n\n                {/* <ButtonGroup id=\"btngrp\">\n\n                    <div>\n                        <IconButton className={(selectedNodeId[0] === '' || selectedNodeId[0] === 'canvasnode') ? classes.disabled : ''} onClick={handleDelete} aria-label=\"delete\" disabled={(selectedNodeId[0] === '' || selectedNodeId[0] === 'canvasnode')}>\n                            <DeleteOutlinedIcon fontSize=\"small\" />\n                        </IconButton>\n                    </div>\n\n                    <Dialog onClose={handleClose} open={confirmDialogOpen}>\n                        <Container className={classes.confirmDialog}>\n                            <Typography>Deleting this shape will also delete any child shapes. Are you sure you want to delete this shape?</Typography>\n                            <div>\n                                <Button onClick={handleConfirm} color=\"primary\">Confirm</Button>\n                                <Button onClick={handleClose}>Cancel</Button>\n                            </div>\n                        </Container>\n\n                    </Dialog>\n\n                    <AddShapeMenu selectedNodeId={selectedNodeId} addNewZdogShape={addNewZdogShape} />\n            \n                </ButtonGroup> */}\n\n\n            </div>\n    )\n\n}","import React, { useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport AddIcon from '@material-ui/icons/Add';\nimport { IconButton } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n    addbtn: {\n        /* color: '#643263' */\n    },\n    disabled: {\n        color: 'grey'\n    },\n    smallFont: {\n      fontSize: '0.9rem'\n    },\n    itemAction: {\n      paddingRight: 12,\n      color: 'rgba(0, 0, 0, 0.5)',\n      display: 'inline-flex',\n      '&:hover': {\n          color: 'rgba(0, 0, 0, 0.9)'\n      }\n  },\n});\n\nexport default function AddShapeMenu(props) {\n\n  /* const [anchorEl, setAnchorEl] = React.useState(null); */\n\n  const [anchorEl, setAnchorEl] = props.anchor;\n\n  //let selected = props.selected;\n\n  let selectedNodeId = props.selectedNodeId;\n  let addNewZdogShape = props.addNewZdogShape;\n\n  let checkParentExpanded = props.checkParentExpanded;\n  //let [expanded, setExpanded] = props.expandedArray;\n  let hovernodeid = props.hovernodeid;\n\n  //let addMenuOpen = props.addMenuOpen;\n\n  const classes = useStyles();\n\n  const handleClick = (event) => {\n    /* selectedNodeId[1](hovernodeid); */\n    /* addMenuOpen[1](true); */\n    setAnchorEl(event.currentTarget);\n    console.log('wooooopie');\n\n    /* if (hovernodeid === selectedNodeId) {\n      console.log('wooooopie');\n      setAnchorEl(event.currentTarget);\n    } else {\n      console.log('wooooopie waiting');\n      setTimeout(() => {setAnchorEl(event.currentTarget);}, 2000);\n    } */\n    \n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n    /* addMenuOpen[1](false);\n      selectedNodeId[1](hovernodeid); */\n  };\n\n  function handleShapeSelect(v) {\n      handleClose();\n      //addNewZdogShape(v, hovernodeid /* selectedNodeId[0] */);\n      addNewZdogShape(v, selectedNodeId[0]);\n  }\n\n\n/* useEffect(() => {\n    //checkParentExpanded();\n}); */\n\n/* useEffect(() => {\n  \n}, [anchorEl]); */\n\n  return (\n    <React.Fragment>\n      {/* <IconButton disabled={selectedNodeId[0] === ''} aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\n        <AddIcon className={(selectedNodeId[0] === '')? classes.disabled : classes.addbtn} fontSize=\"small\"/>\n      </IconButton> */}\n      {/* <AddIcon onClick={handleClick} className={classes.itemAction} fontSize='small'/> */}\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        <MenuItem className={classes.smallFont} divider onClick={() => handleShapeSelect('Group')}value=\"Group\">Group</MenuItem>\n        <MenuItem className={classes.smallFont} divider onClick={() => handleShapeSelect('Shape')} value=\"Shape\">Shape</MenuItem>\n        <MenuItem className={classes.smallFont} onClick={() => handleShapeSelect('Box')} value=\"Box\">Box</MenuItem>\n        <MenuItem className={classes.smallFont} onClick={() => handleShapeSelect('Cone')} value=\"Cone\">Cone</MenuItem>\n        <MenuItem className={classes.smallFont} onClick={() => handleShapeSelect('Cylinder')} value=\"Cylinder\">Cylinder</MenuItem>\n        <MenuItem className={classes.smallFont} onClick={() => handleShapeSelect('Ellipse')}value=\"Ellipse\">Ellipse</MenuItem>\n        <MenuItem className={classes.smallFont} onClick={() => handleShapeSelect('Hemisphere')} value=\"Hemisphere\">Hemisphere</MenuItem>\n        <MenuItem className={classes.smallFont} onClick={() => handleShapeSelect('Polygon')} value=\"Polygon\">Polygon</MenuItem>\n        <MenuItem className={classes.smallFont} onClick={() => handleShapeSelect('Rect')} value=\"Rectangle\">Rectangle</MenuItem>\n        <MenuItem className={classes.smallFont} onClick={() => handleShapeSelect('RoundedRect')} value=\"Rounded Rectangle\">Rounded Rectangle</MenuItem>\n      </Menu>\n    </React.Fragment>\n  );\n}","import React, { useEffect, useState } from 'react';\nimport '../zdogui.css';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport TreeView from '@material-ui/lab/TreeView';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport TreeItem from '@material-ui/lab/TreeItem';\n\nimport generateID from '../generateID';\nimport fixCamelCase from '../fixCamelCase';\nimport IlloToolbar from './IlloToolbar';\nimport { Button, Container, Dialog, IconButton, Menu, MenuItem, Typography } from '@material-ui/core';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport AddIcon from '@material-ui/icons/Add';\nimport AddShapeMenu from './AddShapeMenu';\n\n\nconst useStyles = makeStyles({\n    root: {\n        padding: 16,\n        overflowX: 'scroll',\n        overflowY: 'scroll',\n        /* height: window.innerHeight - 185 */ /* 185 is (appbar + actionsbar heights) + additional 33px offset needed for bottom horizontal scroll bar to show */\n        height: window.innerHeight - 114 // adjusted after removing actionsbar\n    },\n    item: {\n        color: 'rgba(0, 0, 0, 0.87)',\n        minWidth: 260\n        /*         borderLeft: '1px dashed grey' */\n\n    },\n    flexy: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        padding: 4,\n        '&:hover .itemActionsContainer': {\n            display: 'flex'\n        }\n    },\n    selected: {\n        display: 'flex'\n    },\n    itemAction: {\n        paddingRight: 12,\n        color: 'rgba(0, 0, 0, 0.5)',\n        display: 'inline-flex',\n        '&:hover': {\n            color: 'rgba(0, 0, 0, 0.9)'\n        }\n    },\n    confirmDialog: {\n        padding: 40\n    }\n});\n\nexport default function IlloExplorer(props) {\n\n    const setPresets = props.setPresets;\n    const stateVars = props.stateVars;\n    const addedShapes = props.addedShapes;\n    let selectedNodeId = props.selectedNodeId;\n    let addNewZdogShape = props.addNewZdogShape;\n    const setOpen = props.setOpen;\n\n    const classes = useStyles();\n\n    const [expanded, setExpanded] = React.useState(['canvasnode']);\n    const [confirmDialogOpen, setConfirmDialogOpen] = useState(false);\n\n    let addMenuOpen = useState(false);\n\n\n    const anchor = React.useState(null);\n\n\n\n    const handleToggle = (event, nodeIds) => {\n        setExpanded(nodeIds);\n    };\n\n    const handleSelect = (event, nodeIds) => {\n        event.preventDefault();\n\n        // ***** this seems to cause a rerender that interferes with the rendering of AddShapeMenu, even though AddShapeMenu IS triggered when add icons are clicked ***** //\n        //if (!addMenuOpen[0]) {\n            selectedNodeId[1](nodeIds);\n        //}\n\n        console.log('nodeIds: ' + nodeIds);\n    };\n\n    function copyArray(a) {\n        let newArray = [];\n        newArray.push(a);\n        let newArrayFlattened = newArray.flat();\n        return newArrayFlattened;\n    }\n\n    function copyShapes() {\n        let newshapearry = [];\n        newshapearry.push(addedShapes[0]);\n        let flattened = newshapearry.flat();\n        return flattened;\n    }\n\n    function handleDelete() {\n        console.log('hello');\n        setConfirmDialogOpen(true);\n    }\n\n    function handleClose() {\n        setConfirmDialogOpen(false);\n    }\n\n    function handleConfirm() {\n        let flattened = copyShapes();\n\n        let nodeId = selectedNodeId[0];\n        let posStrings = nodeId.split('_');\n        let posNums = posStrings.map((s) => Number(s));\n\n        if (posNums.length === 1) {\n\n            flattened.splice(posNums[0], 1);\n\n            // reset selected node id to canvas\n            selectedNodeId[1]('canvasnode');\n\n        } else {\n            let currentShape;\n\n            posNums.forEach((posNum, i) => {\n                if ((0 < i) && (i <= (posNums.length - 2))) {\n                    currentShape = currentShape.children[posNum];\n                } else if (i === 0) {\n                    currentShape = flattened[posNum];\n                }\n            })\n\n            let lastpos = posNums[posNums.length - 1];\n\n            currentShape.children.splice(lastpos, 1);\n\n            // reset selected node id to parent of deleted shape\n            posNums.pop();\n            let posNumsToStrings = posNums.map((n) => n.toString());\n            let parentNodeId = posNumsToStrings.join('_');\n            selectedNodeId[1](parentNodeId);\n\n        }\n\n        addedShapes[1](flattened);\n        handleClose();\n    }\n\n    /* const handleAdd = (e) => {\n        setAnchorEl(e.currentTarget);\n        console.log('anchorEl = ', anchorEl);\n      };\n    \n      const handleCloseAddMenu = () => {\n        setAnchorEl(null);\n      };\n    \n      function handleAddMenuShapeSelect(v) {\n          handleCloseAddMenu();\n          addNewZdogShape(v, selectedNodeId[0]);\n      } */\n\n    // check that the parent of the selected item is expanded (ie. selected item is not hidden from user, which happens when a new item is added)\n    // also make sure top level Canvas node is always expanded\n    function checkParentExpanded() {\n        let pos = selectedNodeId[0].split('_');\n        if (pos.length > 1) {\n            pos.pop();\n            let parentId = pos.join('_');\n            if (!expanded.includes(parentId)) {\n                console.log('does not include parentId');\n                let copied = copyArray(expanded);\n                copied.push(parentId);\n                setExpanded(copied);\n            }\n        } else {\n            if (!expanded.includes('canvasnode')) {\n                let copied = copyArray(expanded);\n                copied.push('canvasnode');\n                setExpanded(copied);\n            }\n        }\n    }\n\n    function handleAdd(nodeid) {\n        console.log(`nodeid inside handleAdd = ${nodeid}`);\n        //let el = document.getElementById(e.target.id);\n        /* anchor[1](el); */\n\n        //let section = document.querySelector('.illoExplorer');\n        let el = document.getElementById('invisibleAnchorEl');\n        anchor[1](el);\n    }\n\n\n    let startingParentIds = [];\n\n    function createTree(childrenArray, parentnodeid) {\n        let p = parentnodeid;\n        startingParentIds.push(p);\n\n        console.log(childrenArray.length !== 0);\n        if (childrenArray.length !== 0) {\n            let treeitems = childrenArray.map((shape, i) => {\n                let pos = `${p}_${i}`;\n                let item = (<TreeItem onLabelClick={handleSelect} onIconClick={handleToggle} className={classes.item} key={generateID()} nodeId={pos} label={<div className={classes.flexy}>{fixCamelCase(shape.shapeClass)} <div className={selectedNodeId[0] === pos ? classes.selected : 'itemActionsContainer'}> <DeleteOutlinedIcon onClick={handleDelete} className={classes.itemAction} fontSize='small' /> <AddIcon /* id={pos}  */onClick={() => handleAdd(pos)} className={classes.itemAction} fontSize='small'/>  {/* <AddShapeMenu addMenuOpen={addMenuOpen} hovernodeid={pos} checkParentExpanded={checkParentExpanded} selectedNodeId={selectedNodeId} addNewZdogShape={addNewZdogShape} />  */}</div></div>}>\n                    {createTree(shape.children, pos)}\n                </TreeItem>);\n                return item;\n            })\n            return treeitems;\n        } else {\n            return '';\n        }\n    }\n\n    let toptreelevel = addedShapes[0].map((shape, i) => {\n        let item =\n            (<TreeItem onLabelClick={handleSelect} onIconClick={handleToggle} className={classes.item} key={generateID()} nodeId={i.toString()} label={<div className={classes.flexy}>{fixCamelCase(shape.shapeClass)} <div className={selectedNodeId[0] === i.toString() ? classes.selected : 'itemActionsContainer'}> {/* <IconButton onClick={handleAdd}> <AddIcon className={classes.itemAction} fontSize='small' /> </IconButton>  */ } <DeleteOutlinedIcon onClick={handleDelete} className={classes.itemAction} fontSize='small'/> <AddIcon onClick={() => handleAdd(i.toString())} className={classes.itemAction} fontSize='small'/> {/* <AddShapeMenu addMenuOpen={addMenuOpen} hovernodeid={i.toString()} checkParentExpanded={checkParentExpanded} selectedNodeId={selectedNodeId} addNewZdogShape={addNewZdogShape} />  */}</div></div>}>\n                {createTree(shape.children, i.toString())}\n            </TreeItem>);\n        return item;\n    })\n\n    let canvasItem = (\n        <TreeItem onLabelClick={handleSelect} onIconClick={handleToggle} className={classes.item} nodeId=\"canvasnode\" label={<div className={classes.flexy}>Canvas <div className={selectedNodeId[0] === 'canvasnode' ? classes.selected : 'itemActionsContainer'}> <AddIcon onClick={() => handleAdd('canvasnode')} className={classes.itemAction} fontSize='small'/> {/* <AddShapeMenu addMenuOpen={addMenuOpen} hovernodeid=\"canvasnode\" checkParentExpanded={checkParentExpanded} selectedNodeId={selectedNodeId} addNewZdogShape={addNewZdogShape} /> */}  {/* <AddIcon id=\"canvasAdd\" onClick={handleAdd} className={classes.itemAction} fontSize='small' /> */} </div></div>}>\n                    {toptreelevel}\n                </TreeItem>\n    )\n\n    /*   let itemActions = (\n          <div className='itemActions'>\n              <IconButton className={classes.itemBtn} onClick={handleDelete} aria-label=\"delete shape\">\n                  <DeleteOutlinedIcon fontSize=\"small\" />\n              </IconButton>\n          </div>\n      ) */\n\n    useEffect(() => {\n        checkParentExpanded();\n    });\n\n    useEffect(() => {\n        // check that all items are expanded to start\n        let copied = copyArray(expanded);\n        let newArry = copied.concat(startingParentIds);\n        setExpanded(newArry);\n        console.log(newArry);\n    }, []);\n\n\n    return (\n        <section className=\"illoExplorer\">\n\n            <div id='invisibleAnchorEl'> </div>\n\n            {/* <IlloToolbar setPresets={setPresets} setOpen={setOpen} stateVars={stateVars} addedShapes={addedShapes} selectedNodeId={selectedNodeId} addNewZdogShape={addNewZdogShape} /> */}\n\n            <TreeView\n                className={classes.root}\n                defaultCollapseIcon={<ExpandMoreIcon />}\n                defaultExpandIcon={<ChevronRightIcon />}\n                expanded={expanded}\n                selected={selectedNodeId[0]}\n                onNodeToggle={handleToggle}\n                onNodeSelect={handleSelect}\n            >\n                {canvasItem}\n\n            </TreeView>\n\n            <AddShapeMenu anchor={anchor} addMenuOpen={addMenuOpen} checkParentExpanded={checkParentExpanded} selectedNodeId={selectedNodeId} addNewZdogShape={addNewZdogShape} /> \n\n            <Dialog onClose={handleClose} open={confirmDialogOpen}>\n                <Container className={classes.confirmDialog}>\n                    <Typography>Deleting this shape will also delete any child shapes. Are you sure you want to delete this shape?</Typography>\n                    <div>\n                        <Button onClick={handleConfirm} color=\"primary\">Confirm</Button>\n                        <Button onClick={handleClose}>Cancel</Button>\n                    </div>\n                </Container>\n\n            </Dialog>\n\n           {/*  <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleCloseAddMenu}\n            >\n                <MenuItem className={classes.smallFont} divider onClick={() => handleAddMenuShapeSelect('Group')} value=\"Group\">Group</MenuItem>\n                <MenuItem className={classes.smallFont} divider onClick={() => handleAddMenuShapeSelect('Shape')} value=\"Shape\">Shape</MenuItem>\n                <MenuItem className={classes.smallFont} onClick={() => handleAddMenuShapeSelect('Box')} value=\"Box\">Box</MenuItem>\n                <MenuItem className={classes.smallFont} onClick={() => handleAddMenuShapeSelect('Cone')} value=\"Cone\">Cone</MenuItem>\n                <MenuItem className={classes.smallFont} onClick={() => handleAddMenuShapeSelect('Cylinder')} value=\"Cylinder\">Cylinder</MenuItem>\n                <MenuItem className={classes.smallFont} onClick={() => handleAddMenuShapeSelect('Ellipse')} value=\"Ellipse\">Ellipse</MenuItem>\n                <MenuItem className={classes.smallFont} onClick={() => handleAddMenuShapeSelect('Hemisphere')} value=\"Hemisphere\">Hemisphere</MenuItem>\n                <MenuItem className={classes.smallFont} onClick={() => handleAddMenuShapeSelect('Polygon')} value=\"Polygon\">Polygon</MenuItem>\n                <MenuItem className={classes.smallFont} onClick={() => handleAddMenuShapeSelect('Rect')} value=\"Rectangle\">Rectangle</MenuItem>\n                <MenuItem className={classes.smallFont} onClick={() => handleAddMenuShapeSelect('RoundedRect')} value=\"Rounded Rectangle\">Rounded Rectangle</MenuItem>\n            </Menu> */}\n\n        </section>\n    )\n\n}","import Zdog from 'zdog';\nimport generateID from './generateID';\n\nexport let illoPresets = {\n    'blank': {\n        canvas_w: 240,\n        canvas_h: 240,\n        zoom: 1,\n        dragRotate: true,\n        animate: false,\n        rotate_x: 0,\n        rotate_y: 0,\n        rotate_z: 0,\n        spin_x: .01,\n        spin_y: .04,\n        spin_z: .01,\n        easeIO:\n        {\n            x: false,\n            y: true,\n            z: true,\n            cycleCount: 200,\n            power: 3\n        }\n        ,\n        animateSelection: 'ease',\n        fallback: 'A blank canvas',\n        animationOption: 'dragRotate',\n        bgColor: '#FFDDBB',\n        shapeLayers: []\n    },\n    'whitebox': {\n        canvas_w: 240,\n        canvas_h: 240,\n        zoom: 1,\n        dragRotate: false,\n        animate: true,\n        rotate_x: 0,\n        rotate_y: 0,\n        rotate_z: 0,\n        spin_x: .01,\n        spin_y: .04,\n        spin_z: .01,\n        easeIO:\n        {\n            x: false,\n            y: true,\n            z: true,\n            cycleCount: 350,\n            power: 5\n        }\n        ,\n        animateSelection: 'ease',\n        fallback: 'An outline of a square rotates to reveal it is the front face of a cube',\n        animationOption: 'animate',\n        bgColor: '#424242',\n        shapeLayers: [\n            {\n                id: generateID(),\n                children: [\n                    {\n                        id: generateID(),\n                        children: [],\n                        open: true,\n                        shapeClass: 'Box',\n                        data: {\n                            \"color\": \"#5C5C5C\",\n                            \"backface\": true,\n                            \"stroke\": \"1\",\n                            \"fill\": true,\n                            \"translate\": new Zdog.Vector({}),\n                            \"rotate\": new Zdog.Vector({}),\n                            \"width\": 100,\n                            \"height\": 100,\n                            \"depth\": 100,\n                            \"frontFace\": false,\n                            \"rearFace\": false,\n                            \"topFace\": \"#f5f5f5\",\n                            \"bottomFace\": \"#bfbfbf\",\n                            \"leftFace\": \"#e0e0e0\",\n                            \"rightFace\": \"#e0e0e0\"\n                        },\n                        faces: {\n                            \"frontFace\": \"#cecece\",\n                            \"rearFace\": \"#cecece\",\n                            \"topFace\": true,\n                            \"bottomFace\": true,\n                            \"leftFace\": true,\n                            \"rightFace\": true\n                        }\n                    }\n                ],\n                open: true,\n                shapeClass: 'Box',\n                data: {\n                    \"color\": \"#5C5C5C\",\n                    \"backface\": true,\n                    \"stroke\": \"1\",\n                    \"fill\": false,\n                    \"translate\": new Zdog.Vector({}),\n                    \"rotate\": new Zdog.Vector({}),\n                    \"width\": 100,\n                    \"height\": 100,\n                    \"depth\": 100,\n                    \"frontFace\": \"#cecece\",\n                    \"rearFace\": \"#cecece\",\n                    \"topFace\": \"#cecece\",\n                    \"bottomFace\": \"#cecece\",\n                    \"leftFace\": \"#cecece\",\n                    \"rightFace\": \"#cecece\"\n                },\n                faces: {\n                    \"frontFace\": true,\n                    \"rearFace\": true,\n                    \"topFace\": true,\n                    \"bottomFace\": true,\n                    \"leftFace\": true,\n                    \"rightFace\": true\n                }\n            }\n        ]\n    },\n    'lego': {\n        canvas_w: 450,\n        canvas_h: 450,\n        zoom: 0.5,\n        dragRotate: true,\n        animate: false,\n        rotate_x: 0,\n        rotate_y: 0,\n        rotate_z: 0,\n        spin_x: .01,\n        spin_y: .04,\n        spin_z: .01,\n        easeIO:\n        {\n            x: true,\n            y: true,\n            z: false,\n            cycleCount: 200,\n            power: 3\n        }\n        ,\n        animateSelection: 'ease',\n        fallback: 'Animated model of a red LEGO piece',\n        animationOption: 'animate',\n        bgColor: '#3A7DE9',\n        shapeLayers: [\n            {\n                id: generateID(),\n                children: [\n                    {\n                        id: generateID(),\n                        children: [\n                            {\n                                id: generateID(),\n                                children: [],\n                                open: true,\n                                shapeClass: 'Cylinder',\n                                data: {\n                                    \"color\": \"#c30006\",\n                                    \"backface\": \"#aa0a11\",\n                                    \"stroke\": \"1\",\n                                    \"fill\": true,\n                                    \"translate\": new Zdog.Vector({\n                                        \"x\": -80,\n                                        \"y\": 0,\n                                        \"z\": 0\n                                    }),\n                                    \"rotate\": new Zdog.Vector({}),\n                                    \"diameter\": \"65\",\n                                    \"length\": \"85\",\n                                    \"frontFace\": \"#000000\"\n                                },\n                                faces: {}\n                            },\n                            {\n                                id: generateID(),\n                                children: [],\n                                open: true,\n                                shapeClass: 'Cylinder',\n                                data: {\n                                    \"color\": \"#c30006\",\n                                    \"backface\": \"#aa0a11\",\n                                    \"stroke\": \"1\",\n                                    \"fill\": true,\n                                    \"translate\": new Zdog.Vector({}),\n                                    \"rotate\": new Zdog.Vector({}),\n                                    \"diameter\": \"65\",\n                                    \"length\": \"85\",\n                                    \"frontFace\": \"#000000\"\n                                },\n                                faces: {}\n                            },\n                            {\n                                id: generateID(),\n                                children: [],\n                                open: true,\n                                shapeClass: 'Cylinder',\n                                data: {\n                                    \"color\": \"#c30006\",\n                                    \"backface\": \"#aa0a11\",\n                                    \"stroke\": \"1\",\n                                    \"fill\": true,\n                                    \"translate\": new Zdog.Vector({\n                                        \"x\": 80,\n                                        \"y\": 0,\n                                        \"z\": 0\n                                    }),\n                                    \"rotate\": new Zdog.Vector({}),\n                                    \"diameter\": \"65\",\n                                    \"length\": \"85\",\n                                    \"frontFace\": \"#000000\"\n                                },\n                                faces: {}\n                            }\n                        ],\n                        open: true,\n                        shapeClass: 'Group',\n                        data: {\n                            \"translate\": new Zdog.Vector({\n                                \"x\": 0,\n                                \"y\": 5,\n                                \"z\": 0\n                            }),\n                            \"rotate\": new Zdog.Vector({\n                                \"x\": 1.5707963267948966,\n                                \"y\": 0,\n                                \"z\": 0\n                            })\n                        },\n                        faces: {}\n                    }\n                ],\n                open: true,\n                shapeClass: 'Box',\n                data: {\n                    /*         \"addTo\": illo, */\n                    \"color\": \"#c30005\",\n                    \"backface\": true,\n                    \"stroke\": 1,\n                    \"fill\": true,\n                    \"translate\": new Zdog.Vector({}),\n                    \"rotate\": new Zdog.Vector({}),\n                    \"width\": \"320\",\n                    \"height\": \"96\",\n                    \"depth\": \"160\",\n                    \"frontFace\": \"#b2081f\",\n                    \"rearFace\": \"#c30005\",\n                    \"topFace\": \"#db0623\",\n                    \"bottomFace\": false,\n                    \"leftFace\": \"#c30005\",\n                    \"rightFace\": \"#c30005\"\n                },\n                faces: {\n                    \"frontFace\": true,\n                    \"rearFace\": true,\n                    \"topFace\": true,\n                    \"bottomFace\": \"#a20106\",\n                    \"leftFace\": true,\n                    \"rightFace\": true\n                }\n            },\n            {\n                id: generateID(),\n                children: [\n                    {\n                        id: generateID(),\n                        children: [],\n                        open: true,\n                        shapeClass: 'Cylinder',\n                        data: {\n                            \"color\": \"#c30006\",\n                            \"backface\": true,\n                            \"stroke\": 1,\n                            \"fill\": true,\n                            \"translate\": new Zdog.Vector({\n                                \"x\": 40,\n                                \"y\": 40,\n                                \"z\": 0\n                            }),\n                            \"rotate\": new Zdog.Vector({}),\n                            \"diameter\": \"50\",\n                            \"length\": \"20\",\n                            \"frontFace\": \"#db0723\"\n                        },\n                        faces: {}\n                    },\n                    {\n                        id: generateID(),\n                        children: [],\n                        open: true,\n                        shapeClass: 'Cylinder',\n                        data: {\n                            \"color\": \"#c30006\",\n                            \"backface\": true,\n                            \"stroke\": 1,\n                            \"fill\": true,\n                            \"translate\": new Zdog.Vector({\n                                \"x\": 40,\n                                \"y\": -40,\n                                \"z\": 0\n                            }),\n                            \"rotate\": new Zdog.Vector({}),\n                            \"diameter\": \"50\",\n                            \"length\": \"20\",\n                            \"frontFace\": \"#db0723\"\n                        },\n                        faces: {}\n                    },\n                    {\n                        id: generateID(),\n                        children: [],\n                        open: true,\n                        shapeClass: 'Cylinder',\n                        data: {\n                            \"color\": \"#c30006\",\n                            \"backface\": true,\n                            \"stroke\": 1,\n                            \"fill\": true,\n                            \"translate\": new Zdog.Vector({\n                                \"x\": 120,\n                                \"y\": 40,\n                                \"z\": 0\n                            }),\n                            \"rotate\": new Zdog.Vector({}),\n                            \"diameter\": \"50\",\n                            \"length\": \"20\",\n                            \"frontFace\": \"#db0723\"\n                        },\n                        faces: {}\n                    },\n                    {\n                        id: generateID(),\n                        children: [],\n                        open: true,\n                        shapeClass: 'Cylinder',\n                        data: {\n                            \"color\": \"#c30006\",\n                            \"backface\": true,\n                            \"stroke\": 1,\n                            \"fill\": true,\n                            \"translate\": new Zdog.Vector({\n                                \"x\": 120,\n                                \"y\": -40,\n                                \"z\": 0\n                            }),\n                            \"rotate\": new Zdog.Vector({}),\n                            \"diameter\": \"50\",\n                            \"length\": \"20\",\n                            \"frontFace\": \"#db0723\"\n                        },\n                        faces: {}\n                    },\n                    {\n                        id: generateID(),\n                        children: [],\n                        open: true,\n                        shapeClass: 'Cylinder',\n                        data: {\n                            \"color\": \"#c30006\",\n                            \"backface\": true,\n                            \"stroke\": 1,\n                            \"fill\": true,\n                            \"translate\": new Zdog.Vector({\n                                \"x\": -120,\n                                \"y\": 40,\n                                \"z\": 0\n                            }),\n                            \"rotate\": new Zdog.Vector({}),\n                            \"diameter\": \"50\",\n                            \"length\": \"20\",\n                            \"frontFace\": \"#db0723\"\n                        },\n                        faces: {}\n                    },\n                    {\n                        id: generateID(),\n                        children: [],\n                        open: true,\n                        shapeClass: 'Cylinder',\n                        data: {\n                            \"color\": \"#b2081f\",\n                            \"backface\": true,\n                            \"stroke\": 1,\n                            \"fill\": true,\n                            \"translate\": new Zdog.Vector({\n                                \"x\": -120,\n                                \"y\": -40,\n                                \"z\": 0\n                            }),\n                            \"rotate\": new Zdog.Vector({}),\n                            \"diameter\": \"50\",\n                            \"length\": \"20\",\n                            \"frontFace\": \"#db0723\"\n                        },\n                        faces: {}\n                    },\n                    {\n                        id: generateID(),\n                        children: [],\n                        open: true,\n                        shapeClass: 'Cylinder',\n                        data: {\n                            \"color\": \"#b2081f\",\n                            \"backface\": true,\n                            \"stroke\": 1,\n                            \"fill\": true,\n                            \"translate\": new Zdog.Vector({\n                                \"x\": -40,\n                                \"y\": 40,\n                                \"z\": 0\n                            }),\n                            \"rotate\": new Zdog.Vector({}),\n                            \"diameter\": \"50\",\n                            \"length\": \"20\",\n                            \"frontFace\": \"#db0723\"\n                        },\n                        faces: {}\n                    },\n                    {\n                        id: generateID(),\n                        children: [],\n                        open: true,\n                        shapeClass: 'Cylinder',\n                        data: {\n                            \"color\": \"#b2081f\",\n                            \"backface\": true,\n                            \"stroke\": 1,\n                            \"fill\": true,\n                            \"translate\": new Zdog.Vector({\n                                \"x\": -40,\n                                \"y\": -40,\n                                \"z\": 0\n                            }),\n                            \"rotate\": new Zdog.Vector({}),\n                            \"diameter\": \"50\",\n                            \"length\": \"20\",\n                            \"frontFace\": \"#db0723\"\n                        },\n                        faces: {}\n                    }\n                ],\n                open: true,\n                shapeClass: 'Group',\n                data: {\n                    \"translate\": new Zdog.Vector({\n                        \"x\": 0,\n                        \"y\": -58,\n                        \"z\": 0\n                    }),\n                    \"rotate\": new Zdog.Vector({\n                        \"x\": 1.5707963267948966,\n                        \"y\": 0,\n                        \"z\": 0\n                    }),\n                    /*  \"addTo\": illo */\n                },\n                faces: {}\n            }\n        ]\n    }\n}","import React, { useEffect, useState } from 'react';\nimport './zdogui.css';\nimport Controls from './components/Controls';\nimport Viewer from './components/Viewer';\nimport { shapeProperties } from './shapeProperties';\n\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nimport Zdog from 'zdog';\nimport { AppBar, Button, IconButton, Toolbar, Typography, makeStyles, Dialog, Container, Icon, Snackbar } from '@material-ui/core';\nimport CodeIcon from '@material-ui/icons/Code';\n\nimport AddIcon from '@material-ui/icons/Add';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\n\n/* import CreateNewFolderIcon from '@mui/icons-material/CreateNewFolder'; */\n/* import CreateNewFolderIcon from '@material-ui/icons/CreateNewFolder'; */\n\nimport { CodeJar } from 'codejar';\n/* import Prism from 'prismjs'; */\nimport createScript from './createScript';\nimport generateID from './generateID';\n\nimport hljs from 'highlight.js';\nimport 'highlight.js/styles/github.css';\n/* import javascript from 'highlight.js/lib/languages/javascript';\nhljs.registerLanguage('javascript', javascript); */\n\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport ContentCopyOutlinedIcon from '@mui/icons-material/ContentCopyOutlined';\n\nimport MoreHorizIcon from '@mui/icons-material/MoreHoriz';\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\nimport SourceCodeDialog from './components/SourceCodeDialog';\nimport IlloExplorer from './components/IlloExplorer';\n\nimport { illoPresets } from './illoPresets';\nimport IlloToolbar from './components/IlloToolbar';\n\n/* Zdog shape instances */\nconst zdogDefaultShapes = {\n  'Group': new Zdog.Group(),\n  'Ellipse': new Zdog.Ellipse(),\n  'Rect': new Zdog.Rect(),\n  'Box': new Zdog.Box(),\n  'Hemisphere': new Zdog.Hemisphere(),\n  'RoundedRect': new Zdog.RoundedRect(),\n  'Polygon': new Zdog.Polygon(),\n  'Cone': new Zdog.Cone(),\n  'Cylinder': new Zdog.Cylinder(),\n  'Shape': new Zdog.Shape()\n}\n\n\nconst useStyles = makeStyles((theme) => ({\n  bar: {\n    backgroundColor: \"#fafafa\",\n    color: '#eeaa00',\n    borderBottom: '1px solid #ededed',\n  },\n  toolbar: {\n    justifyContent: 'space-between'\n  },\n  purple: {\n    color: '#636'\n  },\n  /* snackbar: {\n    backgroundColor: 'white',\n    color: 'black'\n  }, */\n  /* getCode: {\n    right: 16,\n    position: \"absolute\",\n    backgroundColor: \"rgb(100 50 99)\",\n    paddingLeft: 16,\n    paddingRight: 16,\n    borderStyle: 'solid',\n    borderWidth: 2,\n    borderColor: '#eeaa00',\n    color: '#eeaa00',\n    '&:hover': {\n      backgroundColor: '#eeaa00',\n      color: \"rgb(100 50 99)\"\n    }\n  }, */\n  code: {\n    borderStyle: 'solid',\n    borderWidth: 1,\n    borderColor: '#d5d5d5',\n    '&:hover': {\n      borderColor: '#f0f0f0',\n      color: 'black'\n    }\n  },\n  container: {\n    paddingTop: 24,\n    backgroundColor: '#fafafa'\n  },\n  /* invisible: {\n    visibility: 'hidden'\n  }, */\n  smallFont: {\n    fontSize: '0.85rem',\n  },\n  left: {\n    marginLeft: '4px'\n  },\n  /* extraMarginTop: {\n    marginTop: '36px'\n  } */\n\n}));\n\nfunction App(props) {\n\n  const [presets, setPresets] = useState('whitebox');\n\n  const [psets, setPsets] = useState(illoPresets[presets]);\n\n  const stateVars = {\n    canvas_w: useState(psets.canvas_w),\n    canvas_h: useState(psets.canvas_h),\n    zoom: useState(psets.zoom),\n    dragRotate: useState(psets.dragRotate),\n    animate: useState(psets.animate),\n    rotate_x: useState(psets.rotate_x),\n    rotate_y: useState(psets.rotate_y),\n    rotate_z: useState(psets.rotate_z),\n    spin_x: useState(psets.spin_x),\n    spin_y: useState(psets.spin_y),\n    spin_z: useState(psets.spin_z),\n    easeIO: useState(psets.easeIO),\n    animateSelection: useState(psets.animateSelection),\n/*     demo: useState('lego'), */\n    fallback: useState(psets.fallback),\n    animationOption: useState(psets.animationOption),\n    bgColor: useState(psets.bgColor)\n  }\n\n  const addedShapes = useState(psets.shapeLayers);\n\n  const [open, setOpen] = useState(false);\n\n  /* const [snackbarOpen, setSnackbarOpen] = useState(false); */\n\n  let cursorFocus = useState({\n    'id': '',\n    'cursorPos': 0\n  });\n\n  const selectedNodeId = useState('canvasnode');\n\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const [editorVisibility, setEditorVisibility] = React.useState(false);\n\n  const classes = useStyles();\n\n  function updateAllPresets() {\n    //setPsets(illoPresets[presets]);\n    updateAllStateVars(illoPresets[presets]);\n    addedShapes[1](illoPresets[presets].shapeLayers);\n  }\n\n  function updateAllStateVars(selectedPresets) {\n    Object.keys(stateVars).forEach((param) => {\n      stateVars[param][1](selectedPresets[param]);\n    })\n  }\n\n  const handleClickMore = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleCloseMore = () => {\n    setAnchorEl(null);\n  };\n\n  const openInNewTab = (url) => {\n    handleCloseMore();\n    window.open(url);\n  }\n\n  function copyShapes() {\n    let newshapearry = [];\n    newshapearry.push(addedShapes[0]);\n    let flattened = newshapearry.flat();\n    return flattened;\n  }\n\n\n  function getDefaultValsForShapeProperties(defaultShapes, shapeClass) {\n\n    let zdogShape = defaultShapes[shapeClass];\n\n    let props_basic = (shapeClass === 'Group') ? ['translate', 'rotate'] : shapeProperties['basic'];\n\n    let props_shape = shapeProperties[shapeClass];\n    let data = {};\n    let faces = {};\n\n    props_basic.forEach((prop) => {\n      if (shapeClass === 'Shape' && prop === 'stroke') {\n        data[prop] = 20;\n      } else if (prop === 'translate' || prop === 'rotate') {\n        data[prop] = new Zdog.Vector({});\n      } else if (prop === 'backface' && !(shapeClass === 'Box')) { /* backface needs to remain set to default value of true for Box. If it is set to a color value then all Box-specific face colors do not render properly */\n        data[prop] = '#424242';\n      } else if (prop === 'color') {\n        data[prop] = '#5C5C5C';\n      } else {\n        let defaultVal = zdogShape[prop];\n        data[prop] = defaultVal;\n      }\n    })\n\n    props_shape.forEach((prop) => {\n      if (prop === 'width' || prop === 'height' || prop === 'depth' || prop === 'diameter' || prop === 'length' || prop === 'radius') {\n        data[prop] = 100;\n      } else if (prop.includes('Face')) {\n        if (prop === 'frontFace') {\n          data[prop] = '#B8B8B8';\n        } else if (prop === 'rearFace') {\n          data[prop] = '#424242';\n        } else {\n          data[prop] = '#5C5C5C';\n        }\n        faces[prop] = true;\n      } else if (prop === 'path') {\n        data[prop] = [{line: new Zdog.Vector({})}];\n        data.closed = false;\n      } else {\n        let defaultVal = zdogShape[prop];\n        data[prop] = defaultVal;\n      }\n    })\n\n    return { data, faces };\n\n  }\n\n\n  function addNewZdogShape(shapeClass, nodeId) {\n\n    let flattened = copyShapes();\n\n    //let shapeClass = (v === 'Sphere') ? 'Shape' : v;\n\n    let shapeDefaults = getDefaultValsForShapeProperties(zdogDefaultShapes, shapeClass);\n\n    let newshape = {\n      id: generateID(),\n      children: [],\n      open: true,\n      shapeClass: shapeClass,\n      data: shapeDefaults.data,\n      faces: shapeDefaults.faces\n    }\n\n    if (nodeId === \"canvasnode\") {\n\n      flattened.push(newshape);\n\n      // set selectedNodeId to newly added shape layer in tree\n      selectedNodeId[1]((flattened.length - 1).toString());\n\n    } else {\n      let posStrings = nodeId.split('_');\n      let posNums = posStrings.map((s) => Number(s));\n\n      let currentShape;\n\n      posNums.forEach((posNum, i) => {\n        if ((0 < i) && (i <= (posNums.length - 1))) {\n          currentShape = currentShape.children[posNum];\n        } else if (i === 0) {\n          currentShape = flattened[posNum];\n        }\n      })\n\n      currentShape.children.push(newshape);\n\n      // set selectedNodeId to newly added shape layer in tree\n      let childcount = currentShape.children.length;\n      selectedNodeId[1](nodeId + '_' + (childcount - 1));\n    }\n\n    addedShapes[1](flattened);\n\n  }\n\n  /* function getCode() {\n    console.log('getting code');\n    setOpen(true);\n  } */\n\n  console.log('selectedNodeId[0]: ' + selectedNodeId[0]);\n\n  useEffect(() => {\n    if (presets !== 'work_in_progress') {\n      console.log(`presets = '${presets}'`)\n      updateAllPresets();\n      setPresets('work_in_progress');\n    } else {\n      console.log(`presets = 'work_in_progress'`);\n    }\n  }, [presets]);\n\n\n  return (\n\n    <React.Fragment>\n\n      <AppBar elevation={0} position=\"fixed\" className={classes.bar}>\n        <Toolbar variant='dense' className={classes.toolbar}>\n          <Typography variant=\"h5\">\n            Zdog <span className={classes.purple}>UI</span>\n          </Typography>\n\n      {/*     <IconButton>\n            <CreateNewFolderIcon fontSize=\"small\" />\n          </IconButton> */}\n\n          <IlloToolbar setPresets={setPresets} selectedNodeId={selectedNodeId} setOpen={setOpen} />\n\n          <div>\n\n          {/* <IconButton>\n            <DeleteOutlinedIcon fontSize=\"small\" />\n          </IconButton>\n\n          <IconButton>\n            <AddIcon fontSize=\"small\" />\n          </IconButton> */}\n\n          {/* <IconButton className={classes.code} onClick={getCode} aria-label=\"source code\">\n            <CodeIcon fontSize=\"small\" />\n          </IconButton> */}\n\n          <IconButton className={classes.left} onClick={handleClickMore} aria-label=\"more\">\n            <MoreHorizIcon fontSize=\"small\" />\n          </IconButton>\n          <Menu\n            id=\"more-menu\"\n            anchorEl={anchorEl}\n            keepMounted\n            open={Boolean(anchorEl)}\n            onClose={handleCloseMore}\n          >\n            <MenuItem className={classes.smallFont} onClick={() => openInNewTab('https://github.com/oriane212/zdog-ui')} value=\"Zdog-UI on GitHub\">Zdog-UI on GitHub <OpenInNewIcon color='action' className={classes.left} fontSize=\"small\"/></MenuItem>\n            <MenuItem className={classes.smallFont} onClick={() => openInNewTab('https://zzz.dog/')} value=\"Zdog website\">Zdog website <OpenInNewIcon color='action' className={classes.left} fontSize=\"small\"/> </MenuItem>\n          </Menu>\n\n          </div>\n\n          {/* <div></div> */}\n\n          {/* <Button onClick={getCode} color=\"inherit\" startIcon={<CodeIcon />} aria-label=\"get code\" className={classes.getCode}>Get Code</Button> */}\n\n        </Toolbar>\n      </AppBar>\n\n      { open ? <SourceCodeDialog stateVars={stateVars} addedShapes={addedShapes} editorVisibility={[editorVisibility, setEditorVisibility]} open={[open, setOpen]} /> : ''}\n        \n\n      <main>\n\n        <IlloExplorer setPresets={setPresets} setOpen={setOpen} selectedNodeId={selectedNodeId} cursorFocus={cursorFocus} addNewZdogShape={addNewZdogShape} stateVars={stateVars} addedShapes={addedShapes}></IlloExplorer>\n        <Viewer shapes={addedShapes} stateVars={stateVars}></Viewer>\n        <Controls selectedNodeId={selectedNodeId} cursorFocus={cursorFocus} stateVars={stateVars} addedShapes={addedShapes}></Controls>\n      </main>\n\n    </React.Fragment>\n\n  );\n\n}\n\nexport default App;\n\n\n\n/* <AppBar position=\"static\" color=\"secondary\">\n          <Toolbar>\n            <Typography variant=\"h6\" >\n              Zdog UI\n            </Typography>\n              <IconButton edge=\"end\" color=\"inherit\" aria-label=\"get code\">\n              <CodeIcon />\n            </IconButton>\n          </Toolbar>\n        </AppBar>\n        */\n\n/*\n<header>\n<Typography variant=\"h6\">\nZdog UI\n</Typography>\n  <IconButton edge=\"end\" color=\"inherit\" aria-label=\"get code\">\n  <CodeIcon />\n</IconButton>\n</header>\n*/","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}