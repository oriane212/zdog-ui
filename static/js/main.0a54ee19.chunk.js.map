{"version":3,"sources":["generateID.js","components/RangeInput.js","components/Shape.js","components/Face.js","fixCamelCase.js","components/SingleParameterInput.js","components/ParameterSlider.js","components/RotateSliders.js","components/CanvasLayer.js","components/TranslateSliders.js","components/ShapeLayer.js","components/ShapeControls.js","components/Controls.js","components/Viewer.js","components/AddShapeMenu.js","components/ShapeTree.js","shapeProperties.js","createScript.js","App.js","reportWebVitals.js","index.js"],"names":["generateID","numbers","code","i","charAt","Math","floor","random","length","console","log","RangeInput","props","className","Typography","id","label","value","Slider","min","max","step","onChange","e","aria-labelledby","React","Component","useStyles","makeStyles","theme","checkboxFace","display","marginTop","parameterInline","margin","inlineCheckbox","width","disabledlabel","fontSize","color","labelsm","Face","side","copyOfShape","updateShapes","cursorFocus","shapeRefs","classes","propname","toUpperCase","slice","paramRef","useEffect","refocus","FormControl","FormControlLabel","control","Checkbox","checked","faces","size","type","data","inputref","disabled","fixCamelCase","str","caps","replaceLetter","letter","toLowerCase","newStr","replace","uc","parameter","SingleParameterInput","InputLabel","htmlFor","Input","inputRef","marginLeft","slider","marginBottom","ParameterSlider","marksArray","marks","newmarks","mark","Number","push","undefined","sublabel","tau","Zdog","TAU","marks_rotate","parameterGroup","RotateSliders","nodeId","rotateData","rotateSliders","forEach","axis","axisVal","round","PI","v","checkbox","inlinecheckbox","parameterSubGroup","parameterCheckbox","inlineParameterCheckbox","subparameter","myprimary","root","backgroundColor","addshape","height","add","li","paddingTop","paddingBottom","nested","body2","formControl","spacing","minWidth","smallFont","CanvasLayer","animateParameters","stateVars","canvas_w","setCanvas_w","canvas_h","setCanvas_h","dragRotate","setDragRotate","animate","setAnimate","rotate_x","rotate_y","rotate_z","spin_x","setSpin_x","spin_y","setSpin_y","spin_z","setSpin_z","easeIO","setEaseIO","animateSelection","setAnimateSelection","fallback","setFallback","checkCursorFocus","updateEaseIO","paramID","val","param","split","easeIO_copy","JSON","parse","stringify","Fragment","variant","toFixed","x","name","y","z","cycleCount","power","Tooltip","mediumFont","title","multiline","maxRows","target","Select","labelId","MenuItem","TranslateSliders","paddingLeft","textField","delete","confirmDialog","padding","ShapeLayer","selectedNodeId","addedShapes","shapes","setShapes","useState","basicRefs","useRef","copyShapes","newshapearry","flat","flattened","currentShape","posNums","map","s","posNum","children","locateShapeInAddedShapesTree","emptyOrNegative","controlType","splitElID","property","current","shapeProp","set","selectionStart","colorControls","shapeSpecificControls","faceControls","faceContainer","splitID","pos","focus","setSelectionRange","checkValueOnBlur","Object","keys","includes","shapeClass","faceComp","spi","cylinderFrontFace","frontFace","backface","createColorControls","fill","stroke","translate","onBlur","rotate","ShapeControls","Controls","illo","Viewer","refDragRotate","refAnimate","refRotate_x","refRotate_y","refRotate_z","isRotating","refSpin_x","refSpin_y","refSpin_z","refAnimateSelection","refEaseIOx","refEaseIOy","refEaseIOz","refEaseIOcycleCount","af","refEaseIOpower","createChildShapes","parent","parentInstance","shape","addTo","createIllo","Illustration","element","setSize","face","shapeInstance","updateRenderGraph","ticker","rotateIllo","cancelAnimationFrame","progress","tween","easeInOut","requestAnimationFrame","addbtn","AddShapeMenu","anchorEl","setAnchorEl","addNewZdogShape","handleClose","handleShapeSelect","IconButton","aria-controls","aria-haspopup","onClick","event","currentTarget","Menu","keepMounted","open","Boolean","onClose","overflowX","overflowY","window","innerHeight","item","inlineAdd","shapelabel","ShapeTree","expanded","setExpanded","confirmDialogOpen","setConfirmDialogOpen","copyArray","a","newArray","createTree","childrenArray","parentnodeid","p","TreeItem","toptreelevel","toString","pop","parentId","join","copied","checkParentExpanded","ButtonGroup","aria-label","Dialog","Container","Button","splice","lastpos","parentNodeId","n","TreeView","defaultCollapseIcon","defaultExpandIcon","selected","onNodeToggle","nodeIds","onNodeSelect","shapeProperties","createScript","illoVars","shapesCopy","endString","scriptString","shapeCount","parentName","dataString","newShapeString","concat","zdogDefaultShapes","Group","Ellipse","Rect","Box","Hemisphere","RoundedRect","Polygon","Cone","Cylinder","bar","getCode","right","position","paddingRight","container","demos","none","shapelayers","lego","Vector","App","demo","setOpen","setTimeout","divHTML","document","getElementById","jarHTML","CodeJar","Prism","highlightElement","snippet","updateCode","div","jar","fixed","replaceAll","removeAllDoubleDashQuotes","mycode","onUpdate","AppBar","elevation","Toolbar","startIcon","maxWidth","shapeDefaults","defaultShapes","zdogShape","props_shape","prop","defaultVal","getDefaultValsForShapeProperties","newshape","childcount","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0a54ee19.chunk.js","sourcesContent":["export default function generateID() {\n    const length = 5;\n    //const letters_no_o = \"ABCDEFGHIJKLMNPQRSTUVWXYZ\";\n    const numbers = \"0123456789\";\n    //const alphanumeric = letters_no_o.concat(numbers);\n    let code = '';\n    for (let i = 0; i < length; i++) {\n        code += numbers.charAt(Math.floor(Math.random() * numbers.length));\n    }\n    console.log(code);\n    return code;\n}","import Slider from '@material-ui/core/Slider';\nimport Typography from '@material-ui/core/Typography';\n\nfunction RangeInput(props) {\n    function handle_onChange(e) {\n        console.log('range input changed');\n        props.onChange(e);\n    }\n\n    return (\n        <div className=\"parameter\">\n            <Typography id={props.id}>{props.label}= {props.value}</Typography>\n            <Slider value={props.value} min={props.min} max={props.max} step={props.step} onChange={handle_onChange} aria-labelledby={props.id}/>\n        </div>\n    );\n}\n\nexport default RangeInput;\n\n/*\n\n<label htmlFor={props.id}>{props.label}= {props.value}</label>\n            <input type=\"range\" id={props.id} name=\"parameter\" value={props.value} min={props.min} max={props.max} step={props.step} disabled={props.disabled} onChange={handle_onChange}/>\n\n            */","import React from 'react';\nimport generateID from '../generateID';\nimport RangeInput from './RangeInput';\n\nclass Shape extends React.Component {\n    constructor(props) {\n        super(props);\n        this.canvasMin = Math.min(parseInt(this.props.appstate.canvas_width), parseInt(this.props.appstate.canvas_height));\n        this.shapes = this.props.appstate.shapes;\n        this.shapedata = this.shapes[this.props.id];\n        this.paramToInput = {\n            'diameter': 'createInputRange'\n        }\n        this.ellipse = ['diameter', 'stroke', 'color'];\n        this.handle_onChange = this.handle_onChange.bind(this);\n        this.createRangeInput = this.createRangeInput.bind(this);\n        //this.createControlsForNewEllipse = this.createControlsForNewEllipse.bind(this);\n        this.createControls = this.createControls.bind(this);\n        this.createParam = this.createParam.bind(this);\n    }\n\n    handle_onChange(e) {\n        console.log('shape component');\n        this.props.onChange(e);\n    }\n\n    \n    createRangeInput(paramclass, paramvalue) {\n        return (\n            <RangeInput \n                key={generateID()}\n                id={`${paramclass}1`} \n                label={paramclass}\n                name=\"parameter\"\n                value={paramvalue}\n                min={0}\n                max={this.canvasMin}\n                step={1}\n                disabled={false}\n                onChange={this.props.onChange}\n            ></RangeInput>\n        )\n    }\n\n    createParam(paramclass, paramvalue) {\n        return this.createRangeInput(paramclass, paramvalue);\n        //this.paramToInput[paramclass]\n    }\n    \n    /*\n    createControlsForNewEllipse(shapeid) {\n        let diameter = this.createRangeInput(this.paramClasses['diameter']);\n        let stroke = this.createRangeInput(this.paramClasses['stroke']);\n        let section = (\n            <section className=\"controls_shape\">\n                {diameter, stroke}\n            </section>\n        )\n        return section;\n    }\n    */\n\n    createControls() {\n        let inputs = this.shapedata.params.map((param) => {\n            let paramclass = Object.keys(param)[0];\n            let paramvalue = param[paramclass];\n            console.log(paramclass, paramvalue);\n            let inputcomponent = this.createParam(paramclass, paramvalue);\n            return inputcomponent;\n        })\n        return inputs;\n    }\n\n    render() {\n\n        let inputs = this.createControls();\n\n        return (\n            <section className=\"controls_shape\">\n                {inputs}\n            </section>\n            /*\n            <section className=\"controls_shape\" id={this.props.data.id}>\n                <h3>Ellipse</h3>\n                <div className=\"parameter\">\n                  <label htmlFor=\"diameter1\">Diameter = </label>\n                  <span id=\"diameter1value\">100</span>\n                  <input type=\"range\" className=\"diameter\" id=\"diameter1\" name=\"parameter_shape1\" min=\"0\" max=\"240\" value=\"100\"\n                    step=\"1\" />\n                </div>\n                <div className=\"parameter\">\n                  <label htmlFor=\"stroke1\">Stroke = </label>\n                  <span id=\"stroke1value\">20</span>\n                  <input type=\"range\" className=\"stroke\" id=\"stroke1\" name=\"parameter_shape1\" min=\"0\" max=\"240\" value=\"20\" step=\"1\"\n                    list=\"tickmarks_stroke\" />\n                </div>\n                <div className=\"parameter\">\n                  <label htmlFor=\"color1\">Color = </label>\n                  <span id=\"color1value\">#663366</span>\n                  <input type=\"color\" className=\"color\" id=\"color1\" name=\"parameter_shape1\" value=\"#663366\" />\n                </div>\n              </section>\n              */\n        );\n    }\n    \n}\n\nexport default Shape;","import React, { useEffect } from 'react';\nimport '../zdogui.css';\nimport { FormControl, FormControlLabel, Checkbox, makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n\n    checkboxFace: {\n        'padding-bottom': 12,\n        display: 'inline-block',\n        marginTop: 4\n    },\n    parameterInline: {\n        display: 'inline-block',\n        margin: 12\n    },\n    inlineCheckbox: {\n        display: 'inline-block',\n        marginTop: 2,\n        width: 70\n    },\n    disabledlabel: {\n        fontSize: 'small',\n        color: 'darkgray'\n    },\n    labelsm: {\n        fontSize: 'small'\n    },\n}));\n\nfunction Face(props) {\n\n    const index = 0;\n\n    const side = props.side;\n    const copyOfShape = props.copyOfShape;\n\n    const updateShapes = props.updateShapes;\n\n    let cursorFocus = props.cursorFocus;\n\n    let shapeRefs = props.shapeRefs;\n\n    const classes = useStyles();\n\n    let propname = `${side}Face`;\n\n    let label = (side[0].toUpperCase() + side.slice(1));\n\n    let paramRef = shapeRefs[propname];\n\n    useEffect(() => {\n        props.refocus(cursorFocus, shapeRefs);\n    }, [])\n\n\n    return (\n        <div>\n\n            <FormControl className={classes.inlineCheckbox}>\n                <FormControlLabel\n                    label={label}\n                    control={<Checkbox checked={(copyOfShape.faces[propname] === true) ? true : false} onChange={(e) => updateShapes(e, 'checkbox_face', `${propname}_${index}`, '')} size=\"small\" color=\"primary\" className={classes.checkboxFace} />}\n                />\n            </FormControl>\n\n            <FormControl className={classes.parameterInline}>\n                <input type=\"color\" id={`${propname}_` + index} value={(copyOfShape.faces[propname] === true) ? copyOfShape.data[propname] : copyOfShape.faces[propname]} onChange={(e) => updateShapes(e, 'color', `${propname}_${index}`, '')} inputref={paramRef} disabled={/* colorDisabled */(copyOfShape.faces[propname] !== true) ? true : false}></input>\n            </FormControl>\n        </div>\n    )\n}\n\nexport default Face;","export default function fixCamelCase(str, caps=true) {\n    \n    function replaceLetter(letter) {\n        let l = (caps) ? letter : letter.toLowerCase();\n        return (' ' + l);\n    }\n\n    let newStr = str.replace(/[A-Z]/g, replaceLetter);\n    \n    if (caps) {\n        let uc = newStr.charAt(0).toUpperCase();\n        newStr = uc + newStr.slice(1);\n    }\n    return newStr;\n}","import React, { useEffect, useRef} from 'react';\nimport '../zdogui.css';\nimport { FormControl, Input, InputLabel, makeStyles } from '@material-ui/core';\nimport fixCamelCase from '../fixCamelCase';\n\nconst useStyles = makeStyles((theme) => ({\n    parameter: {\n        display: 'block',\n        margin: 12\n    }\n}));\n\nfunction SingleParameterInput(props) {\n\n    const index = 0;\n    const copyOfShape = props.copyOfShape;\n\n    const parameter = props.parameter;\n\n    const label = fixCamelCase(parameter);\n\n    const updateShapes = props.updateShapes;\n\n    //let cursorFocus = props.cursorFocus;\n\n    /* let shapeRefs = props.shapeRefs; */\n\n    let paramRef =  props.paramRef;\n\n    const classes = useStyles();\n\n    /* useEffect(() => {\n        props.refocus(cursorFocus, shapeRefs);\n    }, []) */\n\n    return (\n\n        <FormControl className={classes.parameter}>\n            <InputLabel htmlFor={parameter + '_' + index}>{label}</InputLabel>\n            <Input inputRef={paramRef} id={parameter + '_' + index} value={copyOfShape.data[parameter]} disabled={false} onChange={(e) => updateShapes(e, 'textinput', `${parameter}_${index}`, '')} />\n        </FormControl>\n\n    )\n\n}\n\nexport default SingleParameterInput;","import React from 'react';\nimport '../zdogui.css';\nimport { FormControl, Slider, makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n    parameter: {\n        display: 'block',\n        margin: 12,\n        marginLeft: 4\n    },\n    slider: {\n        marginBottom: 36,\n        display: 'block',\n        fontSize: 'small'\n    },\n    label: {\n        fontSize: 'small',\n        'margin-bottom': 8,\n        marginTop: 24\n    }\n}));\n\nfunction ParameterSlider(props) {\n\n    const [id, label, value] = [props.id, props.label, props.value];\n\n    //const sublabel = props.sublabel;\n\n    const [min, max, step] = [props.min, props.max, props.step];\n\n    const onChange = props.onChange;\n\n    let marksArray;\n\n    // create marks if empty\n    if (props.marks.length < 2) {\n        console.log('INSIDE EMPTY MARKS')\n        let newmarks = [];\n        for (let i=min; i <= max; i++) {\n            let mark = { 'value': Number(i), 'label': `${i}`};\n            newmarks.push(mark);\n        }\n        console.log(newmarks);\n        marksArray = newmarks;\n    } else {\n        marksArray = props.marks;\n    }\n\n    const classes = useStyles();\n\n    return (\n        <FormControl className={classes.parameter}>\n            <p id={id + '_label'} className={classes.label}>{label} {props.sublabel !== undefined ? <span className='tinytext'>{props.sublabel}</span> : ''} </p>\n            <Slider className={classes.slider} id={id} value={value} min={min} max={max} step={step} marks={marksArray} onChange={onChange} aria-labelledby={id + '_label'} />\n        </FormControl>\n    )\n\n}\n\nexport default ParameterSlider;","import React from 'react';\nimport {makeStyles} from '@material-ui/core';\nimport '../zdogui.css';\nimport ParameterSlider from './ParameterSlider';\nimport Zdog from 'zdog';\n\nconst tau = Zdog.TAU;\n\nconst marks_rotate = [\n    {\n        value: 0,\n        label: '0',\n    },\n    {\n        value: tau / 12,\n        label: '30',\n    },\n    {\n        value: tau / 4,\n        label: '90',\n    },\n    {\n        value: tau / 2,\n        label: '180',\n    },\n    {\n        value: ((tau / 4) * 3),\n        label: '270',\n    },\n    {\n        value: tau\n    },\n];\n\nconst useStyles = makeStyles((theme) => ({\n    parameterGroup: {\n        display: 'block',\n        margin: 12,\n        marginTop: 24,\n        fontSize: 'small'\n    },\n    label: {\n        fontSize: 'small',\n        'margin-bottom': 14,\n        marginTop: 24\n    }\n}));\n\nfunction RotateSliders(props) {\n\n    const classes = useStyles();\n\n    let updateShapes = props.updateShapes;\n\n    let nodeId = props.nodeId;\n    let rotateData = props.rotateData;\n\n    let axes = ['x', 'y', 'z'];\n    let rotateSliders = [];\n\n    axes.forEach((axis, i) => {\n        let id = `rotate_${axis}_0`;\n        let axisVal = (nodeId === 'canvasnode') ? rotateData[`rotate_${axis}`][0] : rotateData[axis];\n        let slider = (\n            <ParameterSlider\n                key={i}\n                id={id}\n                label={`${axis} = ${Math.round((axisVal) * (180 / Math.PI))}`}\n                value={axisVal}\n                min={0} max={tau} step={tau / 72} marks={marks_rotate}\n                onChange={(nodeId === 'canvasnode') ? ((e, v) => rotateData[`rotate_${axis}`][1](v)) : ((e, v) => updateShapes(e, 'vector', id, v))}\n            />\n        )\n        rotateSliders.push(slider);\n    });\n\n    return (\n\n        <div className={classes.parameterGroup}>\n                <p className={classes.label}>Rotate</p>\n                {rotateSliders}\n        </div>\n    )\n}\n\nexport default RotateSliders;","import { Checkbox, FormControl, FormControlLabel, TextField, Tooltip, Badge, Select, MenuItem, Input, InputLabel, makeStyles, Slider, Typography } from '@material-ui/core';\nimport React from 'react';\nimport RotateSliders from './RotateSliders';\nimport ParameterSlider from './ParameterSlider';\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\nimport HelpIcon from '@material-ui/icons/Help';\n\nconst useStyles = makeStyles((theme) => ({\n    slider: {\n        width: 155,\n        display: 'block',\n        marginTop: 4,\n        marginBottom: 6,\n        marginLeft: 12\n    },\n    checkbox: {\n        'padding-bottom': 10\n    },\n    inlinecheckbox: {\n        'padding-bottom': 10,\n        display: 'inline-block'\n    },\n    parameter: {\n        display: 'block',\n        margin: 12\n    },\n    parameterSubGroup: {\n        display: 'block',\n        margin: 12,\n        marginTop: 12,\n        fontSize: 'small'\n    },\n    parameterCheckbox: {\n        display: 'block',\n        'margin-left': 12,\n        'margin-top': 3,\n        'margin-bottom': 3\n    },\n    inlineParameterCheckbox: {\n        display: 'inline-block',\n        'margin-left': 12,\n        'margin-top': 3,\n        'margin-bottom': 3\n    },\n    subparameter: {\n        'margin-left': 38,\n        'margin-top': 3,\n        'margin-bottom': 3\n    },\n    myprimary: {\n        color: \"black\"\n    },\n    root: {\n        /* backgroundColor: \"#f1f1f1\", */\n        backgroundColor: \"#f9f9f9\",\n        fontSize: '0.9rem'\n    },\n    addshape: {\n        width: 140,\n        height: 32\n    },\n    add: {\n        backgroundColor: 'dodgerblue',\n        color: 'white'\n    },\n    li: {\n        paddingTop: 4,\n        paddingBottom: 4\n    },\n    nested: {\n        paddingTop: 4,\n        paddingBottom: 4\n    },\n    body2: {\n        fontSize: '0.9rem'\n    },\n    sublabel: {\n        fontSize: 'small',\n        'margin-bottom': 14,\n        marginTop: 8,\n        marginLeft: 8\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    smallFont: {\n        fontSize: 'small'\n    },\n    /* mediumFont: {\n        fontSize: 16\n    } */\n}));\n\nfunction CanvasLayer(props) {\n\n    const stateVars = props.stateVars;\n    const [canvas_w, setCanvas_w] = [stateVars.canvas_w[0], stateVars.canvas_w[1]];\n    const [canvas_h, setCanvas_h] = [stateVars.canvas_h[0], stateVars.canvas_h[1]];\n    const [dragRotate, setDragRotate] = [stateVars.dragRotate[0], stateVars.dragRotate[1]];\n    const [animate, setAnimate] = [stateVars.animate[0], stateVars.animate[1]];\n    const [rotate_x, setRotate_x] = [stateVars.rotate_x[0], stateVars.rotate_x[1]];\n    const [rotate_y, setRotate_y] = [stateVars.rotate_y[0], stateVars.rotate_y[1]];\n    const [rotate_z, setRotate_z] = [stateVars.rotate_z[0], stateVars.rotate_z[1]];\n    const [spin_x, setSpin_x] = [stateVars.spin_x[0], stateVars.spin_x[1]];\n    const [spin_y, setSpin_y] = [stateVars.spin_y[0], stateVars.spin_y[1]];\n    const [spin_z, setSpin_z] = [stateVars.spin_z[0], stateVars.spin_z[1]];\n    const [easeIO, setEaseIO] = [stateVars.easeIO[0], stateVars.easeIO[1]];\n    const [animateSelection, setAnimateSelection] = [stateVars.animateSelection[0], stateVars.animateSelection[1]];\n    const [fallback, setFallback] = [stateVars.fallback[0], stateVars.fallback[1]];\n\n    let cursorFocus = props.cursorFocus;\n    let checkCursorFocus = props.checkCursorFocus;\n\n    const classes = useStyles();\n\n    const marks_cycleCount = [\n        {\n            value: 150,\n            label: 'short',\n        },\n        {\n            value: 450,\n            label: 'long',\n        }\n    ];\n\n    function updateEaseIO(paramID, val) {\n        let splitID = paramID.split('_');\n        let param = splitID[1];\n\n        let easeIO_copy = JSON.parse(JSON.stringify(easeIO));\n        easeIO_copy[param] = val;\n\n        setEaseIO(easeIO_copy);\n    }\n\n    function handleAnimateSelect(e) {\n        setAnimateSelection(e.target.value);\n    }\n\n    let animateParameters;\n\n    if (animateSelection === 'spin') {\n        animateParameters = (\n            <React.Fragment>\n                <FormControl className={classes.slider}>\n                    <Typography variant=\"body2\" id=\"spin_x_label\">x = {((spin_x) * (180 / Math.PI)).toFixed(1)} <span className='tinytext'>deg/rerender</span></Typography>\n                    <Slider className={classes.slider} id=\"spin_x\" value={spin_x} min={0} max={1} step={0.01} onChange={(e, v) => { setSpin_x(v); checkCursorFocus(); }} aria-labelledby=\"spin_x_label\" disabled={!animate} />\n                </FormControl>\n\n                <FormControl className={classes.slider}>\n                    <Typography variant=\"body2\" id=\"spin_y_label\">y = {((spin_y) * (180 / Math.PI)).toFixed(1)} <span className='tinytext'>deg/rerender</span></Typography>\n                    <Slider className={classes.slider} id=\"spin_y\" value={spin_y} min={0} max={1} step={0.01} onChange={(e, v) => { setSpin_y(v); checkCursorFocus(); }} aria-labelledby=\"spin_y_label\" disabled={!animate} />\n                </FormControl>\n\n                <FormControl className={classes.slider}>\n                    <Typography variant=\"body2\" id=\"spin_z_label\">z = {((spin_z) * (180 / Math.PI)).toFixed(1)} <span className='tinytext'>deg/rerender</span></Typography>\n                    <Slider className={classes.slider} id=\"spin_z\" value={spin_z} min={0} max={1} step={0.01} onChange={(e, v) => { setSpin_z(v); checkCursorFocus(); }} aria-labelledby=\"spin_z_label\" disabled={!animate} />\n                </FormControl>\n            </React.Fragment>\n        )\n    } else if (animateSelection === 'ease') {\n        animateParameters = (\n            <React.Fragment>\n                <div>\n                    <FormControl className={classes.inlineParameterCheckbox}>\n                        <FormControlLabel\n                            label=\"x\"\n                            control={<Checkbox className={classes.checkbox} checked={easeIO.x} onChange={() => { updateEaseIO(\"easeIO_x\", !easeIO.x); checkCursorFocus(); }} size=\"small\" name=\"easeIO_x\" id=\"easeIO_x\" color=\"primary\" />}\n                        />\n                    </FormControl>\n\n                    <FormControl className={classes.inlineParameterCheckbox}>\n                        <FormControlLabel\n                            label=\"y\"\n                            control={<Checkbox className={classes.checkbox} checked={easeIO.y} onChange={() => { updateEaseIO(\"easeIO_y\", !easeIO.y); checkCursorFocus(); }} size=\"small\" name=\"easeIO_y\" id=\"easeIO_y\" color=\"primary\" />}\n                        />\n                    </FormControl>\n\n                    <FormControl className={classes.inlineParameterCheckbox}>\n                        <FormControlLabel\n                            label=\"z\"\n                            control={<Checkbox className={classes.checkbox} checked={easeIO.z} onChange={() => { updateEaseIO(\"easeIO_z\", !easeIO.z); checkCursorFocus(); }} size=\"small\" name=\"easeIO_z\" id=\"easeIO_z\" color=\"primary\" />}\n                        />\n                    </FormControl>\n                </div>\n\n                <div className={classes.parameterSubGroup}>\n                    <ParameterSlider\n                        id='easeIO_cycleCount'\n                        label='Cycle'\n                        sublabel={`count = ${easeIO.cycleCount}`}\n                        value={easeIO.cycleCount}\n                        min={100} max={500} step={50} marks={marks_cycleCount}\n                        onChange={(e, v) => { updateEaseIO(\"easeIO_cycleCount\", v); checkCursorFocus(); }}\n                    />\n\n                    <ParameterSlider\n                        id='easeIO_power'\n                        label='Power'\n                        value={easeIO.power}\n                        min={2} max={5} step={1} marks={['']}\n                        onChange={(e, v) => { updateEaseIO(\"easeIO_power\", v); checkCursorFocus(); }}\n                    />\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    return (\n        <div>\n                      \n                <FormControl className={classes.parameter}>\n                    <InputLabel htmlFor=\"fallback\">Fallback Text { <Tooltip className={classes.mediumFont} title={<Typography variant=\"body2\">Alternative text added inside the canvas tags. Useful for assistive technology users (eg. screen readers) or browsers which don't support canvas rendering.</Typography>}><HelpIcon fontSize='inherit' /></Tooltip> }</InputLabel>\n                    \n                    <Input\n                        id=\"fallback\"\n                        multiline\n                        maxRows={8}\n                        value={fallback}\n                        onChange={(e) => { setFallback(e.target.value); checkCursorFocus();}}\n                    />\n                </FormControl>\n           \n            <FormControl className={classes.parameter}>\n                <InputLabel htmlFor=\"canvas_w\">Width</InputLabel>\n                <Input id=\"canvas_w\" value={canvas_w} disabled={false} onChange={\n                    (e) => { setCanvas_w(e.target.value); checkCursorFocus(); }\n                } />\n            </FormControl>\n\n            <FormControl className={classes.parameter}>\n                <InputLabel htmlFor=\"canvas_h\">Height</InputLabel>\n                <Input id=\"canvas_h\" value={canvas_h} disabled={false} onChange={(e) => { setCanvas_h(e.target.value); checkCursorFocus(); }} />\n            </FormControl>\n\n\n            <RotateSliders nodeId={'canvasnode'} rotateData={stateVars} updateShapes='' />\n\n\n            <FormControl className={classes.parameterCheckbox}>\n                <FormControlLabel\n                    label=\"Drag Rotate\"\n                    control={<Checkbox className={classes.checkbox} checked={dragRotate} onChange={() => { setDragRotate(!dragRotate); checkCursorFocus(); }} size=\"small\" name=\"dragRotate\" id=\"dragRotate\" color=\"primary\" />}\n                />\n            </FormControl>\n\n\n            <FormControl className={classes.parameterCheckbox}>\n                <FormControlLabel\n                    label=\"Animate\"\n                    control={<Checkbox className={classes.checkbox} checked={animate} onChange={() => { setAnimate(!animate); checkCursorFocus(); }} size=\"small\" name=\"animate\" id=\"animate\" color=\"primary\" />}\n                />\n            </FormControl>\n\n\n            <div className={classes.parameterSubGroup}>\n\n                <FormControl className={classes.formControl} disabled={!animate}>\n                    <Select\n                        labelId=\"animateSelection_label\"\n                        id=\"animateSelection\"\n                        value={animateSelection}\n                        onChange={handleAnimateSelect}\n                        className={classes.smallFont}\n                    >\n                        <MenuItem value='spin' className={classes.smallFont}>Continuous spin</MenuItem>\n                        <MenuItem value='ease' className={classes.smallFont}>Ease In/Out</MenuItem>\n                    </Select>\n                </FormControl>\n\n                {animate ? animateParameters : ''}\n\n            </div>\n\n        </div>\n    )\n\n\n}\n\nexport default CanvasLayer;","import React from 'react';\nimport { makeStyles } from '@material-ui/core';\nimport '../zdogui.css';\nimport ParameterSlider from './ParameterSlider';\nimport Zdog from 'zdog';\n\nconst tau = Zdog.TAU;\n\nconst useStyles = makeStyles((theme) => ({\n    parameterGroup: {\n        display: 'block',\n        margin: 12,\n        marginTop: 24,\n        fontSize: 'small'\n    },\n    label: {\n        fontSize: 'small',\n        'margin-bottom': 14,\n        marginTop: 24\n    }\n}));\n\nfunction TranslateSliders(props) {\n\n    const classes = useStyles();\n\n    let updateShapes = props.updateShapes;\n\n    let [x_limit, y_limit] = [Math.round(props.canvasDim[0] / 2), Math.round(props.canvasDim[1] / 2)];\n    let z_limit = Math.max(x_limit, y_limit);\n\n    const limits = [x_limit, y_limit, z_limit];\n\n    let nodeId = props.nodeId;\n    let translateData = props.translateData;\n\n    let axes = ['x', 'y', 'z'];\n    let translateSliders = [];\n\n    axes.forEach((axis, i) => {\n        let limit = limits[i];\n        let id = `translate_${axis}_0`;\n        let axisVal = (nodeId === 'canvasnode') ? translateData[`translate_${axis}`][0] : translateData[axis];\n        let slider = (\n            <ParameterSlider\n                key={i}\n                id={id}\n                label={`${axis} = ${Math.round(axisVal)}`}\n                value={axisVal}\n                min={0 - limit} max={limit} step={1} marks={\n                    [{\n                        value: 0 - limit,\n                        label: `-${limit}`,\n                    },\n                    {\n                        value: 0,\n                        label: '0',\n                    },\n                    {\n                        value: limit,\n                        label: `${limit}`,\n                    }]\n                }\n                onChange={(nodeId === 'canvasnode') ? ((e, v) => translateData[`translate_${axis}`][1](v)) : ((e, v) => updateShapes(e, 'vector', id, v))}\n            />\n        )\n        translateSliders.push(slider);\n    });\n\n    return (\n\n        <div className={classes.parameterGroup}>\n            <p className={classes.label}>Translate</p>\n            {translateSliders}\n        </div>\n    )\n}\n\nexport default TranslateSliders;","import React, { useRef, useEffect, useState } from 'react';\nimport '../zdogui.css';\nimport { FormControl, FormControlLabel, Input, InputLabel, Checkbox, makeStyles, Typography, Slider } from '@material-ui/core';\n\nimport Zdog from 'zdog';\nimport Face from './Face';\nimport SingleParameterInput from './SingleParameterInput';\nimport ParameterSlider from './ParameterSlider';\nimport fixCamelCase from '../fixCamelCase';\nimport CanvasLayer from './CanvasLayer';\nimport RotateSliders from './RotateSliders';\nimport TranslateSliders from './TranslateSliders';\n\n/* const tau = Zdog.TAU; */\n\nconst useStyles = makeStyles((theme) => ({\n    checkbox: {\n        'padding-bottom': 12\n    },\n    parameter: {\n        display: 'block',\n        margin: 12,\n        fontSize: 'small'\n    },\n    parameterInline: {\n        display: 'inline-block',\n        margin: 12\n    },\n    parameterGroup: {\n        display: 'block',\n        margin: 12,\n        marginTop: 24,\n        fontSize: 'small'\n    },\n    parameterCheckbox: {\n        display: 'block',\n        'margin-left': 12,\n        'margin-top': 3,\n        'margin-bottom': 3\n    },\n    subparameter: {\n        'margin-left': 32,\n        'margin-top': 3,\n        'margin-bottom': 3\n    },\n    nested: {\n        paddingLeft: theme.spacing(4),\n    },\n    '.MuiTypography-body1': {\n        fontSize: '0.5rem'\n    },\n    label: {\n        fontSize: 'small',\n        'margin-bottom': 14,\n        marginTop: 24\n    },\n    labelsm: {\n        fontSize: 'small',\n        display: 'inline-block',\n        width: 84\n    },\n    textField: {\n        width: 55,\n    },\n    delete: {\n        margin: 16,\n        color: 'red'\n    },\n    myprimary: {\n        color: \"black\"\n    },\n    confirmDialog: {\n        padding: 40\n    },\n    li: {\n        paddingTop: 4,\n        paddingBottom: 4\n    },\n    slider: {\n        marginBottom: 36,\n        marginLeft: 2,\n        display: 'block',\n        fontSize: 'small'\n    },\n    checkbox: {\n        'padding-bottom': 10\n    },\n    inlineCheckbox: {\n        display: 'inline-block',\n        marginTop: 2,\n        width: 70\n    },\n    checkboxFace: {\n        'padding-bottom': 12,\n        display: 'inline-block',\n        marginTop: 4\n    },\n    disabledlabel: {\n        fontSize: 'small',\n        color: 'darkgray'\n    }\n}));\n\nfunction ShapeLayer(props) {\n\n    let cursorFocus = props.cursorFocus;\n\n    console.log('cursorFocus = ', cursorFocus);\n\n    const index = 0;\n    const selectedNodeId = props.selectedNodeId;\n\n    //const shape = props.shape;\n    const [shapes, setShapes] = props.addedShapes;\n\n    const [confirmDialogOpen, setConfirmDialogOpen] = useState(false);\n\n    const basicRefs = {\n        \"stroke\": useRef(),\n        \"fill\": useRef(),\n        \"color\": useRef(),\n        \"backface\": useRef(),\n        \"translate_x\": useRef(),\n        \"translate_y\": useRef(),\n        \"translate_z\": useRef(),\n    }\n\n    const shapeRefs = {\n        \"width\": useRef(),\n        \"height\": useRef(),\n        \"depth\": useRef(),\n        \"diameter\": useRef(),\n        \"length\": useRef(),\n        \"cornerRadius\": useRef(),\n        \"radius\": useRef(),\n        \"sides\": useRef(),\n        \"frontFace\": useRef(),\n        \"rearFace\": useRef(),\n        \"topFace\": useRef(),\n        \"bottomFace\": useRef(),\n        \"leftFace\": useRef(),\n        \"rightFace\": useRef(),\n        \"quarters\": useRef()\n    }\n\n    const classes = useStyles();\n\n    function copyShapes() {\n        let newshapearry = [];\n        newshapearry.push(shapes);\n        let flattened = newshapearry.flat();\n        return flattened;\n    }\n\n    let flattened = copyShapes();\n\n    function locateShapeInAddedShapesTree(flattened) {\n\n        let posStrings = selectedNodeId[0].split('_');\n        let posNums = posStrings.map((s) => Number(s));\n\n        let currentShape;\n\n        posNums.forEach((posNum, i) => {\n            if ((0 < i) && (i <= (posNums.length - 1))) {\n                currentShape = currentShape.children[posNum];\n            } else if (i === 0) {\n                currentShape = flattened[posNum];\n            }\n        })\n\n        return currentShape;\n    }\n\n    const copyOfShape = (selectedNodeId[0] !== 'canvasnode') ? locateShapeInAddedShapesTree(flattened) : '';\n\n\n    const handleClick = () => {\n        let flattened = copyShapes();\n        flattened[index].open = !flattened[index].open;\n        setShapes(flattened);\n    };\n\n    function handleDelete() {\n        setConfirmDialogOpen(true);\n    }\n\n    function handleConfirm() {\n        let flattened = copyShapes();\n        flattened.splice(index, 1);\n        setShapes(flattened);\n        handleClose();\n    }\n\n    function handleClose() {\n        setConfirmDialogOpen(false);\n    }\n\n    let shapeParameters = [];\n\n    let emptyOrNegative = useRef([false, false]); // [value, axis]\n\n    function updateShapes(e, controlType, id = '', v = '') {\n\n        let splitElID = id.split('_');\n        let property = splitElID[0];\n        let axis = splitElID[1];\n\n        // vector vs non-vector\n        if (controlType === 'vector') {\n\n            let val;\n\n            if (property === 'translate') {\n                if (e.target.value.length === 1 && e.target.value === '-') {\n                    emptyOrNegative.current = ['-', axis];\n                    val = 0; // not shown to user\n                } else if (e.target.value.length === 0){\n                    emptyOrNegative.current = ['', axis];\n                    val = 0; // not shown to user\n                } else {\n                    val = Number(e.target.value);\n                    emptyOrNegative.current = [false, false];\n                }\n                \n            } else if (property === 'rotate') {\n                val = Number(v);\n            }\n\n            let shapeProp = copyOfShape.data[property];\n\n            if (axis === 'x') {\n                shapeProp.set({ x: val, y: shapeProp.y, z: shapeProp.z });\n            } else if (axis === 'y') {\n                shapeProp.set({ x: shapeProp.x, y: val, z: shapeProp.z });\n            } else {\n                shapeProp.set({ x: shapeProp.x, y: shapeProp.y, z: val });\n            }\n\n            cursorFocus[1](\n                {\n                    'id': id,\n                    'cursorPos': e.target.selectionStart\n                }\n            );\n\n        } else if (controlType === 'checkbox_face') {\n\n            if (e.target.checked) {\n                copyOfShape.data[property] = copyOfShape.faces[property];\n                copyOfShape.faces[property] = true;\n            } else {\n                copyOfShape.faces[property] = copyOfShape.data[property];\n                copyOfShape.data[property] = false;\n            }\n\n            cursorFocus[1]({\n                'id': '',\n                'cursorPos': 0\n            });\n\n        } else {\n\n            if (controlType === 'slider') {\n\n                copyOfShape.data[property] = v;\n\n                cursorFocus[1]({\n                    'id': '',\n                    'cursorPos': 0\n                });\n\n            } else {\n\n                if (controlType === 'checkbox') {\n\n                    copyOfShape.data[property] = !copyOfShape.data[property];\n                    cursorFocus[1]({\n                        'id': '',\n                        'cursorPos': 0\n                    });\n                } else if (controlType === 'textinput') {\n\n                    copyOfShape.data[property] = e.target.value;\n                    cursorFocus[1](\n                        {\n                            'id': e.target.id,\n                            'cursorPos': e.target.selectionStart\n                        }\n                    );\n                } else if (controlType === 'color') {\n\n                    copyOfShape.data[property] = e.target.value;\n                    cursorFocus[1]({\n                        'id': '',\n                        'cursorPos': 0\n                    });\n                }\n\n            }\n\n        }\n\n        if (emptyOrNegative.current === [false, false]) {\n            setShapes(flattened);\n        }\n\n    }\n\n    function createColorControls() {\n        let cylinderFrontFace = (\n            <FormControl className={classes.parameter}>\n                <label htmlFor={'frontFace_' + index} className={classes.labelsm}>Front Face</label>\n                <input type=\"color\" id={'frontFace_' + index} value={copyOfShape.data.frontFace} onChange={(e) => updateShapes(e, 'color', `frontFace_${index}`, '')} inputref={shapeRefs['frontFace']}></input>\n            </FormControl>\n        )\n    \n        let colorControls = (\n            <React.Fragment>\n                <FormControl className={classes.parameter}>\n                    <label htmlFor={'color_' + index} className={classes.labelsm}>Color</label>\n                    <input type=\"color\" id={'color_' + index} value={copyOfShape.data.color} onChange={(e) => updateShapes(e, 'color', `color_${index}`, '')} inputref={basicRefs['color']}></input>\n                </FormControl>\n                <FormControl className={classes.parameter}>\n                    <label htmlFor={'backface_' + index} className={classes.labelsm}>Back Face</label>\n                    <input type=\"color\" id={'backface_' + index} value={copyOfShape.data.backface} onChange={(e) => updateShapes(e, 'color', `backface_${index}`, '')} inputref={basicRefs['backface']}></input>\n                </FormControl>\n                {(copyOfShape.shapeClass === 'Cylinder') ? cylinderFrontFace : ''}\n            </React.Fragment>\n        );\n\n        return colorControls;\n    }\n\n\n    let colorControls = '';\n\n    let shapeSpecificControls = [];\n    let faceControls = [];\n    let faceContainer = (\n        <div className={classes.parameterGroup}>\n            <p className={classes.label}>Faces</p>\n            {faceControls}\n        </div>\n    );\n\n    if (selectedNodeId[0] !== 'canvasnode') {\n        createControls();\n        colorControls = createColorControls();\n    }\n\n    function createControls() {\n\n        Object.keys(shapeRefs).forEach((property) => {\n            if (copyOfShape.data[property] !== undefined) {\n                if (property.includes('Face') && (copyOfShape.shapeClass === 'Box')) {\n                    let side = property.split('F')[0];\n                    let faceComp = <Face side={side} copyOfShape={copyOfShape} updateShapes={updateShapes} cursorFocus={cursorFocus} refocus={refocus} shapeRefs={shapeRefs} />\n                    faceControls.push(faceComp);\n                } else if (property === 'quarters' || property === 'sides') {\n                    let min = (property === 'quarters') ? 1 : 3;\n                    let max = (property === 'quarters') ? 4 : 12;\n                    let id = `${property}_${index}`;\n                    let slider = (\n                        <ParameterSlider\n                            id={id}\n                            label={fixCamelCase(property)}\n                            value={copyOfShape.data[property]}\n                            min={min} max={max} step={1} marks={['']}\n                            onChange={(e, v) => updateShapes(e, 'slider', id, v)}\n                        />\n                    )\n                    shapeSpecificControls.push(slider);\n                } else if (property !== 'frontFace') {\n                    let spi = <SingleParameterInput parameter={property} copyOfShape={copyOfShape} updateShapes={updateShapes} paramRef={shapeRefs[property]} />\n                    shapeSpecificControls.push(spi);\n                }\n            }\n        })\n\n        if (faceControls.length !== 0) {\n            shapeSpecificControls.push(faceContainer);\n        }\n\n    }\n\n    function refocus(cursorFocus, shapeRefs) {\n        if (cursorFocus[0]['id'] !== '') {\n\n            let splitID = cursorFocus[0]['id'].split('_');\n            console.log(splitID);\n\n            let property;\n\n            if (splitID.length === 3) {\n                console.log('equal to 3');\n                property = `${splitID[0]}_${splitID[1]}`;\n            } else {\n                property = `${splitID[0]}`;\n            }\n\n            let pos = cursorFocus[0]['cursorPos'];\n\n\n            let paramRef = (shapeRefs[property] !== undefined) ? shapeRefs[property] : basicRefs[property];\n\n            if (paramRef !== undefined) {\n                if (paramRef.current !== undefined && paramRef.current !== null) {\n                    paramRef.current.focus();\n                    if (pos !== 0) {\n                        paramRef.current.setSelectionRange(pos, pos);\n                    }\n                }\n            }\n        }\n    }\n\n    function checkValueOnBlur(e, type, id, v) {\n        if (e.target.value === '-' || e.target.value.length === 0) {\n            let validVal = 0;\n            e.target.value = validVal;\n            updateShapes(e, type, id, v);\n        }\n    }\n\n\n    function renderLayerControls() {\n        if (selectedNodeId[0] === 'canvasnode') {\n            return (\n                <CanvasLayer checkCursorFocus={props.checkCursorFocus} cursorFocus={cursorFocus} stateVars={props.stateVars} updateShapes={updateShapes}></CanvasLayer>\n            )\n        } else {\n            return (\n\n                <div>\n\n                    {(copyOfShape.shapeClass !== 'Box' && copyOfShape.shapeClass !== 'Group') ? colorControls : ''}\n\n                    {(copyOfShape.shapeClass !== 'Group') ? (\n\n                        <React.Fragment>\n\n                        <FormControl className={classes.parameterCheckbox}>\n                        <FormControlLabel\n                            label=\"Fill\"\n                            control={<Checkbox inputRef={basicRefs['fill']} checked={copyOfShape.data.fill} onChange={(e) => updateShapes(e, 'checkbox', `fill_${index}`, '')} size=\"small\" /* name={'fill_' + index} */ id={'fill_' + index} color=\"primary\" className={classes.checkbox} />}\n                        />\n                        </FormControl>\n                        \n                        <FormControl className={classes.parameter}>\n                        <InputLabel htmlFor={'stroke_' + index}>Stroke</InputLabel>\n                        <Input inputRef={basicRefs['stroke']} id={'stroke_' + index} value={copyOfShape.data.stroke} disabled={false} onChange={(e) => { updateShapes(e, 'textinput', `stroke_${index}`, ''); console.log(e.target.selectionStart) }} />\n                    </FormControl>\n\n                    </React.Fragment>\n\n                    ) : ''}\n                    \n\n                    <div className={classes.parameter}>\n\n                        <p className={classes.label}>Translate</p>\n\n                        <FormControl className={classes.textField}>\n                            <InputLabel htmlFor={'translate_x_' + index}>x</InputLabel>\n                            <Input inputRef={basicRefs['translate_x']} id={'translate_x_' + index} \n                            value={emptyOrNegative.current[1] === 'x' ? emptyOrNegative.current[0] : copyOfShape.data.translate.x} \n                            onBlur={(e) => checkValueOnBlur(e, 'vector', `translate_x_${index}`, '')}\n                            disabled={false} onChange={(e) => updateShapes(e, 'vector', `translate_x_${index}`, '')} />\n                        </FormControl>\n\n                        <FormControl className={classes.textField}>\n                            <InputLabel htmlFor={'translate_y_' + index}>y</InputLabel>\n                            <Input inputRef={basicRefs['translate_y']} id={'translate_y_' + index} value={emptyOrNegative.current[1] === 'y' ? emptyOrNegative.current[0] : copyOfShape.data.translate.y} onBlur={(e) => checkValueOnBlur(e, 'vector', `translate_y_${index}`, '')} disabled={false} onChange={(e) => updateShapes(e, 'vector', `translate_y_${index}`, '')} />\n                        </FormControl>\n\n                        <FormControl className={classes.textField}>\n                            <InputLabel htmlFor={'translate_z_' + index}>z</InputLabel>\n                            <Input inputRef={basicRefs['translate_z']} id={'translate_z_' + index} value={emptyOrNegative.current[1] === 'z' ? emptyOrNegative.current[0] : copyOfShape.data.translate.z} onBlur={(e) => checkValueOnBlur(e, 'vector', `translate_z_${index}`, '')} disabled={false} onChange={(e) => updateShapes(e, 'vector', `translate_z_${index}`, '')} />\n                        </FormControl>\n\n                    </div>\n\n                    <RotateSliders nodeId={selectedNodeId[0]} rotateData={copyOfShape.data.rotate} updateShapes={updateShapes} />\n\n                    {shapeSpecificControls}\n\n                </div>\n\n\n            )\n        }\n    }\n\n\n    useEffect(() => {\n        refocus(cursorFocus, shapeRefs);\n    }, []);\n\n    return (\n        <React.Fragment>\n            {renderLayerControls()}\n        </React.Fragment>\n    )\n}\n\nexport default ShapeLayer;\n\n/* TO FIX:\n       x all open after each update to shapes - needs to remember which were open and closed\n       .. no input refocus\n           x shapelayer input still in focus while interacting with canvas inputs (eg. after typing once in the canvas width field, it jumps back to whatever shapelayer input you last updated)\n           x refocus to string index or character where cursor was last\n           x negative numbers and zeros\n           x color picker issue: can no longer drag to update\n\n       x rm Material UI List click animation\n       .. input styles\n\n       - safari: webpage reload on color picker (??)\n   */\n\n/* TO ADD:\n    .. other shape properties\n    .. additional specific shape properties\n\n    features\n    x remove a layer\n    - edit layer name\n    - undo last change?\n\n    minor\n    .. replace stars with icons that match shapeclass?\n*/","import React, { useState, useEffect, useRef } from 'react';\nimport Shape from './Shape';\nimport { Button, FormControl, Input, IconButton, makeStyles } from '@material-ui/core';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport List from '@material-ui/core/List';\nimport AddIcon from '@material-ui/icons/Add';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport generateID from '../generateID';\n// import Ellipse from './Ellipse';\nimport ShapeLayer from './ShapeLayer';\n\n\nconst useStyles = makeStyles((theme) => ({\n    slider: {\n        width: 200\n    },\n    checkbox: {\n        'padding-bottom': 12\n    },\n    parameter: {\n        display: 'block',\n        margin: 16\n    },\n    subparameter: {\n        'margin-left': 32,\n        'margin-top': 3,\n        'margin-bottom': 3\n    },\n    root: {\n        backgroundColor: \"#f1f1f1\"\n    }\n}));\n\nfunction ShapeControls(props) {\n\n    /* let inputRef1 = useRef();\n    let inputRef2 = useRef();\n\n    let inputNum = useRef(0); */\n\n    /* const shapeLayers = {\n        'Ellipse': (<Ellipse />)\n    } */\n\n    //const [selectShapeValue, setSelectShapeValue] = useState('Ellipse');\n\n    const addedShapes = props.addedShapes;\n    const [shapes, setShapes] = [addedShapes[0], addedShapes[1]];\n\n    const classes = useStyles();\n\n    /* function copyShapes() {\n        let newshapearry = [];\n        newshapearry.push(shapes);\n        let flattened = newshapearry.flat();\n        return flattened;\n    } */\n\n    /* function handle_onChange(shape, index) {\n        let flattened = copyShapes();\n        flattened[index] = shape;\n        setShapes(flattened);\n    } */\n\n    /*\n    function handle_onAdd(e) {\n        //if (selectShapeValue === 'Ellipse') {\n            let newshape = {\n                //shapeid: 0,\n                shapeClass: selectShapeValue,\n                //params: shapeparams[selectShapeValue]\n                params: []\n            }\n            let flattened = copyShapes();\n            flattened.push(newshape);\n            setShapes(flattened);\n        //}\n    }\n    */\n\n    /*   function handleTest(e) {\n        \n          let [parameter, shapeindex] = e.target.id.split('_');\n  \n          if (parameter === 'diameter') {\n              inputNum.current = 1;\n          } else {\n              inputNum.current = 2;\n          }\n  \n          console.log(e.target);\n  \n          let flattened = copyShapes();\n          flattened[shapeindex].data[parameter] = e.target.value;\n  \n          setShapes(flattened);\n      } */\n\n\n    /* function refocus(ref) {\n        ref.current.focus();\n    }\n */\n\n    let shapeLayers = [];\n    if (shapes.length > 0) {\n        shapeLayers = shapes.map((shape, i) => {\n\n            return (\n                \n                <ShapeLayer cursorFocus={props.cursorFocus} key={generateID()} index={i} shape={shape} addedShapes={addedShapes} />\n\n\n                /*  <ShapeLayer key={generateID()} index={i} shape={shape} addedShapes={addedShapes}></ShapeLayer> */\n\n            )\n            /*\n            if (shape.shapeClass === 'Ellipse') {\n                return (\n                    <Ellipse key={generateID()} index={i} shape={shape} stateShapes={stateShapes} onChange={handle_onChange}></Ellipse>\n                )\n            }*/\n            /*\n            return (\n                <Shape key={generateID()} id={shape.shapeid} appstate={this.props.appstate} onChange={this.handle_onChange}></Shape>\n            )\n            */\n        })\n    }\n\n    /* function handle_onAdd() {\n        props.addNewZdogShape(selectShapeValue);\n    } */\n\n    /* useEffect(() => {\n\n        if (shapes.length > 0) {\n            //console.log(inputRef);\n            //refocus(uiEls[refIndex[0]]);\n            if (inputNum.current === 1) {\n                refocus(inputRef1);\n                //inputRefs[1].current.focus();\n            } else if (inputNum.current === 2) {\n                refocus(inputRef2);\n                //inputRefs[2].current.focus();\n            }\n        }\n\n\n    }, [shapes]); */\n\n    return (\n        <section className=\"controls_shape\">\n\n            {/* <header>\n                <FormControl>\n                    <InputLabel id=\"new-shape-label\">\n                        Shape\n                        </InputLabel>\n                    <Select value={selectShapeValue} onChange={(e) => setSelectShapeValue(e.target.value)}>\n                        <MenuItem value=\"Ellipse\">Ellipse</MenuItem>\n                        <MenuItem value=\"Rect\">Rect</MenuItem>\n                    </Select>\n                </FormControl>\n                \n                <div className=\"btnContainer\">\n                    <IconButton onClick={handle_onAdd} aria-label=\"add\">\n                        <AddIcon color=\"primary\" fontSize=\"small\" />\n                    </IconButton>\n                </div>\n            </header> */}\n\n            <div className=\"controlsContainer\">\n                <List component=\"div\" aria-labelledby=\"nested-list-subheader\"\n                    /* subheader={\n                        <ListSubheader component=\"div\" id=\"nested-list-subheader\">\n                            Shapes\n                        </ListSubheader>\n                    }  */className={classes.root}>\n                    {shapeLayers}\n                </List>\n\n            </div>\n\n        </section>\n    );\n\n\n}\n\nexport default ShapeControls;\n\n/*\n\n<Button onClick={handle_onAdd} color=\"primary\" startIcon={<AddIcon />} aria-label=\"add shape\">Add</Button>\n\n\n<select name=\"selectShape\" id=\"selectShape\" onChange={this.handle_selectShape}>\n                        <option value=\"\">New shape</option>\n                        <option value=\"Ellipse\">Ellipse</option>\n                    </select>\n                    */\n//<button id=\"addShapeBtn\" onClick={this.handle_onAdd}>Add</button>\n//<Button color=\"primary\" onClick={this.handle_onAdd} startIcon={<AddIcon />}>Add Shape</Button>\n\n/*\n<MenuItem value=\"Rectangle\">Rectangle</MenuItem>\n                        <MenuItem value=\"Triangle\">Triangle</MenuItem>\n                        */\n\n\n/* (el) => inputRefs[1].current = el */","import React, { useEffect, useState } from 'react';\nimport '../zdogui.css';\nimport { Button, ButtonGroup, Collapse, createMuiTheme, FormControl, FormControlLabel, IconButton, Input, InputLabel, List, ListItem, ListItemText, ListSubheader, makeStyles, MenuItem, Select } from '@material-ui/core';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Slider from '@material-ui/core/Slider';\nimport Typography from '@material-ui/core/Typography';\nimport ShapeControls from './ShapeControls';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport AddIcon from '@material-ui/icons/Add';\nimport CanvasLayer from './CanvasLayer';\nimport ShapeLayer from './ShapeLayer';\n\n/* const themeBody2 = createMuiTheme({\n    props: {\n      MuiTypography: {\n        variantMapping: {\n          body2: 'span'\n        },\n      },\n    },\n  }); */\n\n\nconst useStyles = makeStyles((theme) => ({\n    slider: {\n        width: 155\n    },\n    checkbox: {\n        'padding-bottom': 10\n    },\n    parameter: {\n        display: 'block',\n        margin: 12\n    },\n    parameterCheckbox: {\n        display: 'block',\n        'margin-left': 12,\n        'margin-top': 3,\n        'margin-bottom': 3\n    },\n    subparameter: {\n        'margin-left': 38,\n        'margin-top': 3,\n        'margin-bottom': 3\n    },\n    myprimary: {\n        color: \"black\"\n    },\n    root: {\n        /* backgroundColor: \"#f1f1f1\", */\n        backgroundColor: \"#f9f9f9\",\n        fontSize: '0.9rem'\n    },\n    addshape: {\n        width: 140,\n        height: 32\n    },\n    add: {\n        backgroundColor: 'dodgerblue',\n        color: 'white'\n    },\n    li: {\n        paddingTop: 4,\n        paddingBottom: 4\n    },\n    nested: {\n        paddingTop: 4,\n        paddingBottom: 4\n    },\n    body2: {\n        fontSize: '0.9rem'\n    }\n}));\n\nfunction Controls(props) {\n\n    const stateVars = props.stateVars;\n\n    //const [shapes, setShapes] = [stateVars.shapes[0], stateVars.shapes[1]];\n\n    const [canvasLayerOpen, setCanvasLayerOpen] = useState(true);\n\n    const [selectShapeValue, setSelectShapeValue] = useState('Ellipse');\n\n    let cursorFocus = props.cursorFocus;\n\n    const classes = useStyles();\n\n    function handle_onAdd() {\n        props.addNewZdogShape(selectShapeValue);\n        checkCursorFocus();\n    }\n\n    function checkCursorFocus() {\n        console.log('inside cursor check');\n        if (cursorFocus[0]['id'] !== '') {\n            cursorFocus[1]({\n                'id': '',\n                'cursorPos': 0\n              });\n            console.log('cursorFocus reset');\n        }\n    }\n\n    /* function renderLayerControls() {\n\n        if (props.selectedNodeId[0] === 'canvasnode') {\n            return (\n                <CanvasLayer checkCursorFocus={checkCursorFocus} cursorFocus={cursorFocus} stateVars={stateVars}></CanvasLayer>\n            )\n        } else {\n            return (\n                <ShapeLayer selectedNodeId={props.selectedNodeId} addedShapes={props.addedShapes} checkCursorFocus={checkCursorFocus} cursorFocus={cursorFocus} stateVars={stateVars}></ShapeLayer>\n            )\n        }\n    } */\n\n    return (\n\n        <section className=\"controls\">\n\n            {/* <div className=\"controlsContainer\" id=\"addShapeHeader\">\n            <header>\n                <ButtonGroup>\n                <Select color=\"primary\" className={classes.addshape} value={selectShapeValue} onChange={(e) => {setSelectShapeValue(e.target.value); checkCursorFocus()}}>\n                        <MenuItem value=\"Ellipse\">Ellipse</MenuItem>\n                        <MenuItem value=\"Rect\">Rect</MenuItem>\n                    </Select>\n                    <Button id=\"add\" className={classes.add} onClick={handle_onAdd} aria-label=\"add\">\n                        <AddIcon fontSize=\"small\" />\n                    </Button>\n                </ButtonGroup>\n                \n            </header>\n            </div> */}\n\n            <section className=\"controls_illo\">\n                <div className=\"controlsContainer\">\n\n                    {/* <List component=\"div\" aria-labelledby=\"nested-list-subheader-canvas\" className={classes.root}>\n                        <ListItem className={classes.li}>\n                            <ListItemText primary=\"Canvas\" />\n                            {canvasLayerOpen ?\n                                <IconButton onClick={() => setCanvasLayerOpen(!canvasLayerOpen)} className={classes.myprimary} aria-label=\"Expand less\"><ExpandLess /></IconButton>\n                                :\n                                <IconButton onClick={() => setCanvasLayerOpen(!canvasLayerOpen)} className={classes.myprimary} aria-label=\"Expand more\"><ExpandMore /></IconButton>\n                            }\n                        </ListItem>\n\n                        <Collapse in={canvasLayerOpen} timeout=\"auto\" unmountOnExit>\n                            <List component=\"div\" disablePadding>\n\n                                <ListItem className={classes.nested}> */}\n                                \n                    {/* {renderLayerControls()} */}\n                    <ShapeLayer selectedNodeId={props.selectedNodeId} addedShapes={props.addedShapes} checkCursorFocus={checkCursorFocus} cursorFocus={cursorFocus} stateVars={stateVars}></ShapeLayer>\n\n                            {/*     </ListItem>\n\n                            </List>\n                        </Collapse>\n\n\n\n                    </List> */}\n\n                </div>\n\n            </section>\n                \n        </section>\n\n    )\n\n}\n\n/*\n{(props.addedShapes[0].length > 0) ? <ShapeControls cursorFocus={cursorFocus} addNewZdogShape={props.addNewZdogShape} addedShapes={props.addedShapes}></ShapeControls> : ''}\n*/\n\nexport default Controls;","import React, { useEffect, useState, useRef } from 'react';\nimport '../zdogui.css';\n\nimport Zdog from 'zdog';\n\nlet illo = '';\n\nfunction Viewer(props) {\n\n    const stateVars = props.stateVars;\n    const shapes = props.shapes;\n    \n    const refDragRotate = useRef(stateVars.dragRotate[0]);\n    refDragRotate.current = stateVars.dragRotate[0];\n\n    const refAnimate = useRef(stateVars.animate[0]);\n    refAnimate.current = stateVars.animate[0];\n\n    const refRotate_x = useRef(stateVars.rotate_x[0]);\n    refRotate_x.current = stateVars.rotate_x[0];\n\n    const refRotate_y = useRef(stateVars.rotate_y[0]);\n    refRotate_y.current = stateVars.rotate_y[0];\n\n    const refRotate_z = useRef(stateVars.rotate_z[0]);\n    refRotate_z.current = stateVars.rotate_z[0];\n\n    const isRotating = useState(false);\n\n    const refSpin_x = useRef(stateVars.spin_x[0]);\n    refSpin_x.current = stateVars.spin_x[0];\n\n    const refSpin_y = useRef(stateVars.spin_y[0]);\n    refSpin_y.current = stateVars.spin_y[0];\n\n    const refSpin_z = useRef(stateVars.spin_z[0]);\n    refSpin_z.current = stateVars.spin_z[0];\n\n    const refAnimateSelection = useRef(stateVars.animateSelection[0]);\n    refAnimateSelection.current = stateVars.animateSelection[0];\n\n    const refEaseIOx = useRef(stateVars.easeIO[0].x);\n    refEaseIOx.current = stateVars.easeIO[0].x;\n\n    const refEaseIOy = useRef(stateVars.easeIO[0].y);\n    refEaseIOy.current = stateVars.easeIO[0].y;\n\n    const refEaseIOz = useRef(stateVars.easeIO[0].z);\n    refEaseIOz.current = stateVars.easeIO[0].z;\n\n    const refEaseIOcycleCount = useRef(stateVars.easeIO[0].cycleCount);\n    refEaseIOcycleCount.current = stateVars.easeIO[0].cycleCount;\n\n    const refEaseIOpower = useRef(stateVars.easeIO[0].power);\n    refEaseIOpower.current = stateVars.easeIO[0].power;\n\n    let af;\n\n    function createChildShapes(parent, parentInstance) {\n        if (parent.children.length > 0) {\n            parent.children.forEach((shape) => {\n                shape.data.addTo = parentInstance;\n                let shapeInstance = new Zdog[shape.shapeClass](shape.data);\n                createChildShapes(shape, shapeInstance);\n            })\n        }\n    }\n\n    function copyShapes() {\n        let newshapearry = [];\n        newshapearry.push(shapes[0]);\n        let flattened = newshapearry.flat();\n        return flattened;\n      }\n\n    function createIllo() {\n\n        illo = new Zdog.Illustration({\n          element: '#illo',\n          dragRotate: stateVars.dragRotate[0],\n          rotate: {\n              x: refRotate_x.current,\n              y: refRotate_y.current,\n              z: refRotate_z.current\n          }\n        })\n    \n        illo.setSize(stateVars.canvas_w[0], stateVars.canvas_h[0]);\n\n        let copiedshapes = shapes[0].slice(0, shapes[0].length);\n    \n        copiedshapes.forEach((shape) => {\n          console.log(shape);\n          shape.data.addTo = illo;\n          // check face props and replace color value with false if actually false\n          if (Object.keys(shape.faces).length !== 0) {\n              Object.keys(shape.faces).forEach((face) => {\n                  if (shape.faces[face] === false) {\n                      shape.data[face] = false;\n                  }\n              })\n          }\n          let shapeInstance = new Zdog[shape.shapeClass](shape.data);\n          createChildShapes(shape, shapeInstance);\n        })\n    \n        illo.updateRenderGraph();\n\n        console.log('illo = ', illo);\n    \n      }\n\n    let ticker = 0;\n    \n    function rotateIllo() {\n\n        if (refAnimate.current === false && refDragRotate.current === false) {\n            console.log('canceling animation frame');\n            cancelAnimationFrame(af);\n            illo.rotate.x = refRotate_x.current;\n            illo.rotate.y = refRotate_y.current;\n            illo.rotate.z = refRotate_z.current;\n            illo.updateRenderGraph();\n\n            isRotating[1](false);\n\n        } else {\n        \n            if (refAnimate.current === true) {\n\n                if (refAnimateSelection.current === 'spin') {\n\n                    if (refSpin_x.current === 0) {\n                        illo.rotate.x = refRotate_x.current;\n                    } else {\n                        illo.rotate.x += (refSpin_x.current);\n                    }\n                    if (refSpin_y.current === 0) {\n                        illo.rotate.y = refRotate_y.current;\n                    } else {\n                        illo.rotate.y += (refSpin_y.current);\n                    }\n                    if (refSpin_z.current === 0) {\n                        illo.rotate.z = refRotate_z.current;\n                    } else {\n                        illo.rotate.z += (refSpin_z.current);\n                    }\n\n                } else if (refAnimateSelection.current === 'ease') {\n\n                    // Zdog animate fn for easeInOut()\n                    let progress = ticker / refEaseIOcycleCount.current;\n                    // apply easing to rotation\n                    let tween = Zdog.easeInOut( progress % 1, refEaseIOpower.current );\n\n                    if (refEaseIOx.current) {\n                        illo.rotate.x = tween * Zdog.TAU;\n                    }\n                    if (refEaseIOy.current) {\n                        illo.rotate.y = tween * Zdog.TAU;\n                    }\n                    if (refEaseIOz.current) {\n                        illo.rotate.z = tween * Zdog.TAU;\n                    }\n\n                    ticker++;\n\n                }\n\n            }\n\n            illo.updateRenderGraph();\n            af = requestAnimationFrame(rotateIllo);\n \n        }\n    }\n\n    useEffect(() => {\n        createIllo();\n    })\n\n    useEffect(() => {\n\n        if (illo !== '' && (stateVars.animate[0] | stateVars.dragRotate[0]) && isRotating[0] === false) {\n            console.log(\"was not rotating\");\n            isRotating[1](true);\n            rotateIllo();\n        }\n\n    }, [stateVars.animate[0], stateVars.dragRotate[0]]);\n\n    return (\n        <section className=\"results\">\n            <section className=\"illustration\" width={stateVars.canvas_w[0]} height={stateVars.canvas_h[0]}>\n                <canvas id=\"illo\" width={stateVars.canvas_w[0]} height={stateVars.canvas_h[0]}>\n                    <p>{stateVars.fallback[0]}</p>\n                </canvas>\n            </section>\n        </section>\n    )\n}\n\nexport default Viewer;","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport AddIcon from '@material-ui/icons/Add';\nimport { IconButton } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n    addbtn: {\n        color: 'white'\n    },\n    disabled: {\n        color: 'grey'\n    }\n});\n\nexport default function AddShapeMenu(props) {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  //let selected = props.selected;\n\n  let selectedNodeId = props.selectedNodeId;\n  let addNewZdogShape = props.addNewZdogShape;\n\n  const classes = useStyles();\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  function handleShapeSelect(v) {\n      handleClose();\n      addNewZdogShape(v, selectedNodeId[0]);\n  }\n\n  return (\n    <div>\n      <IconButton disabled={selectedNodeId[0] === ''} aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\n        <AddIcon className={(selectedNodeId[0] === '')? classes.disabled : classes.addbtn} /* color=\"inherit\"  */fontSize=\"small\"/>\n      </IconButton>\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        <MenuItem onClick={() => handleShapeSelect('Group')}value=\"Group\">Group</MenuItem>\n        <MenuItem onClick={() => handleShapeSelect('Ellipse')}value=\"Ellipse\">Ellipse</MenuItem>\n        <MenuItem onClick={() => handleShapeSelect('Rect')} value=\"Rectangle\">Rectangle</MenuItem>\n        <MenuItem onClick={() => handleShapeSelect('RoundedRect')} value=\"Rounded Rectangle\">Rounded Rectangle</MenuItem>\n        <MenuItem onClick={() => handleShapeSelect('Box')} value=\"Box\">Box</MenuItem>\n        <MenuItem onClick={() => handleShapeSelect('Hemisphere')} value=\"Hemisphere\">Hemisphere</MenuItem>\n        <MenuItem onClick={() => handleShapeSelect('Polygon')} value=\"Polygon\">Polygon</MenuItem>\n        <MenuItem onClick={() => handleShapeSelect('Cone')} value=\"Cone\">Cone</MenuItem>\n        <MenuItem onClick={() => handleShapeSelect('Cylinder')} value=\"Cylinder\">Cylinder</MenuItem>\n      </Menu>\n    </div>\n  );\n}","import React, { useEffect, useState } from 'react';\nimport '../zdogui.css';\nimport AddIcon from '@material-ui/icons/Add';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TreeView from '@material-ui/lab/TreeView';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport TreeItem from '@material-ui/lab/TreeItem';\nimport { Button, ButtonGroup, Container, Dialog, IconButton, Menu, MenuItem, Select, Typography } from '@material-ui/core';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport AddShapeMenu from './AddShapeMenu';\n\nimport generateID from '../generateID';\nimport fixCamelCase from '../fixCamelCase';\n\n\nconst useStyles = makeStyles({\n    root: {\n        padding: 16,\n        overflowX: 'scroll',\n        overflowY: 'scroll',\n       height: window.innerHeight - 185 /* 185 is (appbar + actionsbar heights) + additional 33px offset needed for bottom horizontal scroll bar to show */\n\n    },\n    item: {\n        /* height: 16 */\n    },\n    addshape: {\n        width: 140,\n        height: 34\n    },\n    add: {\n        backgroundColor: 'dodgerblue',\n        color: 'white'\n    },\n    delete: {\n        color: 'white'\n        /* height: 36,\n        width: 40, */\n        /*        marginLeft: 12 */\n    },\n    disabled: {\n        color: 'grey'\n    },\n    inlineAdd: {\n        display: 'inline'\n    },\n    shapelabel: {\n        display: 'inline',\n        paddingTop: 11\n    },\n    confirmDialog: {\n        padding: 40\n    },\n});\n\nexport default function ShapeTree(props) {\n\n    const stateVars = props.stateVars;\n    const addedShapes = props.addedShapes;\n\n    let cursorFocus = props.cursorFocus;\n\n    let selectedNodeId = props.selectedNodeId;\n\n    let addNewZdogShape = props.addNewZdogShape;\n\n    const classes = useStyles();\n    const [expanded, setExpanded] = React.useState(['canvasnode']);\n\n    console.log('expanded = ' + expanded);\n\n    const [confirmDialogOpen, setConfirmDialogOpen] = useState(false);\n\n    //const [selected, setSelected] = React.useState([]);\n\n    //const [selectShapeValue, setSelectShapeValue] = useState('Ellipse');\n\n    const handleToggle = (event, nodeIds) => {\n        setExpanded(nodeIds);\n    };\n\n    const handleSelect = (event, nodeIds) => {\n        selectedNodeId[1](nodeIds);\n        //setSelected(nodeIds);\n        console.log('nodeIds: ' + nodeIds);\n    };\n\n    /* function handle_onAdd() {\n        props.addNewZdogShape(selectShapeValue);\n        checkCursorFocus();\n    } */\n\n    function copyArray(a) {\n        let newArray = [];\n        newArray.push(a);\n        let newArrayFlattened = newArray.flat();\n        return newArrayFlattened;\n    }\n\n    function checkParentExpanded() {\n        let pos = selectedNodeId[0].split('_');\n        if (pos.length > 1) {\n            pos.pop();\n            let parentId = pos.join('_');\n            if (!expanded.includes(parentId)) {\n                console.log('does not include parentId');\n                let copied = copyArray(expanded);\n                copied.push(parentId);\n                setExpanded(copied);\n            }\n        } else {\n            if (!expanded.includes('canvasnode')) {\n                let copied = copyArray(expanded);\n                copied.push('canvasnode');\n                setExpanded(copied);\n            }\n        }\n    }\n\n    function checkCursorFocus() {\n        console.log('inside cursor check');\n        if (cursorFocus[0]['id'] !== '') {\n            cursorFocus[1]({\n                'id': '',\n                'cursorPos': 0\n            });\n            console.log('cursorFocus reset');\n        }\n    }\n\n    function handleDelete() {\n        console.log('hello');\n        setConfirmDialogOpen(true);\n    }\n\n    function handleConfirm() {\n        let flattened = copyShapes();\n\n        let nodeId = selectedNodeId[0];\n        let posStrings = nodeId.split('_');\n        let posNums = posStrings.map((s) => Number(s));\n\n        if (posNums.length === 1) {\n\n            flattened.splice(posNums[0], 1);\n\n            // reset selected node id to canvas\n            selectedNodeId[1]('canvasnode');\n\n        } else {\n            let currentShape;\n\n            posNums.forEach((posNum, i) => {\n                if ((0 < i) && (i <= (posNums.length - 2))) {\n                    currentShape = currentShape.children[posNum];\n                } else if (i === 0) {\n                    currentShape = flattened[posNum];\n                }\n            })\n\n            let lastpos = posNums[posNums.length - 1];\n\n            currentShape.children.splice(lastpos, 1);\n\n            // reset selected node id to parent of deleted shape\n            posNums.pop();\n            let posNumsToStrings = posNums.map((n) => n.toString());\n            let parentNodeId = posNumsToStrings.join('_');\n            selectedNodeId[1](parentNodeId);\n            \n        }\n\n        //setShapes(flattened);\n        addedShapes[1](flattened);\n        handleClose();\n    }\n\n    function handleClose() {\n        setConfirmDialogOpen(false);\n    }\n\n    function copyShapes() {\n        let newshapearry = [];\n        newshapearry.push(addedShapes[0]);\n        let flattened = newshapearry.flat();\n        return flattened;\n    }\n\n    function createTree(childrenArray, parentnodeid) {\n        let p = parentnodeid;\n        console.log(childrenArray.length !== 0);\n        if (childrenArray.length !== 0) {\n            let treeitems = childrenArray.map((shape, i) => {\n                let pos = `${p}_${i}`;\n                let item = (<TreeItem className={classes.item} key={generateID()} nodeId={pos} label={fixCamelCase(shape.shapeClass)}>\n                    {createTree(shape.children, pos)}\n                </TreeItem>);\n                return item;\n            })\n            return treeitems;\n        } else {\n            return '';\n        }\n    }\n\n    let toptreelevel = addedShapes[0].map((shape, i) => {\n        let item =\n            (<TreeItem className={classes.item} key={generateID()} nodeId={i.toString()} label={fixCamelCase(shape.shapeClass)}>\n                {createTree(shape.children, i.toString())}\n            </TreeItem>);\n        return item;\n    })\n\n    useEffect(() => {\n        checkParentExpanded();\n    });\n\n\n    return (\n        <section className=\"shapetree\">\n            <div className=\"toplevelactions\">\n                {/* <ButtonGroup>\n                    <Select color=\"primary\" className={classes.addshape} value={selectShapeValue} onChange={(e) => { setSelectShapeValue(e.target.value); }}>\n                        <MenuItem value=\"Ellipse\">Ellipse</MenuItem>\n                        <MenuItem value=\"Rect\">Rect</MenuItem>\n                    </Select>\n                    <Button id=\"add\" className={classes.add} onClick={handle_onAdd} aria-label=\"add\">\n                        <AddIcon fontSize=\"small\" />\n                    </Button>\n                </ButtonGroup> */}\n                <ButtonGroup id=\"btngrp\">\n                    <div>\n                        <IconButton className={(selectedNodeId[0] === '' || selectedNodeId[0] === 'canvasnode') ? classes.disabled : classes.delete} onClick={handleDelete} aria-label=\"delete\" disabled={(selectedNodeId[0] === '' || selectedNodeId[0] === 'canvasnode')}>\n                            <DeleteOutlinedIcon fontSize=\"small\" />\n                        </IconButton>\n                    </div>\n\n                    <Dialog onClose={handleClose} open={confirmDialogOpen}>\n                        <Container className={classes.confirmDialog}>\n                            <Typography>Deleting this shape will also delete any child shapes. Are you sure you want to delete this shape?</Typography>\n                            <div>\n                                <Button onClick={handleConfirm} color=\"primary\">Confirm</Button>\n                                <Button onClick={handleClose}>Cancel</Button>\n                            </div>\n                        </Container>\n\n                    </Dialog>\n\n                    <AddShapeMenu selectedNodeId={selectedNodeId} addNewZdogShape={addNewZdogShape} />\n                </ButtonGroup>\n\n\n            </div>\n            <TreeView\n                className={classes.root}\n                defaultCollapseIcon={<ExpandMoreIcon />}\n                defaultExpandIcon={<ChevronRightIcon />}\n                expanded={expanded}\n                selected={selectedNodeId[0]}\n                onNodeToggle={handleToggle}\n                onNodeSelect={handleSelect}\n            >\n                <TreeItem className={classes.item} nodeId=\"canvasnode\" label=\"Canvas\">\n                    {toptreelevel}\n                </TreeItem>\n            </TreeView>\n        </section>\n    )\n\n}","\n\nexport let shapeProperties = {\n    'basic': [\n        'addTo', 'color', 'backface', 'stroke', /* 'closed', */ 'fill', 'translate', 'rotate'/*, 'scale', 'zoom' */\n    ],\n    'Ellipse': [\n        /*'diameter',*/ 'width', 'height', 'quarters'\n    ],\n    'Rect': [\n        'width', 'height'\n    ],\n    'Box': [\n        'width', 'height', 'depth', 'frontFace', 'rearFace', 'topFace', 'bottomFace', 'leftFace', 'rightFace'\n    ],\n    'Hemisphere': [\n        'diameter'\n    ],\n    'RoundedRect': [\n        'width', 'height', 'cornerRadius'\n    ],\n    'Polygon': [\n        'radius', 'sides'\n    ],\n    'Cone': [\n        'diameter', 'length'\n    ],\n    'Cylinder': [\n        'diameter', 'length', 'frontFace'\n    ],\n    'Group': []\n}","export default function createScript(illoVars, shapesCopy) {\n    \n    let scriptString = `\n/* illo.js */\n\n// Copy and paste everything into a new file named \"illo.js\"\n\n\n// create illo\nlet illo = new Zdog.Illustration({\n    // set canvas with id 'illo'\n    element: \"#illo\",\n    dragRotate: ${illoVars.dragRotate[0]},\n    rotate: {\n        x: ${illoVars.rotate_x[0]},\n        y: ${illoVars.rotate_y[0]},\n        z: ${illoVars.rotate_z[0]}\n    }\n});\n    `;\n\n    let shapeCount = 0;\n\n    function createChildShapes(parent, parentName) {\n        if (parent.children.length > 0) {\n            parent.children.forEach((shape) => {\n                let name = `shape${shapeCount}`;\n                let data = shape.data;\n                shape.data.addTo = \"--\" + parentName + \"--\";\n                let dataString = JSON.stringify(data, null, '\\t');\n                let newShapeString = `\nlet ${name} = new Zdog['${shape.shapeClass}'](${dataString})\n        `;\n        \n        scriptString = scriptString.concat(newShapeString);\n        shapeCount += 1;\n                createChildShapes(shape, name);\n            })\n        }\n    }\n\n    shapesCopy.forEach(shape => {\n        let name = `shape${shapeCount}`;\n        let data = shape.data;\n        data.addTo = \"--illo--\";\n        let dataString = JSON.stringify(data, null, '\\t');\n        let newShapeString = `\nlet ${name} = new Zdog['${shape.shapeClass}'](${dataString})\n        `;\n        scriptString = scriptString.concat(newShapeString);\n        shapeCount += 1;\n        createChildShapes(shape, name);\n    });\n\n    let endString;\n\n    if (illoVars.animate[0]) {\n\n        // continuous spin\n        if (illoVars.animateSelection[0] === 'spin') {\n            endString = `\nfunction animate() {\n    illo.rotate.x += ${illoVars.spin_x[0]};\n    illo.rotate.y += ${illoVars.spin_y[0]};\n    illo.rotate.z += ${illoVars.spin_z[0]};\n    illo.updateRenderGraph();\n    requestAnimationFrame(animate);\n}\n            \n    animate();\n        `\n        } else if (illoVars.animateSelection[0] === 'ease') {\n        endString = `\n/* Zdog animate fn for easeInOut */\n\nlet ticker = 0;\nlet cycleCount = ${illoVars.easeIO[0].cycleCount};\n\nfunction animate() {\n    let progress = ticker / cycleCount;\n    // apply easing to rotation\n    let tween = Zdog.easeInOut(progress % 1, ${illoVars.easeIO[0].power});\n    ${illoVars.easeIO[0].x ? 'illo.rotate.x = tween * Zdog.TAU;' : ''}\n    ${illoVars.easeIO[0].y ? 'illo.rotate.y = tween * Zdog.TAU;' : ''}\n    ${illoVars.easeIO[0].z ? 'illo.rotate.z = tween * Zdog.TAU;' : ''}\n    ticker++;\n\n    illo.updateRenderGraph();\n    requestAnimationFrame(animate);\n}\n\nanimate();\n        `\n        }\n    } else if (!illoVars.animate[0] && illoVars.dragRotate[0]) {\n        endString = `\nfunction animate() {\n    illo.updateRenderGraph();\n    requestAnimationFrame(animate);\n}\n        \nanimate();\n        `\n    } else {\n        endString = `\n// update & render\nillo.updateRenderGraph();\n        `\n    }\n\n    scriptString = scriptString.concat(endString);\n\n    return scriptString;\n\n}\n\n","import React, { useEffect, useState } from 'react';\nimport './zdogui.css';\nimport Controls from './components/Controls';\nimport Viewer from './components/Viewer';\nimport ShapeTree from './components/ShapeTree';\nimport { shapeProperties } from './shapeProperties';\n\nimport Zdog from 'zdog';\nimport { AppBar, Button, IconButton, Toolbar, Typography, makeStyles, Dialog, Container } from '@material-ui/core';\nimport CodeIcon from '@material-ui/icons/Code';\n\nimport { CodeJar } from 'codejar';\nimport Prism from 'prismjs';\nimport createScript from './createScript';\nimport generateID from './generateID';\n\n\n/* Zdog shape instances */\nconst zdogDefaultShapes = {\n  'Group': new Zdog.Group(),\n  'Ellipse': new Zdog.Ellipse(),\n  'Rect': new Zdog.Rect(),\n  'Box': new Zdog.Box(),\n  'Hemisphere': new Zdog.Hemisphere(),\n  'RoundedRect': new Zdog.RoundedRect(),\n  'Polygon': new Zdog.Polygon(),\n  'Cone': new Zdog.Cone(),\n  'Cylinder': new Zdog.Cylinder(),\n}\n\n\nconst useStyles = makeStyles((theme) => ({\n  bar: {\n    backgroundColor: \"#2b2b2b\"\n  },\n  getCode: {\n    right: 16,\n    position: \"absolute\",\n    backgroundColor: \"#3a3939\",\n    paddingLeft: 16,\n    paddingRight: 16\n  },\n  container: {\n    paddingTop: 24\n  }\n}));\n\nlet valuesarry = [200, 120, 40, 80, 160];\n\n\nlet demos = {\n  none: {\n    fallback: \"An animated illustration consisting of 3D shapes\",\n    shapelayers: []\n  },\n  lego: {\n    fallback: 'Animated model of a red LEGO piece',\n    shapelayers: [\n      {\n        id: generateID(),\n        children: [\n          {\n            id: generateID(),\n            children: [\n              {\n                id: generateID(),\n                children: [],\n                open: true,\n                shapeClass: 'Cylinder',\n                data: {\n                  \"color\": \"#c30006\",\n                  \"backface\": \"#aa0a11\",\n                  \"stroke\": \"1\",\n                  \"fill\": true,\n                  \"translate\": new Zdog.Vector({\n                    \"x\": -80,\n                    \"y\": 0,\n                    \"z\": 0\n                  }),\n                  \"rotate\": new Zdog.Vector({}),\n                  \"diameter\": \"65\",\n                  \"length\": \"85\",\n                  \"frontFace\": \"#000000\"\n                },\n                faces: {}\n              },\n              {\n                id: generateID(),\n                children: [],\n                open: true,\n                shapeClass: 'Cylinder',\n                data: {\n                  \"color\": \"#c30006\",\n                  \"backface\": \"#aa0a11\",\n                  \"stroke\": \"1\",\n                  \"fill\": true,\n                  \"translate\": new Zdog.Vector({}),\n                  \"rotate\": new Zdog.Vector({}),\n                  \"diameter\": \"65\",\n                  \"length\": \"85\",\n                  \"frontFace\": \"#000000\"\n                },\n                faces: {}\n              },\n              {\n                id: generateID(),\n                children: [],\n                open: true,\n                shapeClass: 'Cylinder',\n                data: {\n                  \"color\": \"#c30006\",\n                  \"backface\": \"#aa0a11\",\n                  \"stroke\": \"1\",\n                  \"fill\": true,\n                  \"translate\": new Zdog.Vector({\n                    \"x\": 80,\n                    \"y\": 0,\n                    \"z\": 0\n                  }),\n                  \"rotate\": new Zdog.Vector({}),\n                  \"diameter\": \"65\",\n                  \"length\": \"85\",\n                  \"frontFace\": \"#000000\"\n                },\n                faces: {}\n              }\n            ],\n            open: true,\n            shapeClass: 'Group',\n            data: {\n              \"translate\": new Zdog.Vector({\n                \"x\": 0,\n                \"y\": 5,\n                \"z\": 0\n              }),\n              \"rotate\": new Zdog.Vector({\n                \"x\": 1.5707963267948966,\n                \"y\": 0,\n                \"z\": 0\n              })\n            },\n            faces: {}\n          }\n        ],\n        open: true,\n        shapeClass: 'Box',\n        data: {\n          /*         \"addTo\": illo, */\n          \"color\": \"#c30005\",\n          \"backface\": true,\n          \"stroke\": 1,\n          \"fill\": true,\n          \"translate\": new Zdog.Vector({}),\n          \"rotate\": new Zdog.Vector({}),\n          \"width\": \"320\",\n          \"height\": \"96\",\n          \"depth\": \"160\",\n          \"frontFace\": \"#b2081f\",\n          \"rearFace\": \"#c30005\",\n          \"topFace\": \"#db0623\",\n          \"bottomFace\": false,\n          \"leftFace\": \"#c30005\",\n          \"rightFace\": \"#c30005\"\n        },\n        faces: {\n          \"frontFace\": true,\n          \"rearFace\": true,\n          \"topFace\": true,\n          \"bottomFace\": \"#a20106\",\n          \"leftFace\": true,\n          \"rightFace\": true\n        }\n      },\n      {\n        id: generateID(),\n        children: [\n          {\n            id: generateID(),\n            children: [],\n            open: true,\n            shapeClass: 'Cylinder',\n            data: {\n              \"color\": \"#c30006\",\n              \"backface\": true,\n              \"stroke\": 1,\n              \"fill\": true,\n              \"translate\": new Zdog.Vector({\n                \"x\": 40,\n                \"y\": 40,\n                \"z\": 0\n              }),\n              \"rotate\": new Zdog.Vector({}),\n              \"diameter\": \"50\",\n              \"length\": \"20\",\n              \"frontFace\": \"#db0723\"\n            },\n            faces: {}\n          },\n          {\n            id: generateID(),\n            children: [],\n            open: true,\n            shapeClass: 'Cylinder',\n            data: {\n              \"color\": \"#c30006\",\n              \"backface\": true,\n              \"stroke\": 1,\n              \"fill\": true,\n              \"translate\": new Zdog.Vector({\n                \"x\": 40,\n                \"y\": -40,\n                \"z\": 0\n              }),\n              \"rotate\": new Zdog.Vector({}),\n              \"diameter\": \"50\",\n              \"length\": \"20\",\n              \"frontFace\": \"#db0723\"\n            },\n            faces: {}\n          },\n          {\n            id: generateID(),\n            children: [],\n            open: true,\n            shapeClass: 'Cylinder',\n            data: {\n              \"color\": \"#c30006\",\n              \"backface\": true,\n              \"stroke\": 1,\n              \"fill\": true,\n              \"translate\": new Zdog.Vector({\n                \"x\": 120,\n                \"y\": 40,\n                \"z\": 0\n              }),\n              \"rotate\": new Zdog.Vector({}),\n              \"diameter\": \"50\",\n              \"length\": \"20\",\n              \"frontFace\": \"#db0723\"\n            },\n            faces: {}\n          },\n          {\n            id: generateID(),\n            children: [],\n            open: true,\n            shapeClass: 'Cylinder',\n            data: {\n              \"color\": \"#c30006\",\n              \"backface\": true,\n              \"stroke\": 1,\n              \"fill\": true,\n              \"translate\": new Zdog.Vector({\n                \"x\": 120,\n                \"y\": -40,\n                \"z\": 0\n              }),\n              \"rotate\": new Zdog.Vector({}),\n              \"diameter\": \"50\",\n              \"length\": \"20\",\n              \"frontFace\": \"#db0723\"\n            },\n            faces: {}\n          },\n          {\n            id: generateID(),\n            children: [],\n            open: true,\n            shapeClass: 'Cylinder',\n            data: {\n              \"color\": \"#c30006\",\n              \"backface\": true,\n              \"stroke\": 1,\n              \"fill\": true,\n              \"translate\": new Zdog.Vector({\n                \"x\": -120,\n                \"y\": 40,\n                \"z\": 0\n              }),\n              \"rotate\": new Zdog.Vector({}),\n              \"diameter\": \"50\",\n              \"length\": \"20\",\n              \"frontFace\": \"#db0723\"\n            },\n            faces: {}\n          },\n          {\n            id: generateID(),\n            children: [],\n            open: true,\n            shapeClass: 'Cylinder',\n            data: {\n              \"color\": \"#b2081f\",\n              \"backface\": true,\n              \"stroke\": 1,\n              \"fill\": true,\n              \"translate\": new Zdog.Vector({\n                \"x\": -120,\n                \"y\": -40,\n                \"z\": 0\n              }),\n              \"rotate\": new Zdog.Vector({}),\n              \"diameter\": \"50\",\n              \"length\": \"20\",\n              \"frontFace\": \"#db0723\"\n            },\n            faces: {}\n          },\n          {\n            id: generateID(),\n            children: [],\n            open: true,\n            shapeClass: 'Cylinder',\n            data: {\n              \"color\": \"#b2081f\",\n              \"backface\": true,\n              \"stroke\": 1,\n              \"fill\": true,\n              \"translate\": new Zdog.Vector({\n                \"x\": -40,\n                \"y\": 40,\n                \"z\": 0\n              }),\n              \"rotate\": new Zdog.Vector({}),\n              \"diameter\": \"50\",\n              \"length\": \"20\",\n              \"frontFace\": \"#db0723\"\n            },\n            faces: {}\n          },\n          {\n            id: generateID(),\n            children: [],\n            open: true,\n            shapeClass: 'Cylinder',\n            data: {\n              \"color\": \"#b2081f\",\n              \"backface\": true,\n              \"stroke\": 1,\n              \"fill\": true,\n              \"translate\": new Zdog.Vector({\n                \"x\": -40,\n                \"y\": -40,\n                \"z\": 0\n              }),\n              \"rotate\": new Zdog.Vector({}),\n              \"diameter\": \"50\",\n              \"length\": \"20\",\n              \"frontFace\": \"#db0723\"\n            },\n            faces: {}\n          }\n        ],\n        open: true,\n        shapeClass: 'Group',\n        data: {\n          \"translate\": new Zdog.Vector({\n            \"x\": 0,\n            \"y\": -58,\n            \"z\": 0\n          }),\n          \"rotate\": new Zdog.Vector({\n            \"x\": 1.5707963267948966,\n            \"y\": 0,\n            \"z\": 0\n          }),\n          /*  \"addTo\": illo */\n        },\n        faces: {}\n      }\n    ]\n  }\n}\n\nfunction App(props) {\n\n  const stateVars = {\n    canvas_w: useState(500),\n    canvas_h: useState(500),\n    dragRotate: useState(true),\n    animate: useState(false),\n    rotate_x: useState(0),\n    rotate_y: useState(3.141592653589793),\n    rotate_z: useState(0.4363323129985824),\n    spin_x: useState(.01),\n    spin_y: useState(.04),\n    spin_z: useState(.01),\n    easeIO: useState(\n      {\n        x: true,\n        y: true,\n        z: false,\n        cycleCount: 400,\n        power: 3\n      }\n    ),\n    animateSelection: useState('ease'),\n    demo: useState('lego'),\n    fallback: useState(demos.lego.fallback)\n  }\n\n  const addedShapes = useState(demos.lego.shapelayers);\n\n  const [open, setOpen] = useState(false);\n\n  let cursorFocus = useState({\n    'id': '',\n    'cursorPos': 0\n  });\n\n  const selectedNodeId = useState('canvasnode');\n\n  const classes = useStyles();\n\n  function copyShapes() {\n    let newshapearry = [];\n    newshapearry.push(addedShapes[0]);\n    let flattened = newshapearry.flat();\n    return flattened;\n  }\n\n\n  function getDefaultValsForShapeProperties(defaultShapes, shapeClass) {\n\n    let zdogShape = defaultShapes[shapeClass];\n\n    let props_basic = (shapeClass === 'Group') ? ['translate', 'rotate'] : shapeProperties['basic'];\n\n    let props_shape = shapeProperties[shapeClass];\n    let data = {};\n    let faces = {};\n\n    /*  props_basic.forEach((prop) => {\n       let defaultVal = zdogShape[prop];\n       data[prop] = defaultVal;\n     }) */\n\n    props_basic.forEach((prop) => {\n      if (prop === 'translate' || prop === 'rotate') {\n        data[prop] = new Zdog.Vector({});\n        /* data[prop]['x'] = zdogShape[prop]['x'];\n        data[prop].y = zdogShape[prop].y;\n        data[prop].z = zdogShape[prop].z; */\n      } else {\n        let defaultVal = zdogShape[prop];\n        data[prop] = defaultVal;\n      }\n    })\n\n    props_shape.forEach((prop) => {\n      if (prop === 'width' || prop === 'height' || prop === 'depth' || prop === 'diameter' || prop === 'length' || prop === 'radius') {\n        data[prop] = 100;\n      } else if (prop.includes('Face') || prop.includes('face')) {\n        data[prop] = '#000000';\n        faces[prop] = true;\n      } else {\n        let defaultVal = zdogShape[prop];\n        data[prop] = defaultVal;\n      }\n    })\n\n    return { data, faces };\n\n  }\n\n\n  function addNewZdogShape(shapeClass, nodeId) {\n\n    let flattened = copyShapes();\n\n    let shapeDefaults = getDefaultValsForShapeProperties(zdogDefaultShapes, shapeClass);\n\n    let newshape = {\n      id: generateID(),\n      children: [],\n      open: true,\n      shapeClass: shapeClass,\n      data: shapeDefaults.data,\n      faces: shapeDefaults.faces\n    }\n\n    if (nodeId === \"canvasnode\") {\n\n      flattened.push(newshape);\n\n      // set selectedNodeId to newly added shape layer in tree\n      selectedNodeId[1]((flattened.length - 1).toString());\n\n    } else {\n      let posStrings = nodeId.split('_');\n      let posNums = posStrings.map((s) => Number(s));\n\n      let currentShape;\n\n      posNums.forEach((posNum, i) => {\n        if ((0 < i) && (i <= (posNums.length - 1))) {\n          currentShape = currentShape.children[posNum];\n        } else if (i === 0) {\n          currentShape = flattened[posNum];\n        }\n      })\n\n      currentShape.children.push(newshape);\n\n      // set selectedNodeId to newly added shape layer in tree\n      let childcount = currentShape.children.length;\n      selectedNodeId[1](nodeId + '_' + (childcount - 1));\n    }\n\n    addedShapes[1](flattened);\n\n  }\n\n  function getCode() {\n    console.log('getting code');\n    setOpen(true);\n  }\n\n  function handleClose() {\n    setOpen(false);\n  }\n\n  function removeAllDoubleDashQuotes(scriptString) {\n    let fixedScript = scriptString.replaceAll(`\"--`, '');\n    let fixedScript2 = fixedScript.replaceAll(`--\"`, '');\n    return fixedScript2;\n  }\n\n  console.log('testing outside return');\n\n  useEffect(() => {\n    if (open) {\n      console.log('open');\n      setTimeout(() => {\n\n        let divHTML = document.getElementById('editorHTML');\n        let jarHTML = CodeJar(divHTML, Prism.highlightElement);\n\n        let snippet =\n          `<canvas id=\"illo\" width=\"${stateVars.canvas_w[0]}\" height=\"${stateVars.canvas_h[0]}\">\n          <p>${stateVars.fallback[0]}</p>\n        </canvas>`;\n\n        jarHTML.updateCode(snippet);\n\n        let div = document.getElementById('editor');\n\n        if (div !== null) {\n          /* function myhighlight(div) {\n            const code = 'let foo = bar';\n            div.innerHTML = code;\n          } */\n          let jar = CodeJar(div, Prism.highlightElement);\n\n          if (addedShapes[0].length > 0) {\n            let flattened = copyShapes();\n            let scriptString = createScript(stateVars, flattened);\n            let fixed = removeAllDoubleDashQuotes(scriptString);\n            jar.updateCode(fixed);\n\n          }\n\n          // Get code\n          let mycode = jar.toString();\n          console.log(mycode);\n\n          // Listen to updates\n          jar.onUpdate((code) => {\n            console.log(code);\n          });\n        }\n      }, 1000);\n    }\n  }, [open]);\n\n  // TO DO\n  /* useEffect(() => {\n    console.log('a shapelayer input was just updated');\n    // pass this as prop to shapeLayer and add to conditional refocus\n  }, [actuallyJustUpdated]) */\n\n  console.log('selectedNodeId[0]: ' + selectedNodeId[0]);\n\n\n  return (\n\n    <React.Fragment>\n\n      <AppBar elevation={0} position=\"fixed\" className={classes.bar}>\n        <Toolbar>\n          <Typography variant=\"h6\">\n            Zdog UI\n          </Typography>\n          <Button onClick={getCode} color=\"inherit\" startIcon={<CodeIcon />} aria-label=\"get code\" className={classes.getCode}>Get Code</Button>\n          <Dialog maxWidth=\"md\" onClose={handleClose} open={open}>\n            <Container className={classes.container}>\n              <Typography>HTML</Typography>\n              <div id=\"editorHTML\">Canvas element...</div>\n              <Typography>JavaScript</Typography>\n              <div id=\"editor\">Getting code...</div>\n            </Container>\n\n          </Dialog>\n        </Toolbar>\n      </AppBar>\n\n      <main>\n\n        <ShapeTree selectedNodeId={selectedNodeId} cursorFocus={cursorFocus} addNewZdogShape={addNewZdogShape} stateVars={stateVars} addedShapes={addedShapes}></ShapeTree>\n        <Viewer shapes={addedShapes} stateVars={stateVars}></Viewer>\n        <Controls selectedNodeId={selectedNodeId} cursorFocus={cursorFocus} stateVars={stateVars} addedShapes={addedShapes}></Controls>\n      </main>\n\n    </React.Fragment>\n\n  );\n\n}\n\nexport default App;\n\n\n\n/* <AppBar position=\"static\" color=\"secondary\">\n          <Toolbar>\n            <Typography variant=\"h6\" >\n              Zdog UI\n            </Typography>\n              <IconButton edge=\"end\" color=\"inherit\" aria-label=\"get code\">\n              <CodeIcon />\n            </IconButton>\n          </Toolbar>\n        </AppBar>\n        */\n\n/*\n<header>\n<Typography variant=\"h6\">\nZdog UI\n</Typography>\n  <IconButton edge=\"end\" color=\"inherit\" aria-label=\"get code\">\n  <CodeIcon />\n</IconButton>\n</header>\n*/","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}